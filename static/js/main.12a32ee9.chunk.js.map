{"version":3,"sources":["draw.js","App.js","serviceWorker.js","index.js"],"names":["cell_size","grid_w","grid_h","grid_left","grid_top","grid_bottom","grid_right","corner_offset","hover_offset","colors","current_color","current_mode","scene","matrix","stuff","drag","undo_stack","thermo","cage","edge_cage","outer","underlay","shift","cursor","textOptions","font","Component","cursors","pointer","centerTextOptions","fill","cornerTextOptions","cageCornerTextOptions","Text2","ctx","origin","this","getOrigin","translate","x","y","path","window","Path2D","rect","width","height","fillStyle","options","toString","Text","set_cell","mode","newtext","m","get","undo_entry","old_normal","normal","text","main_grid","lock_type","meas","measure","position","center","corner","forEach","t","side","current","i","indexOf","cage_corner","r_color","push","keydown","event","key","preventDefault","rem","s","cells","type","start","pos","center_px","remove","children","e","render","delete_thermo","find","c","each_cell","r_cage","empty","delete_edge_cage","r","splice","startsWith","mark","count","p","draw_thermo","points","_color","match","map","color","Color","red","alpha","green","blue","start_px","bulb","Circle","px","line","Line","stroke","strokeWidth","join","joins","miter","add","CageLine","setLineDash","f","draw_cage","get_cage","lines","up","down","left","right","ul","ur","dl","dr","l","add_line","end","corner_pos","corner_ext_pos","slice","concat","draw_edge_cage","r_corner_pos","DrawUndo","length","u","pop","DrawAddGrid","box_w","box_h","edge","edge_right","edge_bottom","set_color","DrawRender","code","wrapper","cellSize","size","margins","Scene","on","keyup","top","bottom","outer_w","outer_x","options_inner","fontSize","Container","xp","yp","cont","Rectangle","r_hover","side_pos","center_pos","r_corner","objs","mousedown","parent","hover","move","inner_hover","frame_w","frame_h","frame","color_buttons","c_buttons","_c","b","Button","value","reverse","base64","pack","Uint8Array","from","atob","charCodeAt","unpack","pako","inflate","data","msgpack","decode","load","addEventListener","UrlDialog","props","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","onClick","focus","App","click","setState","getColor","console","log","state","generateUrl","url","out","gw","gh","coded","encode","packed","deflate","btoa","String","fromCharCode","location","encodeURIComponent","DrawGenerateUrl","dialogText","dialogOpen","setLeftMargin","setGridSize","setRightMargin","setTopMargin","setBottomMargin","setWidth","setHeight","setCellSize","query","search","URLSearchParams","document","getElementById","id","Box","Grid","container","spacing","item","xs","margin","ButtonGroup","fullWidth","variant","orientation","padding","boxShadow","Typography","gutterBottom","Slider","defaultValue","valueLabelDisplay","min","max","step","marks","onChangeCommitted","style","React","Boolean","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PAQIA,EAAY,GACZC,EAAS,EACTC,EAAS,EACTC,EAAY,EACZC,EAAW,EACXC,EAAc,EACdC,EAAa,EACXC,EAA4B,IAAZP,EAChBQ,EAA2B,GAAZR,EAYfS,EAAS,CACX,mBACA,2BACA,yBACA,0BACA,0BACA,0BACA,yBACA,0BACA,2BAEAC,EAAgBD,EAAO,GACvBE,EAAe,SACfC,EAAQ,KACRC,EAAS,GACTC,EAAQ,GACRC,GAAO,EACPC,EAAa,GACbC,EAAS,KACTC,EAAO,KACPC,EAAY,KACZC,EAAQ,KACRC,EAAW,KACXC,GAAQ,EACRC,EAAS,KAeb,IAAMC,EAAc,CAChBC,KAAM,aACNF,OAAQG,IAAUC,QAAQC,SAExBC,EAAoB,CACtBJ,KAAM,aACNK,KAvDmB,oBAwDnBP,OAAQG,IAAUC,QAAQC,SAExBG,EAAoB,CACtBN,KAAM,aACNK,KA5DmB,oBA6DnBP,OAAQG,IAAUC,QAAQC,SAExBI,EAAwB,CAC1BP,KAAM,aACNK,KAAM,QACNP,OAAQG,IAAUC,QAAQC,SAGxBK,E,uKAEOC,GACL,IAAMC,EAASC,KAAKC,YAcpB,OAbAH,EAAII,UAAUH,EAAOI,EAAGJ,EAAOK,GAE/BJ,KAAKK,KAAO,IAAIC,OAAOC,OACvBP,KAAKK,KAAKG,KAAK,EAAG,EAAGR,KAAKS,MAAOT,KAAKU,QAEtCZ,EAAIa,UAAY,sBAChBb,EAAIJ,KAAKM,KAAKK,MACdP,EAAIa,UAAYX,KAAKY,QAAQlB,KAAKmB,SAASf,GAE3CA,EAAII,WAAWH,EAAOI,GAAIJ,EAAOK,GAEjC,gEAAeN,GAERE,S,GAjBKc,KAqBpB,SAASC,EAASZ,EAAGC,EAAGY,EAAMC,GAE1B,IAAIC,EAAIC,EAAIhB,EAAGC,GACXgB,EAAa,CACbJ,KAAMA,EACNb,EAAGA,EAAGC,EAAGA,EACTa,QAASA,EACTI,WAAYH,EAAEI,OAAOC,MAGzB,IAAKL,EAAEM,WAAsB,QAATR,KA7FJ,IAgGZE,EAAEO,WAAsC,QAATT,GAAnC,CAIA,GAAa,WAATA,GAA8B,QAATA,EAAgB,CACxB,WAATA,EACAE,EAAEI,OAAOV,QAAQlB,KA7GN,qBAgHXwB,EAAEO,UAAyB,KAAZR,EAzGP,EAyGuC,EAC/CC,EAAEI,OAAOV,QAAQlB,KAAO,SAEvBwB,EAAEM,WAAyB,KAAZP,EAGhBC,EAAEI,OAAOC,KAAON,EAFhBC,EAAEI,OAAOC,MAAQN,EAGrB,IAAMS,EAAOZ,IAAKa,QAAQT,EAAEI,OAAOC,KAAML,EAAEI,OAAOC,KAAKX,SACvDM,EAAEI,OAAOM,SAASzB,GAAKvC,EAAY,IAAM8D,EAAKjB,OAAS,EACvDS,EAAEI,OAAOM,SAASxB,EAAgB,IAAZxC,EACtBsD,EAAEW,OAAON,KAAO,GAChBL,EAAEY,OAAOC,SAAQ,SAAAC,GAAOA,EAAET,KAAO,MACjCL,EAAEe,KAAKF,SAAQ,SAAAC,GAAOA,EAAET,KAAO,WAE9B,GAAa,WAATP,EAAmB,CACxB,IAAIkB,EAAUhB,EAAEW,OAAON,KACnBM,EAAS,GAEb,GADAX,EAAEW,OAAOjB,QAAQlB,KAjIF,oBAkIC,KAAZuB,EACA,IAAK,IAAIkB,EAAI,EAAGA,GAAK,IAAKA,IACO,IAAxBD,EAAQE,QAAQD,IAAaA,KAAOlB,IACT,IAAxBiB,EAAQE,QAAQD,IAAaA,KAAOlB,KACxCY,GAAUM,GAKtBjB,EAAEI,OAAOC,KAAO,GAChBL,EAAEW,OAAON,KAAOM,EAChB,IAAMH,EAAOZ,IAAKa,QAAQE,EAAQX,EAAEW,OAAOjB,SAC3CM,EAAEW,OAAOD,SAASzB,GAAKvC,EAAY8D,EAAKjB,OAAS,EACjDS,EAAEW,OAAOD,SAASxB,GAAKxC,EAAY8D,EAAKhB,QAAU,OAEjD,GAAa,eAATM,EACW,KAAZC,EACAC,EAAEmB,YAAYd,KAAO,GAErBL,EAAEmB,YAAYd,MAAQN,EAC1BC,EAAEO,UAAyB,KAAZR,EA9IH,EA8ImC,OAE9C,GAAa,WAATD,EAAmB,CACxB,IAAIkB,EAAU,GACdhB,EAAEY,OAAOC,SAAQ,SAAAC,GAAOE,GAAWF,EAAET,QACrCL,EAAEe,KAAKF,SAAQ,SAAAC,GAAOE,GAAWF,EAAET,QACnC,IAAIA,EAAO,GACX,GAAgB,KAAZN,EACA,IAAK,IAAIkB,EAAI,EAAGA,GAAK,IAAKA,IACO,IAAxBD,EAAQE,QAAQD,IAAaA,KAAOlB,IACT,IAAxBiB,EAAQE,QAAQD,IAAaA,KAAOlB,KACxCM,GAAQY,GAIpB,IAAIA,EAAI,EACRjB,EAAEI,OAAOC,KAAO,GAChBL,EAAEY,OAAOC,SAAQ,SAAAC,GAAOA,EAAET,KAAOA,EAAKY,MAAQ,MAC9CjB,EAAEe,KAAKF,SAAQ,SAAAC,GAAOA,EAAET,KAAOA,EAAKY,MAAQ,UAE9B,UAATnB,IACLE,EAAEoB,QAAQ1B,QAAQlB,KAAOrB,EAAO4C,EAAU,IAE9CG,EAAWE,OAASJ,EAAEI,OAAOC,KAC7B3C,EAAW2D,KAAKnB,IASpB,SAASoB,EAAQC,GACb,IAAIxB,EACJ,GAAkB,UAAdwB,EAAMC,IACNxD,GAAQ,OAEP,GAAkB,WAAduD,EAAMC,KAAkC,cAAdD,EAAMC,IACrCzB,EAAU,GACVwB,EAAME,qBAEL,IAAkB,MAAdF,EAAMC,KAA6B,MAAdD,EAAMC,IAAa,CAC7C,IAAIE,EAAM,GAuBV,OAtBAlE,EAAMqD,SAAQ,SAACc,EAAGV,GAqQ1B,IAAqBW,EApcD,IAgMJD,EAAEE,MACE5D,EAAO,KAAO0D,EAAEG,MAAM,IAAM7D,EAAO,KAAO0D,EAAEG,MAAM,MAyLtE,SAAuBC,GACtB,IAAD,EACQD,EAAQE,EAAUD,GAClBE,EAAS,GACblE,EAASmE,SAASrB,SAAQ,SAAAsB,GAClBA,EAAEzB,SAASzB,IAAM6C,EAAM,IAAMK,EAAEzB,SAASxB,IAAM4C,EAAM,IACpDG,EAAOZ,KAAKc,OAEpB,EAAApE,GAASkE,OAAT,QAAmBA,GACnB3E,EAAM8E,SAjMUC,CAAcpE,GACdyD,EAAIL,KAAKJ,IAlMX,IAqMFU,EAAEE,MACEF,EAAEC,MAAMU,MAAK,SAAAC,GAAC,OAAIA,EAAE,KAAOtE,EAAO,IAAMsE,EAAE,KAAOtE,EAAO,QA6PvD2D,EA5PWD,EAAEC,MAkQ9BY,IAAU,SAAAxC,GAJK,IAACf,EAAGC,EAAHD,EAKCe,EAAEf,EALAC,EAKGc,EAAEd,EAJb0C,EAAMU,MAAK,SAAAH,GAAC,OAAIA,EAAE,KAAOlD,GAAKkD,EAAE,KAAOjD,MAK1Cc,EAAEyC,OAAOC,WAnQDhB,EAAIL,KAAKJ,IAvMN,IA0MPU,EAAEE,MACEF,EAAEC,MAAMU,MAAK,SAAAC,GAAC,OAAIA,EAAE,KAAOtE,EAAO,IAAMsE,EAAE,KAAOtE,EAAO,QACxD0E,GAAiBhB,EAAEC,OACnBF,EAAIL,KAAKJ,OAIrBS,EAAIb,SAAQ,SAAA+B,GAAC,OAAIpF,EAAMqF,OAAOD,EAAG,WACjCtF,EAAM8E,SAGL,KAAIb,EAAMC,KAAO,KAAOD,EAAMC,KAAO,KAGrC,OAAID,EAAMC,IAAIsB,WAAW,UAAY7E,GACjCD,GACDwE,IAAU,SAAAxC,GACFA,EAAE+C,OACF/C,EAAEV,KAAKI,QAAQlB,KAAO,yBACtBwB,EAAE+C,MAAO,MAKH,YAAdxB,EAAMC,KAAqBvD,EAAO,GAAK,IACvCA,EAAO,IAAM,GACC,cAAdsD,EAAMC,KAAuBvD,EAAO,GAAKrB,EAAS,IAClDqB,EAAO,IAAM,GACC,cAAdsD,EAAMC,KAAuBvD,EAAO,GAAK,IACzCA,EAAO,IAAM,GACC,eAAdsD,EAAMC,KAAwBvD,EAAO,GAAKtB,EAAS,IACnDsB,EAAO,IAAM,GACjB8E,EAAK9E,EAAO,GAAIA,EAAO,SACvBX,EAAM8E,eAIN,EAzBArC,EAAUwB,EAAMC,IA6BpB,IADA,IAAIwB,EAAQ,EACH/D,EAAI,EAAGA,EAAItC,IAAUsC,EAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAItC,IAAUsC,EAAG,CACnBe,EAAIhB,EAAGC,GACT6D,OACFlD,EAASZ,EAAGC,EAAG7B,EAAc0C,KAC3BiD,GAIdtF,EAAW2D,KAAK,CAACvB,KAAM,QAASkD,MAAOA,IAEvC1F,EAAM8E,SAGV,SAASnC,EAAIhB,EAAGC,GACZ,OAAID,EAAI,GAAKC,EAAI,GAAKD,GAAKtC,GAAUuC,GAAKtC,EAC/B,KAEJW,EAAO2B,GAAGD,GAGrB,SAAS8D,EAAK9D,EAAGC,GACb,IAAIc,EAAIC,EAAIhB,EAAGC,GACfc,EAAE+C,MAAO,EACT/C,EAAEV,KAAKI,QAAQlB,KA/QA,0BAwYnB,SAASwD,EAAUiB,GAEf,MAAO,CAACA,EAAE,GAAKvG,EAAYA,EAAY,EAC/BuG,EAAE,GAAKvG,EAAYA,EAAY,GAG3C,SAASwG,GAAYpB,EAAOqB,GACxB,IAAIC,EAAShG,EAAciG,MAAM,WAAWC,KAAI,SAAAf,GAAC,OAAKA,EAAI,EAAKA,EAAI,KAAOA,KACtEgB,EAAK,YAAOC,IAAP,YAAgBJ,IACzBG,EAAME,IAAMF,EAAME,IAAMF,EAAMG,MAA4B,GAAnB,EAAIH,EAAMG,OACjDH,EAAMI,MAAQJ,EAAMI,MAAQJ,EAAMG,MAA4B,GAAnB,EAAIH,EAAMG,OACrDH,EAAMK,KAAOL,EAAMK,KAAOL,EAAMG,MAA4B,GAAnB,EAAIH,EAAMG,OACnDH,EAAMG,MAAQ,EACd,IAAIG,EAAW7B,EAAUF,GACrBgC,EAAO,IAAIC,IAAOF,EAAsB,GAAZnH,EAAiB,CAAC8B,KAAM+E,IACxDJ,EAASA,EAAOG,KAAI,SAAAL,GAChB,IAAIe,EAAKhC,EAAUiB,GACnB,MAAO,CAAChE,EAAG+E,EAAG,GAAKH,EAAS,GAAI3E,EAAG8E,EAAG,GAAKH,EAAS,OAExD,IAAII,EAAO,IAAIC,IAAKL,EAAUV,EAC1B,CAACgB,OAAQZ,EAAOa,YAAyB,GAAZ1H,EAAiB2H,KAAMH,IAAKI,MAAMC,QAGnE,OAFAxG,EAASyG,IAAIV,EAAMG,GACnB3G,EAAM8E,SACC,CAAC0B,EAAMG,G,IAuBZQ,G,yKACS7F,GACP,kEAAiBA,GACjBA,EAAI8F,YAAY,CAAC,EAAG,Q,GAHLR,KAOvB,SAAS1B,GAAUmC,GACf,IAAK,IAAI1F,EAAI,EAAGA,EAAItC,IAAUsC,EAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAItC,IAAUsC,EAAG,CAE7ByF,EADQ1E,EAAIhB,EAAGC,KAkB3B,SAAS0F,GAAUhD,GAEf,IAAIiD,EAAW,SAAC5F,EAAGC,GACf,OAAO0C,EAAMU,MAAK,SAAAH,GAAC,OAAIA,EAAE,KAAOlD,GAAKkD,EAAE,KAAOjD,MAG9C4F,EAAQ,GA2EZ,OA1EAtC,IAAU,SAAAxC,GACN,IAAIf,EAAIe,EAAEf,EACNC,EAAIc,EAAEd,EACV,GAAK2F,EAAS5F,EAAGC,GAAjB,CACA,IAAI6F,EAAKF,EAAS5F,EAAGC,EAAI,GACrB8F,EAAOH,EAAS5F,EAAGC,EAAI,GACvB+F,EAAOJ,EAAS5F,EAAI,EAAGC,GACvBgG,EAAQL,EAAS5F,EAAI,EAAGC,GACxBiG,EAAKN,EAAS5F,EAAI,EAAGC,EAAI,GACzBkG,EAAKP,EAAS5F,EAAI,EAAGC,EAAI,GACzBmG,EAAKR,EAAS5F,EAAI,EAAGC,EAAI,GACzBoG,EAAKT,EAAS5F,EAAI,EAAGC,EAAI,GACzBqG,EAAI,GACJC,EAAW,SAAC1D,EAAO2D,GACnBF,EAAElE,KAAK,IAAIoD,GACP3C,EAAO,CAAC,CAAC2D,EAAI,GAAK3D,EAAM,GAAI2D,EAAI,GAAK3D,EAAM,KAC3C,CAACsC,YAAa,EAAGD,OAAQ,YAEjC,IAAKc,EAAM,CACP,IAAInD,EAAQ9B,EAAE0F,WAAW,GACrBD,EAAMzF,EAAE0F,WAAW,GACnBX,KACAjD,EAAQ9B,EAAE2F,eAAe,GAAGC,MAAM,IAC5B,IAAQT,EAASlI,EAAJ,GAEnB+H,KACAS,EAAMzF,EAAE2F,eAAe,GAAGC,MAAM,IAC5B,IAAQP,EAASpI,EAAJ,GAErBuI,EAAS1D,EAAO2D,GAEpB,IAAKP,EAAO,CACR,IAAIpD,EAAQ9B,EAAE0F,WAAW,GACrBD,EAAMzF,EAAE0F,WAAW,GACnBX,KACAjD,EAAQ9B,EAAE2F,eAAe,GAAGC,MAAM,IAC5B,IAAQR,EAASnI,EAAJ,GAEnB+H,KACAS,EAAMzF,EAAE2F,eAAe,GAAGC,MAAM,IAC5B,IAAQN,EAASrI,EAAJ,GAErBuI,EAAS1D,EAAO2D,GAEpB,IAAKV,EAAI,CACL,IAAIjD,EAAQ9B,EAAE0F,WAAW,GACrBD,EAAMzF,EAAE0F,WAAW,GACnBT,KACAnD,EAAQ9B,EAAE2F,eAAe,GAAGC,MAAM,IAC5B,IAAQT,EAASlI,EAAJ,GAEnBiI,KACAO,EAAMzF,EAAE2F,eAAe,GAAGC,MAAM,IAC5B,IAAQR,EAASnI,EAAJ,GAErBuI,EAAS1D,EAAO2D,GAEpB,IAAKT,EAAM,CACP,IAAIlD,EAAQ9B,EAAE0F,WAAW,GACrBD,EAAMzF,EAAE0F,WAAW,GACnBT,KACAnD,EAAQ9B,EAAE2F,eAAe,GAAGC,MAAM,IAC5B,IAAQP,EAASpI,EAAJ,GAEnBiI,KACAO,EAAMzF,EAAE2F,eAAe,GAAGC,MAAM,IAC5B,IAAQN,EAASrI,EAAJ,GAErBuI,EAAS1D,EAAO2D,GAEpBF,EAAE1E,SAAQ,SAAAsB,GAAC,OAAInC,EAAEyC,OAAO+B,IAAIrC,MAC5B2C,EAAQA,EAAMe,OAAON,OAEzBjI,EAAM8E,SACC0C,EAGX,SAASnC,GAAiBf,GAMtBY,IAAU,SAAAxC,GAJK,IAACf,EAAGC,EAAHD,EAKCe,EAAEf,EALAC,EAKGc,EAAEd,EAJb0C,EAAMU,MAAK,SAAAH,GAAC,OAAIA,EAAE,KAAOlD,GAAKkD,EAAE,KAAOjD,MAK1Cc,EAAEnC,UAAU6E,WAIxB,SAASoD,GAAelE,GAEpB,IAAIiD,EAAW,SAAC5F,EAAGC,GACf,OAAO0C,EAAMU,MAAK,SAAAH,GAAC,OAAIA,EAAE,KAAOlD,GAAKkD,EAAE,KAAOjD,MAGlDsD,IAAU,SAAAxC,GACN,IAAIf,EAAIe,EAAEf,EACNC,EAAIc,EAAEd,EACV,GAAK2F,EAAS5F,EAAGC,GAAjB,CACA,IAAI6F,EAAKF,EAAS5F,EAAGC,EAAI,GACrB8F,EAAOH,EAAS5F,EAAGC,EAAI,GACvB+F,EAAOJ,EAAS5F,EAAI,EAAGC,GACvBgG,EAAQL,EAAS5F,EAAI,EAAGC,GACxBqG,EAAI,GACJC,EAAW,SAAC1D,EAAO2D,GACnBF,EAAElE,KAAK,IAAI6C,IACPpC,EAAO,CAAC,CAAC2D,EAAI,GAAK3D,EAAM,GAAI2D,EAAI,GAAK3D,EAAM,KAC3C,CAACsC,YAAa,EAAGD,OAAQ,YAEjC,IAAKc,EAGDO,EAFYxF,EAAE+F,aAAa,GACjB/F,EAAE+F,aAAa,IAG7B,IAAKb,EAGDM,EAFYxF,EAAE+F,aAAa,GACjB/F,EAAE+F,aAAa,IAG7B,IAAKhB,EAGDS,EAFYxF,EAAE+F,aAAa,GACjB/F,EAAE+F,aAAa,IAG7B,IAAKf,EAGDQ,EAFYxF,EAAE+F,aAAa,GACjB/F,EAAE+F,aAAa,IAG7BR,EAAE1E,SAAQ,SAAAsB,GAAC,OAAInC,EAAEnC,UAAU2G,IAAIrC,UAEnC7E,EAAM8E,SAkEH,SAAS4D,KACZ,GAA0B,IAAtBtI,EAAWuI,OAAf,CAEA,IAAIC,EAAIxI,EAAWyI,MACfnD,EAAQ,EACG,UAAXkD,EAAEpG,OACFkD,EAAQkD,EAAElD,MACVkD,EAAIxI,EAAWyI,OAEnB,GACmB,WAAXD,EAAEpG,KACFD,EAASqG,EAAEjH,EAAGiH,EAAEhH,EAAGgH,EAAEpG,KAAMoG,EAAE/F,YAEb,WAAX+F,EAAEpG,MAAgC,WAAXoG,EAAEpG,MAC9BD,EAASqG,EAAEjH,EAAGiH,EAAEhH,EAAGgH,EAAEpG,KAAMoG,EAAEnG,SAEjCrC,EAAWyI,QACTnD,EACU,IACRkD,EAAIxI,EAAWyI,aAEdnD,EAAQ,GACjB1F,EAAM8E,UAGH,SAASgE,KAGZ,IAFA,IAAIC,EAAQ1J,EAASE,EAAYG,EAC7BsJ,EAAQ1J,EAASE,EAAWC,EACvBkC,EAAI,EAAGA,EAAIoH,IAASpH,EACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIoH,IAASpH,EAAG,CAC5B,GAAID,EAAI,IAAM,EAAG,CACb,IAAIsH,EAAO,IAAIrC,IACX,CAAC,EAAG,GAAI,CAAC,CAAC,EAAGxH,IACb,CAAC8B,KAAM,KAAM4F,YAAa,EAAGD,OAAQ,UACjClE,EAAIhB,EAAIpC,EAAWqC,EAAIpC,GAC7B0J,WAAWhC,IAAI+B,GAErB,GAAIrH,EAAI,IAAM,EAAG,CACb,IAAIqH,EAAO,IAAIrC,IACX,CAAC,EAAG,GAAI,CAAC,CAACxH,EAAW,IACrB,CAAC8B,KAAM,KAAM4F,YAAa,EAAGD,OAAQ,UACjClE,EAAIhB,EAAIpC,EAAWqC,EAAIpC,GAC7B2J,YAAYjC,IAAI+B,IAI9BjJ,EAAM8E,SAGV,SAASsE,GAAUnE,GACfnF,EAAgBD,EAAOoF,GAEvBC,IAAU,SAAAxC,GACFA,EAAE+C,OACF/C,EAAEoB,QAAQ1B,QAAQlB,KAAOpB,MAEjCE,EAAM8E,SAGH,SAASuE,GAAWC,EAAMC,EAASC,EAAUC,EAAMC,GACzC,MAAT1J,IACFA,EAAQ,IAAI2J,IAAMJ,IACZK,GAAG,SAAS,SAAC3F,GAAD,OA5iBxB,SAAeA,GACO,UAAdA,EAAMC,MACNxD,GAAQ,GA0iBmBmJ,CAAM5F,MACnCjE,EAAM4J,GAAG,WAAW,kBA1TtBzJ,GAAO,OACc,WAAjBJ,GAA6BM,GAC7BH,EAAM6D,KAAK,CAACQ,KAnaA,EAmamBC,MAAOnE,EAAOmE,MAAOqB,OAAQxF,EAAOwF,SACnExF,EAAS,MAEa,SAAjBN,GAA2BO,GAChCJ,EAAM6D,KAAK,CAACQ,KAtaF,EAsamBD,MAAOhE,EAAKgE,QACzChE,EAAO,MAEe,cAAjBP,GAAgCQ,IACrCL,EAAM6D,KAAK,CAACQ,KAzaG,EAyamBD,MAAO/D,EAAU+D,QACnD/D,EAAY,YAkTdP,EAAMoF,QA5rBRnF,EAAS,GACTC,EAAQ,GACRE,EAAa,GACbC,EAAS,KACTC,EAAO,KACPC,EAAY,KACZC,EAAQ,KACRC,EAAW,KACXC,GAAQ,EACRC,EAAS,MAurBTvB,EAAYoK,EACZjK,EAAYmK,EAAQ/B,KACpBjI,EAAagK,EAAQ9B,MACrBpI,EAAWkK,EAAQI,IACnBrK,EAAciK,EAAQK,OACtB1K,EAASE,EAAYkK,EAAKxH,MAAQvC,EAClCJ,EAASE,EAAWiK,EAAKvH,OAASzC,EAElC,IAAMuK,EAAU5K,EAAYC,EACtB4K,GAAWjK,EAAMyJ,KAAK9H,EAAIqI,GAAW,EAErC5H,EAAU,CACZlB,KAAM,yBACN2F,OAAQ,QACRC,YAAa,EACbnG,OAAQG,IAAUC,QAAQC,SAExBkJ,EAAgB,CAClBhJ,KAAM,yBACNP,OAAQG,IAAUC,QAAQC,SAG9BJ,EAAYuJ,SAAuB,GAAZ/K,EACvB6B,EAAkBkJ,SAAuB,GAAZ/K,EAE7BoB,EAAQ,IAAI4J,IAAU,CAACH,EAfP,KAgBhBjK,EAAMkH,IAAI1G,GAEVC,EAAW,IAAI2J,IAAU,CAAC,EAAG,IAC7B5J,EAAM0G,IAAIzG,GAEV,IAAK,IAAImB,EAAI,EAAGA,EAAItC,IAAUsC,EAC1B3B,EAAO2B,GAAK,GAEhB,IA7C+D,eA6CtDD,GACL,IA9C2D,eA8ClDC,GACL,IAAIyI,EAAK1I,EAAIvC,EACTkL,EAAK1I,EAAIxC,EACT4D,EAAarB,GAAKpC,GAAaqC,GAAKpC,GACnCmC,EAAKtC,EAASK,GAAekC,EAAKtC,EAASG,EAC5C8K,EAAO,IAAIH,IAAU,CAACC,EAAIC,IAC9BlI,EAAQ0E,YAAc9D,EAAY,EAAI,EACtC,IAAIsC,EAAI,IAAIkF,IAAU,CAAC,EAAG,GAAIpL,EAAWA,EAAWgD,GACpDA,EAAQ0E,YAAc,EACtB,IAAIoC,EAAa,IAAIsB,IAAU,CAAC,EAAG,GAAIpL,EAAWA,EAAWgD,GACzD+G,EAAc,IAAIqB,IAAU,CAAC,EAAG,GAAIpL,EAAWA,EAAWgD,GAC1D7B,EAAY,IAAIiK,IAAU,CAAC,EAAG,GAAIpL,EAAWA,EAAWgD,GACxD+C,EAAS,IAAIqF,IAAU,CAAC,EAAG,GAAIpL,EAAWA,EAAWgD,GACrD0B,EAAU,IAAI0G,IAAU,CAAC,EAAG,GAAIpL,EAAWA,EAAWgD,GACtDqI,EAAU,IAAID,IACd,CAAC5K,EAAcA,GACfR,EAA2B,EAAfQ,EACZR,EAA2B,EAAfQ,EAAkBsK,GAC9BpH,EAAS,IAAIR,IAAK,CAAC,EAAe,GAAZlD,GAAkB,GAAIwB,GAC5CyC,EAAS,IAAIf,IAAK,CAAC,EAAe,GAAZlD,GAAkB,GAAI6B,GAC5CmH,EAAa,GACjBA,EAAW,GAAK,CAACzI,EAAeA,GAChCyI,EAAW,GAAK,CAAChJ,EAAYO,EAAeA,GAC5CyI,EAAW,GAAK,CAAChJ,EAAYO,EAAeP,EAAYO,GACxDyI,EAAW,GAAK,CAACzI,EAAeP,EAAYO,GAC5C,IAAI+K,EAAW,GACfA,EAAS,GAAK,CAACtL,EAAY,EAAGO,GAC9B+K,EAAS,GAAK,CAACtL,EAAYO,EAAeP,EAAY,GACtDsL,EAAS,GAAK,CAACtL,EAAY,EAAGA,EAAYO,GAC1C+K,EAAS,GAAK,CAAC/K,EAAeP,EAAY,GAC1C,IAAIuL,EAAa,CAACvL,EAAY,EAAGA,EAAY,GAEzCyE,EAAc,GACdP,EAAS,GACTN,IACA7B,EAAkBgJ,SAAuB,IAAZ/K,EAC7BgC,EAAsB+I,SAAuB,IAAZ/K,EACjCgJ,EAAW7E,SAAQ,SAACoC,EAAGhC,IACnBgC,EAAIA,EAAE2C,MAAM,IACV,IAAkB,KAAZlJ,EACRuG,EAAE,IAAkB,KAAZvG,EACE,IAANuE,GAAiB,IAANA,IAASgC,EAAE,IAAkB,IAAZvG,GACtB,IAANuE,GAAiB,IAANA,IAASgC,EAAE,IAAkB,GAAZvG,GACtB,IAANuE,GACAE,EAAYE,KAAK,IAAI1C,EAAMsE,EAAG,GAAIvE,IACtCkC,EAAOS,KAAK,IAAIzB,IAAKqD,EAAG,GAAIxE,QAGpC,IAAIsC,EAAO,GACPT,GACA0H,EAASnH,SAAQ,SAACoC,EAAGhC,IACjBgC,EAAIA,EAAE2C,MAAM,IACV,IAAkB,IAAZlJ,EACRuG,EAAE,IAAkB,IAAZvG,EACE,IAANuE,IAASgC,EAAE,IAAkB,IAAZvG,GACX,IAANuE,GAAiB,IAANA,IAASgC,EAAE,IAAkB,IAAZvG,GACtB,IAANuE,GAAiB,IAANA,IAASgC,EAAE,IAAkB,IAAZvG,GACtB,IAANuE,IAASgC,EAAE,IAAkB,GAAZvG,GACrBqE,EAAKM,KAAK,IAAIzB,IAAKqD,EAAG,GAAIxE,OAIlC,IAAIyJ,EAAW,GACfA,EAAS,GAAK,CAAC,EAAG,GAClBA,EAAS,GAAK,CAACxL,EAAW,GAC1BwL,EAAS,GAAK,CAACxL,EAAWA,GAC1BwL,EAAS,GAAK,CAAC,EAAGxL,GAClB,IAAIiJ,EAAiB,GACrBA,EAAe,GAAK,CAAC,EAAG1I,GACxB0I,EAAe,GAAK,CAAC1I,EAAe,GACpC0I,EAAe,GAAK,CAACjJ,EAAYO,EAAe,GAChD0I,EAAe,GAAK,CAACjJ,EAAWO,GAChC0I,EAAe,GAAK,CAACjJ,EAAWA,EAAYO,GAC5C0I,EAAe,GAAK,CAACjJ,EAAYO,EAAeP,GAChDiJ,EAAe,GAAK,CAAC1I,EAAeP,GACpCiJ,EAAe,GAAK,CAAC,EAAGjJ,EAAYO,GACpC4K,EAAKrD,IAAL,MAAAqD,EAAI,CAAKzG,EAASwB,EAAGH,EAAQ5E,EACpB2I,EAAYC,EAAasB,EAAS3H,EAAQO,GAD/C,OAEQQ,EAAgBP,EAAWG,IACvC8G,EAAKX,GAAG,aAAa,SAAC3F,GAAD,OA5fjC,SAAmBA,EAAOtC,EAAGC,GACpBlB,GACDwE,IAAU,SAAAxC,GACFA,EAAE+C,OACF/C,EAAEV,KAAKI,QAAQlB,KAAO,yBACtBwB,EAAE+C,MAAO,MAKrB9E,EAAS,CAACgB,EAAGC,GACbzB,GAAO,EAEc,WAAjBJ,GACAM,EAAS,CAACmE,MAAO,CAAC7C,EAAGC,GAAIiE,OAAQ,KAC1BgF,KAAOjF,GAAYvF,EAAOmE,MAAOnE,EAAOwF,QAEzB,SAAjB9F,GACLO,EAAO,CAACgE,MAAO,CAAC3C,EAAGC,KACd4F,MAAQF,GAAUhH,EAAKgE,OAEN,cAAjBvE,EAELyI,IADAjI,EAAY,CAAC+D,MAAO,CAAC3C,EAAGC,KACC0C,OAEH,SAAjBvE,GAGL0F,EAAK9D,EAAGC,GAGZ5B,EAAM8E,SA6dkCgG,CAAU7G,EAAOtC,EAAGC,MACpD2I,EAAKX,GAAG,SAAS,kBA5hB7B,SAAejI,EAAGC,GACTzB,IAEgB,WAAjBJ,GAA8C,SAAjBA,IACL,cAAjBA,GACPsF,GAAiB9E,EAAU+D,OAC3B/D,EAAU+D,MAAMP,KAAK,CAACpC,EAAGC,IACzB4G,GAAejI,EAAU+D,QACD,SAAjBvE,GACHO,EAAKkH,OACLlH,EAAKkH,MAAMjE,SAAQ,SAAA0E,GAAC,OAAIA,EAAE8C,OAAOpG,OAAOsD,MAC5C3H,EAAKgE,MAAMP,KAAK,CAACpC,EAAGC,IACpBtB,EAAKkH,MAAQF,GAAUhH,EAAKgE,QAE5BmB,EAAK9D,EAAGC,IAEZ5B,EAAM8E,UA4gByBkG,CAAMrJ,EAAGC,MAChC2I,EAAKX,GAAG,aAAa,SAAC3F,GAAD,OA1jBjC,SAAcA,EAAOtC,EAAGC,GACpB,GAAKzB,GAEgB,SAAjBJ,EAAyB,CACzB,IAAI2C,EAAIC,EAAIhB,EAAGC,GACXyI,EAAKpG,EAAMb,SAASzB,EAAInB,EAAM4C,SAASzB,EAAIe,EAAE+B,IAAI,GACjD6F,EAAKrG,EAAMb,SAASxB,EAAIpB,EAAM4C,SAASxB,EAAIc,EAAE+B,IAAI,GACrD,IAAK4F,EAAiB,GAAZjL,GAAmBiL,EAAiB,GAAZjL,IAAoBkL,EAAiB,GAAZlL,GAAmBkL,EAAiB,GAAZlL,EAAiB,CAC5FiL,EAAiB,GAAZjL,IACLsD,EAAIC,EAAIhB,EAAI,EAAGC,IACnB,IAAIqH,EAAO,IAAIrC,IACX,CAACxH,EAAW,GAAI,CAAC,CAAC,EAAGA,IACrB,CAAC8B,KAAM,KAAM4F,YAAa,EAAGD,OAAQ,UACzCnE,EAAEwG,WAAWhC,IAAI+B,GACjBjJ,EAAM8E,cAEL,IAAKwF,EAAiB,GAAZlL,GAAmBkL,EAAiB,GAAZlL,IAC5BiL,EAAiB,GAAZjL,GAAmBiL,EAAiB,GAAZjL,EAAiB,CACjDkL,EAAiB,GAAZlL,IACLsD,EAAIC,EAAIhB,EAAGC,EAAI,IACnB,IAAIqH,EAAO,IAAIrC,IACX,CAAC,EAAGxH,GAAY,CAAC,CAACA,EAAW,IAC7B,CAAC8B,KAAM,KAAM4F,YAAa,EAAGD,OAAQ,UACzCnE,EAAEyG,YAAYjC,IAAI+B,GAClBjJ,EAAM8E,WAkiB0BmG,CAAKhH,EAAOtC,EAAGC,MAC/C6I,EAAQb,GAAG,SAAS,kBAvkBhC,SAAqBjI,EAAGC,GACfzB,GAEgB,WAAjBJ,IACIM,EAAOwK,MACPxK,EAAOwK,KAAKtH,SAAQ,SAAAsB,GAAC,OAAIA,EAAEkG,OAAOpG,OAAOE,MAC7CxE,EAAOwF,OAAO9B,KAAK,CAACpC,EAAGC,IACvBvB,EAAOwK,KAAOjF,GAAYvF,EAAOmE,MAAOnE,EAAOwF,QAC/C7F,EAAM8E,UA+jBwBoG,CAAYvJ,EAAGC,MACzC3B,EAAO2B,GAAGD,GAAK,CACXA,EAAGA,EAAGC,EAAGA,EAAG6C,IAAK,CAAC4F,EAAIC,GAAKC,KAAMA,EAAMvI,KAAMsD,EAAGxC,OAAQA,EAAQO,OAAQA,EACxEoF,aAAcmC,EACdtH,OAAQA,EAAQG,KAAMA,EACtB2E,WAAYA,EAAYuC,WAAYA,EAAYD,SAAUA,EAC1DrC,eAAgBA,EAChBxE,YAAaA,EAAY,GACzBtD,UAAWA,EACX2I,WAAYA,EACZC,YAAaA,EACbhE,OAAQA,EAAQrB,QAASA,EAASd,UAAWA,GACjDxC,EAAM0G,IAAIqD,IA9FL3I,EAAI,EAAGA,EAAItC,IAAUsC,EAAI,EAAzBA,IADJD,EAAI,EAAGA,EAAItC,IAAUsC,EAAI,EAAzBA,GAmGT,IAAIwJ,EAAU9L,EAASE,EAAYG,EAC/B0L,EAAU9L,EAASE,EAAWC,EAC9B4L,EAAQ,IAAIb,IACZ,CAACjL,EAAYH,EAAWI,EAAWJ,GACnC+L,EAAU/L,EAAWgM,EAAUhM,EAC/B,CAAC0H,YAAa,EAAGD,OAAQ,QAAS3F,KAAM,OAC5CV,EAAM0G,IAAImE,GAEV,IAAIC,EAAgB,IAAIlB,IAAU,CAACH,EAnInB,GAmIsC7K,EAAYE,EAAS,KAC3EU,EAAMkH,IAAIoE,GAGV,IAFA,IAAIrG,EAAI,EACJsG,EAAY,GACP3J,EAAI,EAAGA,EAAI,IAAKA,EACrB,IADyB,IAAD,WACfD,GACL,IAAI6J,EAAKvG,EAAI,EACTwG,EAAI,IAAIC,IAAO,CAAK,GAAJ/J,EAAY,GAAJC,GAAS,CAACuI,SAAU,GAAIwB,MAAO,OACvDrG,EAAI,IAAIkF,IAAU,CAAC,EAAG,GAAI,GAAI,GAAI,CAACtJ,KAAMrB,EAAOoF,GAChDtE,OAAQG,IAAUC,QAAQC,UAC9ByK,EAAEvE,IAAI5B,GACNA,EAAEsE,GAAG,SAAS,kBAAMR,GAAUoC,MAC9BD,EAAUxH,KAAK0H,KACbxG,GARGtD,GAAI,EAAGA,GAAI,IAAKA,GAAI,EAApBA,IAiBb,OANA4J,EAAUK,UAAUrI,SAAQ,SAAAsB,GAAC,OAAIyG,EAAcpE,IAAIrC,MACnD7E,EAAM8E,SAEFwE,GArSR,SAAcuC,GAEV,IAAIC,EAAOC,WAAWC,KAAKC,KAAKJ,IAAS,SAAA5G,GAAC,OAAIA,EAAEiH,WAAW,MACvDC,EAASC,IAAKC,QAAQP,GACtBQ,EAAOC,IAAQC,OAAOL,GAE1B1L,EAAS2E,QAETlF,EAAQ,GACRgF,IAAU,SAAAxC,GACNA,EAAEO,UAAY,EACdP,EAAEI,OAAOC,KAAO,GAChBL,EAAEW,OAAON,KAAO,MAGpBuJ,EAAKhI,MAAMf,SAAQ,SAAA0B,GAxmBH,IAymBRA,EAAE,GACF1C,EAAS0C,EAAE,GAAIA,EAAE,GAAI,MAAOA,EAAE,IAzmBtB,IA2mBHA,EAAE,IACP1C,EAAS0C,EAAE,GAAIA,EAAE,GAAI,aAAcA,EAAE,OAG7CqH,EAAKpM,MAAMqD,SAAQ,SAAAc,GACfnE,EAAM6D,KAAKM,GArnBC,IAsnBRA,EAAEE,KACFqB,GAAYvB,EAAEG,MAAOH,EAAEwB,QAtnBjB,IAwnBDxB,EAAEE,KACP+C,GAAUjD,EAAEC,OAxnBD,IA0nBND,EAAEE,MACPiE,GAAenE,EAAEC,UAIzBtE,EAAM8E,SAkQF2H,CAAKnD,GAEF,KAGXxH,OAAO4K,iBAAiB,WAAW,SAACzI,GAAD,OAAWD,EAAQC,M,iHCv5BtD,SAAS0I,GAAUC,GAOjB,OACE,kBAACC,GAAA,EAAD,CAAQC,KAAMF,EAAME,KAAMC,QAASH,EAAMG,SACvC,kBAACC,GAAA,EAAD,YACA,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACGN,EAAM7J,OAGX,kBAACoK,GAAA,EAAD,KACE,kBAACzB,GAAA,EAAD,CAAQ0B,QAfE,WACdR,EAAMG,UACEjL,OAAOgL,KAAKF,EAAM7J,KAAM,UAC9BsK,UAYE,eACA,kBAAC3B,GAAA,EAAD,CAAQzF,MAAM,UAAUmH,QAASR,EAAMG,SAAvC,Q,IAoIOO,G,kDA7Hb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAcRW,MAAQ,SAACtJ,GACP,EAAKuJ,SAAS,CAAC7B,MAAO1H,IDwZtBlE,ECvZYkE,GAjBK,EAoBnBwJ,SAAW,SAACxJ,GAEV,OADAyJ,QAAQC,IAAI,WAAY1J,GACC,WAArB,EAAK2J,MAAMjC,MACN,UAEF,aAzBU,EA4BnBkC,YAAc,SAAC5J,GACb,IAAI6J,ED8lBD,WAEH,IAAIC,EAAM,CACNC,GAAI3O,EACJ4O,GAAI3O,EACJgF,MAAO,GACPpE,MAAOA,GAGXgF,IAAU,SAAAxC,GAzoBM,IA0oBRA,EAAEO,WACF8K,EAAIzJ,MAAMP,KAAK,CAACrB,EAAEf,EAAGe,EAAEd,EAAGc,EAAEO,UAAWP,EAAEI,OAAOC,OA1oBxC,IA4oBRL,EAAEO,WACF8K,EAAIzJ,MAAMP,KAAK,CAACrB,EAAEf,EAAGe,EAAEd,EAAGc,EAAEO,UAAWP,EAAEmB,YAAYd,UAI7D,IAAImL,EAAQ3B,IAAQ4B,OAAOJ,GACvBK,EAAShC,IAAKiC,QAAQH,GACtBrC,EAASyC,KAAKC,OAAOC,aAAP,MAAAD,OAAM,YAAiBH,KACzC,OAAOtM,OAAO2M,SAASlN,OAAS,OAASmN,mBAAmB7C,GCnnBlD8C,GACV,EAAKnB,SAAS,CAACoB,WAAYd,EAAKe,YAAY,KA9B3B,EAwDnBC,cAAgB,SAAC7K,EAAO0H,GAAR,OAAkB,EAAKoD,YAAY,OAAQpD,IAxDxC,EAyDnBqD,eAAiB,SAAC/K,EAAO0H,GAAR,OAAkB,EAAKoD,YAAY,QAASpD,IAzD1C,EA0DnBsD,aAAe,SAAChL,EAAO0H,GAAR,OAAkB,EAAKoD,YAAY,MAAOpD,IA1DtC,EA2DnBuD,gBAAkB,SAACjL,EAAO0H,GAAR,OAAkB,EAAKoD,YAAY,SAAUpD,IA3D5C,EA4DnBwD,SAAW,SAAClL,EAAO0H,GAAR,OAAkB,EAAKoD,YAAY,QAASpD,IA5DpC,EA6DnByD,UAAY,SAACnL,EAAO0H,GAAR,OAAkB,EAAKoD,YAAY,SAAUpD,IA7DtC,EA8DnB0D,YAAc,SAACpL,EAAO0H,GAAR,OAAkB,EAAKoD,YAAY,WAAYpD,IA5D3D,EAAKnC,SAAW,GAChB,EAAKC,KAAO,CAACxH,MAAO,EAAGC,OAAQ,GAC/B,EAAKwH,QAAU,CAAC/B,KAAM,EAAGC,MAAO,EAAGkC,IAAK,EAAGC,OAAQ,GACnD,EAAK6D,MAAQ,CAACjC,MAAO,SAAUkD,YAAY,EAAOD,WAAY,IAL7C,E,gEASjB,IAAMU,EAAQxN,OAAO2M,SAASc,OAG9BlG,GAFmB,IAAImG,gBAAgBF,GACf3M,IAAI,KACX8M,SAASC,eAAe,UAAWlO,KAAKgI,SAAUhI,KAAKiI,KAAMjI,KAAKkI,W,kCAqBzEiG,EAAIhE,GACdnK,KAAKS,MAAQ0J,EACb,IAAM2D,EAAQxN,OAAO2M,SAASc,OAExBjG,EADa,IAAIkG,gBAAgBF,GACf3M,IAAI,KAC5B+K,QAAQC,IAAIhC,GACD,UAAPgE,IACFnO,KAAKiI,KAAKxH,MAAQ0J,GACT,WAAPgE,IACFnO,KAAKiI,KAAKvH,OAASyJ,GACV,SAAPgE,IACFnO,KAAKkI,QAAQ/B,KAAOgE,GACX,UAAPgE,IACFnO,KAAKkI,QAAQ9B,MAAQ+D,GACZ,QAAPgE,IACFnO,KAAKkI,QAAQI,IAAM6B,GACV,WAAPgE,IACFnO,KAAKkI,QAAQK,OAAS4B,GACb,aAAPgE,IACFnO,KAAKgI,SAAWmC,GAClBtC,GAAWC,EAAMmG,SAASC,eAAe,UAAWlO,KAAKgI,SAAUhI,KAAKiI,KAAMjI,KAAKkI,W,+BAW3E,IAAD,OASP,OACE,kBAACkG,GAAA,EAAD,KACA,kBAACjD,GAAD,CAAW5J,KAAMvB,KAAKoM,MAAMgB,WAAY9B,KAAMtL,KAAKoM,MAAMiB,WAAY9B,QAAS,kBAAM,EAAKS,SAAS,CAACqB,YAAY,OAC/G,kBAACgB,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACL,GAAA,EAAD,CAAKM,OAAO,QACZ,kBAACC,GAAA,EAAD,CAAaC,UAAU,OAAO3G,KAAK,QAAQ4G,QAAQ,YAAYC,YAAY,YAd/D,CAChB,CAAC,MAAO,OACR,CAAC,aAAc,cACf,CAAC,OAAQ,QACT,CAAC,YAAa,aACd,CAAC,SAAU,WAUQtK,KAAI,SAACyF,GAAD,OACf,kBAACC,GAAA,EAAD,CAAQzF,MAAO,EAAK2H,MAAMjC,QAAUF,EAAE,GAAK,UAAY,UAAW2B,QAAS,SAACvI,GAAD,OAAO,EAAK0I,MAAM9B,EAAE,MAAMA,EAAE,SAI3G,kBAACmE,GAAA,EAAD,CAAKM,OAAO,QACV,kBAACC,GAAA,EAAD,CAAaC,UAAU,OAAO3G,KAAK,QAAQ4G,QAAQ,YAAYC,YAAY,YACzE,kBAAC5E,GAAA,EAAD,CAAQ0B,QAAS5L,KAAKqM,aAAtB,gBACA,kBAACnC,GAAA,EAAD,CAAQ0B,QAAStE,IAAjB,cAGJ,kBAAC8G,GAAA,EAAD,CAAKM,OAAO,OAAOK,QAAQ,OAAOC,UAAW,GAC3C,kBAACC,GAAA,EAAD,CAAYC,cAAY,GAAxB,aACA,kBAACC,GAAA,EAAD,CAAQC,aAAcpP,KAAKgI,SAAUqH,kBAAkB,OAAOC,IAAK,GAAIC,IAAK,GAAIC,KAAM,EAAGC,OAAK,EAACC,kBAAmB1P,KAAK6N,cACvH,kBAACoB,GAAA,EAAD,CAAYC,cAAY,GAAxB,SACA,kBAACC,GAAA,EAAD,CAAQC,aAAcpP,KAAKiI,KAAKxH,MAAO4O,kBAAkB,OAAOC,IAAK,EAAGC,IAAK,GAAIG,kBAAmB1P,KAAK2N,WACzG,kBAACsB,GAAA,EAAD,CAAYC,cAAY,GAAxB,UACA,kBAACC,GAAA,EAAD,CAAQC,aAAcpP,KAAKiI,KAAKvH,OAAQ2O,kBAAkB,OAAOC,IAAK,EAAGC,IAAK,GAAIG,kBAAmB1P,KAAK4N,YAC1G,kBAACqB,GAAA,EAAD,CAAYC,cAAY,GAAxB,eACA,kBAACC,GAAA,EAAD,CAAQC,aAAcpP,KAAKkI,QAAQ/B,KAAMkJ,kBAAkB,OAAOC,IAAK,EAAGC,IAAK,GAAIG,kBAAmB1P,KAAKsN,gBAC3G,kBAAC2B,GAAA,EAAD,CAAYC,cAAY,GAAxB,gBACA,kBAACC,GAAA,EAAD,CAAQC,aAAcpP,KAAKkI,QAAQ9B,MAAOiJ,kBAAkB,OAAOC,IAAK,EAAGC,IAAK,GAAIG,kBAAmB1P,KAAKwN,iBAC5G,kBAACyB,GAAA,EAAD,CAAYC,cAAY,GAAxB,cACA,kBAACC,GAAA,EAAD,CAAQC,aAAcpP,KAAKkI,QAAQI,IAAK+G,kBAAkB,OAAOC,IAAK,EAAGC,IAAK,GAAIG,kBAAmB1P,KAAKyN,eAC1G,kBAACwB,GAAA,EAAD,CAAYC,cAAY,GAAxB,iBACA,kBAACC,GAAA,EAAD,CAAQC,aAAcpP,KAAKkI,QAAQK,OAAQ8G,kBAAkB,OAAOC,IAAK,EAAGC,IAAK,GAAIG,kBAAmB1P,KAAK0N,oBAGjH,kBAACW,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,yBAAKN,GAAG,SAASwB,MAAO,CAACjP,OAAQ,aAEnC,kBAAC2N,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACE,GAAA,EAAD,CAAa1G,KAAK,QAAQ4G,QAAQ,YAAYC,YAAY,YACxD,kBAAC5E,GAAA,EAAD,CAAQzF,MAA4B,WAArBzE,KAAKoM,MAAMjC,MAAqB,UAAY,UAAWyB,QAAS,SAACvI,GAAD,OAAO,EAAK0I,MAAM,YAAjG,UACA,kBAAC7B,GAAA,EAAD,CAAQzF,MAA4B,WAArBzE,KAAKoM,MAAMjC,MAAqB,UAAY,UAAWyB,QAAS,SAACvI,GAAD,OAAO,EAAK0I,MAAM,YAAjG,UACA,kBAAC7B,GAAA,EAAD,CAAQzF,MAA4B,WAArBzE,KAAKoM,MAAMjC,MAAqB,UAAY,UAAWyB,QAAS,SAACvI,GAAD,OAAO,EAAK0I,MAAM,YAAjG,UACA,kBAAC7B,GAAA,EAAD,CAAQ0B,QAAS1E,IAAjB,gB,GArHM0I,IAAMtQ,WCjBJuQ,QACW,cAA7BvP,OAAO2M,SAAS6C,UAEe,UAA7BxP,OAAO2M,SAAS6C,UAEhBxP,OAAO2M,SAAS6C,SAASvL,MACvB,2DCZNwL,IAASzM,OACP,kBAAC,IAAM0M,WAAP,KACE,kBAAC,GAAD,OAEF/B,SAASC,eAAe,SDyHpB,kBAAmB+B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,a","file":"static/js/main.12a32ee9.chunk.js","sourcesContent":["import {\r\n    Scene, Text, Rectangle, Component,\r\n    Color, Container, Line, Circle, Button\r\n} from \"pencil.js\";\r\n\r\nimport pako from \"pako\";\r\nimport msgpack from \"msgpack-lite\";\r\n\r\nlet cell_size = 64;\r\nlet grid_w = 9;\r\nlet grid_h = 9;\r\nlet grid_left = 0;\r\nlet grid_top = 0;\r\nlet grid_bottom = 0;\r\nlet grid_right = 0;\r\nconst corner_offset = cell_size * 0.08;\r\nconst hover_offset = cell_size * 0.2;\r\n\r\nconst sol_text_color = \"rgb(29, 106, 229)\";\r\nconst mark_color = \"rgba(247, 208, 56, 0.5)\";\r\n\r\nconst type_thermo = 1;\r\nconst type_cage = 2;\r\nconst type_edge_cage = 3;\r\n\r\nconst lock_normal = 1;\r\nconst lock_corner = 2;\r\n\r\nconst colors = [\r\n    \"rgba(0, 0, 0, 1)\",\r\n    \"rgba(207, 207, 207, 0.5)\",\r\n    \"rgba(255, 255, 255, 0)\",\r\n    \"rgba(163, 224, 72, 0.5)\",\r\n    \"rgba(210, 59, 231, 0.5)\",\r\n    \"rgba(235, 117, 50, 0.5)\",\r\n    \"rgba(226, 38, 31, 0.5)\",\r\n    \"rgba(247, 208, 56, 0.5)\",\r\n    \"rgba(52, 187, 230, 0.5)\"];\r\n\r\nlet current_color = colors[1];\r\nlet current_mode = \"normal\";\r\nlet scene = null;\r\nlet matrix = [];\r\nlet stuff = [];\r\nlet drag = false;\r\nlet undo_stack = [];\r\nlet thermo = null;\r\nlet cage = null;\r\nlet edge_cage = null;\r\nlet outer = null;\r\nlet underlay = null;\r\nlet shift = false;\r\nlet cursor = null;\r\n\r\nfunction reset() {\r\n    matrix = [];\r\n    stuff = [];\r\n    undo_stack = [];\r\n    thermo = null;\r\n    cage = null;\r\n    edge_cage = null;\r\n    outer = null;\r\n    underlay = null;\r\n    shift = false;\r\n    cursor = null;\r\n}\r\n\r\nconst textOptions = {\r\n    font: \"sans-serif\",\r\n    cursor: Component.cursors.pointer\r\n};\r\nconst centerTextOptions = {\r\n    font: \"sans-serif\",\r\n    fill: sol_text_color,\r\n    cursor: Component.cursors.pointer\r\n};\r\nconst cornerTextOptions = {\r\n    font: \"sans-serif\",\r\n    fill: sol_text_color,\r\n    cursor: Component.cursors.pointer\r\n};\r\nconst cageCornerTextOptions = {\r\n    font: \"sans-serif\",\r\n    fill: \"black\",\r\n    cursor: Component.cursors.pointer\r\n};\r\n\r\nclass Text2 extends Text\r\n{\r\n    makePath(ctx) {\r\n        const origin = this.getOrigin();\r\n        ctx.translate(origin.x, origin.y);\r\n\r\n        this.path = new window.Path2D();\r\n        this.path.rect(0, 0, this.width, this.height);\r\n\r\n        ctx.fillStyle = \"rgba(255,255,255,1)\";\r\n        ctx.fill(this.path);\r\n        ctx.fillStyle = this.options.fill.toString(ctx);\r\n\r\n        ctx.translate(-origin.x, -origin.y);\r\n\r\n        super.makePath(ctx);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nfunction set_cell(x, y, mode, newtext)\r\n{\r\n    let m = get(x, y);\r\n    let undo_entry = {\r\n        mode: mode,\r\n        x: x, y: y,\r\n        newtext: newtext,\r\n        old_normal: m.normal.text\r\n    };\r\n\r\n    if (!m.main_grid && mode !== \"set\") {\r\n        return;\r\n    }\r\n    if (m.lock_type === lock_normal && mode !== \"set\") {\r\n        return;\r\n    }\r\n\r\n    if (mode === \"normal\" || mode === \"set\") {\r\n        if (mode === \"normal\") {\r\n            m.normal.options.fill = sol_text_color;\r\n        }\r\n        else {\r\n            m.lock_type = (newtext !== \"\") ? lock_normal : 0;\r\n            m.normal.options.fill = \"black\";\r\n        }\r\n        if (!m.main_grid && newtext !== \"\")\r\n            m.normal.text += newtext;\r\n        else\r\n            m.normal.text = newtext;\r\n        const meas = Text.measure(m.normal.text, m.normal.text.options);\r\n        m.normal.position.x = (cell_size - 2.5 * meas.width) / 2;\r\n        m.normal.position.y = cell_size * 0.15;\r\n        m.center.text = \"\";\r\n        m.corner.forEach(t => { t.text = \"\"; });\r\n        m.side.forEach(t => { t.text = \"\"; });\r\n    }\r\n    else if (mode === \"center\") {\r\n        let current = m.center.text;\r\n        let center = \"\";\r\n        m.center.options.fill = sol_text_color;\r\n        if (newtext !== \"\") {\r\n            for (let i = 1; i <= 9; ++i) {\r\n                if ((current.indexOf(i) === -1 && i === +newtext)\r\n                    || (current.indexOf(i) !== -1 && i !== +newtext)) {\r\n                    center += i;\r\n                }\r\n            }\r\n        }\r\n\r\n        m.normal.text = \"\";\r\n        m.center.text = center;\r\n        const meas = Text.measure(center, m.center.options);\r\n        m.center.position.x = (cell_size - meas.width) / 2;\r\n        m.center.position.y = (cell_size - meas.height) / 2;\r\n    }\r\n    else if (mode === \"set_corner\") {\r\n        if (newtext === \"\")\r\n            m.cage_corner.text = \"\";\r\n        else\r\n            m.cage_corner.text += newtext;\r\n        m.lock_type = (newtext !== \"\") ? lock_corner : 0;\r\n    }\r\n    else if (mode === \"corner\") {\r\n        let current = \"\";\r\n        m.corner.forEach(t => { current += t.text; });\r\n        m.side.forEach(t => { current += t.text; });\r\n        let text = \"\";\r\n        if (newtext !== \"\") {\r\n            for (let i = 1; i <= 9; ++i) {\r\n                if ((current.indexOf(i) === -1 && i === +newtext)\r\n                    || (current.indexOf(i) !== -1 && i !== +newtext)) {\r\n                    text += i;\r\n                }\r\n            }\r\n        }\r\n        let i = 0;\r\n        m.normal.text = \"\";\r\n        m.corner.forEach(t => { t.text = text[i++] || \"\"; });\r\n        m.side.forEach(t => { t.text = text[i++] || \"\"; });\r\n    }\r\n    else if (mode === \"color\") {\r\n        m.r_color.options.fill = colors[newtext - 1];\r\n    }\r\n    undo_entry.normal = m.normal.text;\r\n    undo_stack.push(undo_entry);\r\n}\r\n\r\nfunction keyup(event) {\r\n    if (event.key === \"Shift\") {\r\n        shift = false;\r\n    }\r\n}\r\n\r\nfunction keydown(event) {\r\n    let newtext;\r\n    if (event.key === \"Shift\") {\r\n        shift = true;\r\n    }\r\n    else if (event.key === \"Delete\" || event.key === \"Backspace\") {\r\n        newtext = \"\";\r\n        event.preventDefault();\r\n    }\r\n    else if (event.key === \"d\" || event.key === \"D\") {\r\n        let rem = [];\r\n        stuff.forEach((s, i) => {\r\n            if (s.type === type_thermo) {\r\n                if (cursor[0] === s.start[0] && cursor[1] === s.start[1]) {\r\n                    delete_thermo(cursor);\r\n                    rem.push(i);\r\n                }\r\n            }\r\n            if (s.type === type_cage) {\r\n                if (s.cells.find(c => c[0] === cursor[0] && c[1] === cursor[1])) {\r\n                    delete_cage(s.cells);\r\n                    rem.push(i);\r\n                }\r\n            }\r\n            if (s.type === type_edge_cage) {\r\n                if (s.cells.find(c => c[0] === cursor[0] && c[1] === cursor[1])) {\r\n                    delete_edge_cage(s.cells);\r\n                    rem.push(i);\r\n                }\r\n            }\r\n        });\r\n        rem.forEach(r => stuff.splice(r, 1));\r\n        scene.render();\r\n        return;\r\n    }\r\n    else if (event.key >= \"0\" && event.key <= \"9\") {\r\n        newtext = event.key;\r\n    }\r\n    else if (event.key.startsWith(\"Arrow\") && cursor) {\r\n        if (!shift) {\r\n            each_cell(m => {\r\n                if (m.mark) {\r\n                    m.rect.options.fill = \"rgba(255, 255, 255, 0)\";\r\n                    m.mark = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (event.key === \"ArrowUp\" && cursor[1] > 0)\r\n            cursor[1] -= 1;\r\n        if (event.key === \"ArrowDown\" && cursor[1] < grid_h - 1)\r\n            cursor[1] += 1;\r\n        if (event.key === \"ArrowLeft\" && cursor[0] > 0)\r\n            cursor[0] -= 1;\r\n        if (event.key === \"ArrowRight\" && cursor[0] < grid_w - 1)\r\n            cursor[0] += 1;\r\n        mark(cursor[0], cursor[1]);\r\n        scene.render();\r\n        return;\r\n    }\r\n    else {\r\n        return;\r\n    }\r\n\r\n    let count = 0;\r\n    for (let x = 0; x < grid_w; ++x) {\r\n      for (let y = 0; y < grid_h; ++y) {\r\n            let m = get(x, y);\r\n            if (m.mark) {\r\n                set_cell(x, y, current_mode, newtext);\r\n                ++count;\r\n            }\r\n        }\r\n    }\r\n    undo_stack.push({mode: 'group', count: count});\r\n\r\n    scene.render();\r\n}\r\n\r\nfunction get(x, y) {\r\n    if (x < 0 || y < 0 || x >= grid_w || y >= grid_h) {\r\n        return null;\r\n    }\r\n    return matrix[y][x];\r\n}\r\n\r\nfunction mark(x, y) {\r\n    let m = get(x, y);\r\n    m.mark = true;\r\n    m.rect.options.fill = mark_color;\r\n}\r\n\r\nfunction inner_hover(x, y) {\r\n    if (!drag) return;\r\n\r\n    if (current_mode === \"thermo\") {\r\n        if (thermo.objs)\r\n            thermo.objs.forEach(e => e.parent.remove(e));\r\n        thermo.points.push([x, y]);\r\n        thermo.objs = draw_thermo(thermo.start, thermo.points);\r\n        scene.render();\r\n    }\r\n}\r\n\r\nfunction move(event, x, y) {\r\n    if (!drag) return;\r\n\r\n    if (current_mode === \"edge\") {\r\n        let m = get(x, y);\r\n        let xp = event.position.x - outer.position.x - m.pos[0];\r\n        let yp = event.position.y - outer.position.y - m.pos[1];\r\n        if ((xp < cell_size * 0.4 || xp > cell_size * 0.6) && yp > cell_size * 0.4 && yp < cell_size * 0.6) {\r\n            if (xp < cell_size * 0.4)\r\n                m = get(x - 1, y);\r\n            let edge = new Line(\r\n                [cell_size, 0], [[0, cell_size]],\r\n                {fill: null, strokeWidth: 3, stroke: \"black\"});\r\n            m.edge_right.add(edge);\r\n            scene.render();\r\n        }\r\n        else if ((yp < cell_size * 0.4 || yp > cell_size * 0.6)\r\n                && xp > cell_size * 0.4 && xp < cell_size * 0.6) {\r\n            if (yp < cell_size * 0.4)\r\n                m = get(x, y - 1);\r\n            let edge = new Line(\r\n                [0, cell_size], [[cell_size, 0]],\r\n                {fill: null, strokeWidth: 3, stroke: \"black\"});\r\n            m.edge_bottom.add(edge);\r\n            scene.render();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hover(x, y) {\r\n    if (!drag) return;\r\n\r\n    if (current_mode === \"thermo\" || current_mode === \"edge\") {\r\n    } else if (current_mode === \"edge_cage\") {\r\n        delete_edge_cage(edge_cage.cells);\r\n        edge_cage.cells.push([x, y]);\r\n        draw_edge_cage(edge_cage.cells);\r\n    } else if (current_mode === \"cage\") {\r\n        if (cage.lines)\r\n            cage.lines.forEach(l => l.parent.remove(l));\r\n        cage.cells.push([x, y]);\r\n        cage.lines = draw_cage(cage.cells);\r\n    } else {\r\n        mark(x, y);\r\n    }\r\n    scene.render();\r\n}\r\n\r\nfunction mousedown_window() {\r\n    if (!shift) {\r\n        each_cell(m => {\r\n            if (m.mark) {\r\n                m.rect.options.fill = \"rgba(255, 255, 255, 0)\";\r\n                m.mark = false;\r\n            }\r\n        });\r\n    }\r\n    scene.render();\r\n}\r\n\r\nfunction mousedown(event, x, y) {\r\n    if (!shift) {\r\n        each_cell(m => {\r\n            if (m.mark) {\r\n                m.rect.options.fill = \"rgba(255, 255, 255, 0)\";\r\n                m.mark = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    cursor = [x, y];\r\n    drag = true;\r\n\r\n    if (current_mode === \"thermo\") {\r\n        thermo = {start: [x, y], points: []};\r\n        thermo.objs = draw_thermo(thermo.start, thermo.points);\r\n    }\r\n    else if (current_mode === \"cage\") {\r\n        cage = {cells: [x, y]};\r\n        cage.lines = draw_cage(cage.cells);\r\n    }\r\n    else if (current_mode === \"edge_cage\") {\r\n        edge_cage = {cells: [x, y]};\r\n        draw_edge_cage(edge_cage.cells);\r\n    }\r\n    else if (current_mode === \"edge\") {\r\n    }\r\n    else {\r\n        mark(x, y);\r\n    }\r\n\r\n    scene.render();\r\n}\r\n\r\nfunction delete_thermo(pos)\r\n{\r\n    let start = center_px(pos);\r\n    let remove = [];\r\n    underlay.children.forEach(e => {\r\n        if (e.position.x === start[0] && e.position.y === start[1])\r\n            remove.push(e);\r\n    });\r\n    underlay.remove(...remove);\r\n    scene.render();\r\n}\r\n\r\nfunction center_px(p)\r\n{\r\n    return [p[0] * cell_size + cell_size / 2,\r\n            p[1] * cell_size + cell_size / 2];\r\n}\r\n\r\nfunction draw_thermo(start, points) {\r\n    let _color = current_color.match(/[.\\d]+/g).map(c => (c > 1) ? c / 255 : +c);\r\n    let color = new Color(..._color);\r\n    color.red = color.red * color.alpha + (1 - color.alpha) * 1;\r\n    color.green = color.green * color.alpha + (1 - color.alpha) * 1;\r\n    color.blue = color.blue * color.alpha + (1 - color.alpha) * 1;\r\n    color.alpha = 1;\r\n    let start_px = center_px(start);\r\n    let bulb = new Circle(start_px, cell_size * 0.4, {fill: color});\r\n    points = points.map(p => {\r\n        let px = center_px(p);\r\n        return {x: px[0] - start_px[0], y: px[1] - start_px[1]};\r\n    });\r\n    let line = new Line(start_px, points,\r\n        {stroke: color, strokeWidth: cell_size * 0.3, join: Line.joins.miter});\r\n    underlay.add(bulb, line);\r\n    scene.render();\r\n    return [bulb, line];\r\n}\r\n\r\nfunction mouseup() {\r\n    drag = false;\r\n    if (current_mode === \"thermo\" && thermo) {\r\n        stuff.push({type: type_thermo, start: thermo.start, points: thermo.points});\r\n        thermo = null;\r\n    }\r\n    else if (current_mode === \"cage\" && cage) {\r\n        stuff.push({type: type_cage, cells: cage.cells});\r\n        cage = null;\r\n    }\r\n    else if (current_mode === \"edge_cage\" && edge_cage) {\r\n        stuff.push({type: type_edge_cage, cells: edge_cage.cells});\r\n        edge_cage = null;\r\n    }\r\n}\r\n\r\nexport function DrawSetMode(mode) {\r\n    current_mode = mode;\r\n}\r\n\r\nclass CageLine extends Line {\r\n    setContext(ctx) {\r\n        super.setContext(ctx);\r\n        ctx.setLineDash([4, 4]);\r\n    }\r\n}\r\n\r\nfunction each_cell(f) {\r\n    for (let x = 0; x < grid_w; ++x) {\r\n        for (let y = 0; y < grid_h; ++y) {\r\n            let m = get(x, y);\r\n            f(m);\r\n        }\r\n    }\r\n}\r\n\r\nfunction delete_cage(cells)\r\n{\r\n    let get_cage = (x, y) => {\r\n        return cells.find(e => e[0] === x && e[1] === y);\r\n    };\r\n\r\n    each_cell(m => {\r\n        if (get_cage(m.x, m.y))\r\n            m.r_cage.empty();\r\n    });\r\n}\r\n\r\nfunction draw_cage(cells)\r\n{\r\n    let get_cage = (x, y) => {\r\n        return cells.find(e => e[0] === x && e[1] === y);\r\n    };\r\n\r\n    let lines = [];\r\n    each_cell(m => {\r\n        let x = m.x;\r\n        let y = m.y;\r\n        if (!get_cage(x, y)) return;\r\n        let up = get_cage(x, y - 1);\r\n        let down = get_cage(x, y + 1);\r\n        let left = get_cage(x - 1, y);\r\n        let right = get_cage(x + 1, y);\r\n        let ul = get_cage(x - 1, y - 1);\r\n        let ur = get_cage(x + 1, y - 1);\r\n        let dl = get_cage(x - 1, y + 1);\r\n        let dr = get_cage(x + 1, y + 1);\r\n        let l = [];\r\n        let add_line = (start, end) => {\r\n            l.push(new CageLine(\r\n                start, [[end[0] - start[0], end[1] - start[1]]],\r\n                {strokeWidth: 2, stroke: \"black\"}));\r\n        }\r\n        if (!left) {\r\n            let start = m.corner_pos[0];\r\n            let end = m.corner_pos[3];\r\n            if (up) {\r\n                start = m.corner_ext_pos[1].slice(0);\r\n                start[1] -= (!ul ? 0 : corner_offset);\r\n            }\r\n            if (down) {\r\n                end = m.corner_ext_pos[6].slice(0);\r\n                end[1] += (!dl ? 0 : corner_offset);\r\n            }\r\n            add_line(start, end);\r\n        }\r\n        if (!right) {\r\n            let start = m.corner_pos[1];\r\n            let end = m.corner_pos[2];\r\n            if (up) {\r\n                start = m.corner_ext_pos[2].slice(0);\r\n                start[1] -= (!ur ? 0 : corner_offset);\r\n            }\r\n            if (down) {\r\n                end = m.corner_ext_pos[5].slice(0);\r\n                end[1] += (!dr ? 0 : corner_offset);\r\n            }\r\n            add_line(start, end);\r\n        }\r\n        if (!up) {\r\n            let start = m.corner_pos[0];\r\n            let end = m.corner_pos[1];\r\n            if (left) {\r\n                start = m.corner_ext_pos[0].slice(0);\r\n                start[0] -= (!ul ? 0 : corner_offset);\r\n            }\r\n            if (right) {\r\n                end = m.corner_ext_pos[3].slice(0);\r\n                end[0] += (!ur ? 0 : corner_offset);\r\n            }\r\n            add_line(start, end);\r\n        }\r\n        if (!down) {\r\n            let start = m.corner_pos[3];\r\n            let end = m.corner_pos[2];\r\n            if (left) {\r\n                start = m.corner_ext_pos[7].slice(0);\r\n                start[0] -= (!dl ? 0 : corner_offset);\r\n            }\r\n            if (right) {\r\n                end = m.corner_ext_pos[4].slice(0);\r\n                end[0] += (!dr ? 0 : corner_offset);\r\n            }\r\n            add_line(start, end);\r\n        }\r\n        l.forEach(e => m.r_cage.add(e));\r\n        lines = lines.concat(l);\r\n    });\r\n    scene.render();\r\n    return lines;\r\n}\r\n\r\nfunction delete_edge_cage(cells)\r\n{\r\n    let get_cage = (x, y) => {\r\n        return cells.find(e => e[0] === x && e[1] === y);\r\n    };\r\n\r\n    each_cell(m => {\r\n        if (get_cage(m.x, m.y))\r\n            m.edge_cage.empty();\r\n    });\r\n}\r\n\r\nfunction draw_edge_cage(cells)\r\n{\r\n    let get_cage = (x, y) => {\r\n        return cells.find(e => e[0] === x && e[1] === y);\r\n    };\r\n\r\n    each_cell(m => {\r\n        let x = m.x;\r\n        let y = m.y;\r\n        if (!get_cage(x, y)) return;\r\n        let up = get_cage(x, y - 1);\r\n        let down = get_cage(x, y + 1);\r\n        let left = get_cage(x - 1, y);\r\n        let right = get_cage(x + 1, y);\r\n        let l = [];\r\n        let add_line = (start, end) => {\r\n            l.push(new Line(\r\n                start, [[end[0] - start[0], end[1] - start[1]]],\r\n                {strokeWidth: 4, stroke: \"black\"}));\r\n        }\r\n        if (!left) {\r\n            let start = m.r_corner_pos[0];\r\n            let end = m.r_corner_pos[3];\r\n            add_line(start, end);\r\n        }\r\n        if (!right) {\r\n            let start = m.r_corner_pos[1];\r\n            let end = m.r_corner_pos[2];\r\n            add_line(start, end);\r\n        }\r\n        if (!up) {\r\n            let start = m.r_corner_pos[0];\r\n            let end = m.r_corner_pos[1];\r\n            add_line(start, end);\r\n        }\r\n        if (!down) {\r\n            let start = m.r_corner_pos[3];\r\n            let end = m.r_corner_pos[2];\r\n            add_line(start, end);\r\n        }\r\n        l.forEach(e => m.edge_cage.add(e));\r\n    });\r\n    scene.render();\r\n}\r\n\r\nfunction load(base64)\r\n{\r\n    let pack = Uint8Array.from(atob(base64), c => c.charCodeAt(0));\r\n    let unpack = pako.inflate(pack);\r\n    let data = msgpack.decode(unpack);\r\n\r\n    underlay.empty();\r\n\r\n    stuff = [];\r\n    each_cell(m => {\r\n        m.lock_type = 0;\r\n        m.normal.text = \"\";\r\n        m.center.text = \"\";\r\n    });\r\n\r\n    data.cells.forEach(c => {\r\n        if (c[2] === lock_normal) {\r\n            set_cell(c[0], c[1], \"set\", c[3]);\r\n        }\r\n        else if (c[2] === lock_corner) {\r\n            set_cell(c[0], c[1], \"set_corner\", c[3]);\r\n        }\r\n    });\r\n    data.stuff.forEach(s => {\r\n        stuff.push(s);\r\n        if (s.type === type_thermo) {\r\n            draw_thermo(s.start, s.points);\r\n        }\r\n        else if (s.type === type_cage) {\r\n            draw_cage(s.cells);\r\n        }\r\n        else if (s.type === type_edge_cage) {\r\n            draw_edge_cage(s.cells);\r\n        }\r\n    });\r\n\r\n    scene.render();\r\n}\r\n\r\nexport function DrawGenerateUrl()\r\n{\r\n    let out = {\r\n        gw: grid_w,\r\n        gh: grid_h,\r\n        cells: [],\r\n        stuff: stuff\r\n    };\r\n\r\n    each_cell(m => {\r\n        if (m.lock_type === lock_normal) {\r\n            out.cells.push([m.x, m.y, m.lock_type, m.normal.text]);\r\n        }\r\n        if (m.lock_type === lock_corner) {\r\n            out.cells.push([m.x, m.y, m.lock_type, m.cage_corner.text]);\r\n        }\r\n    });\r\n\r\n    let coded = msgpack.encode(out);\r\n    let packed = pako.deflate(coded);\r\n    let base64 = btoa(String.fromCharCode(...packed));\r\n    return window.location.origin + \"/?p=\" + encodeURIComponent(base64);\r\n}\r\n\r\nexport function DrawUndo() {\r\n    if (undo_stack.length === 0)\r\n        return;\r\n    let u = undo_stack.pop();\r\n    let count = 0;\r\n    if (u.mode === \"group\") {\r\n        count = u.count;\r\n        u = undo_stack.pop();\r\n    }\r\n    do {\r\n        if (u.mode === \"normal\") {\r\n            set_cell(u.x, u.y, u.mode, u.old_normal);\r\n        }\r\n        else if (u.mode === \"center\" || u.mode === \"corner\") {\r\n            set_cell(u.x, u.y, u.mode, u.newtext);\r\n        }\r\n        undo_stack.pop();\r\n        --count;\r\n        if (count > 0) {\r\n            u = undo_stack.pop();\r\n        }\r\n    } while (count > 0);\r\n    scene.render();\r\n}\r\n\r\nexport function DrawAddGrid() {\r\n    let box_w = grid_w - grid_left - grid_right;\r\n    let box_h = grid_h - grid_top - grid_bottom;\r\n    for (let x = 0; x < box_w; ++x) {\r\n        for (let y = 0; y < box_h; ++y) {\r\n            if (x % 3 === 0) {\r\n                let edge = new Line(\r\n                    [0, 0], [[0, cell_size]],\r\n                    {fill: null, strokeWidth: 4, stroke: \"black\"});\r\n                let m = get(x + grid_left, y + grid_top);\r\n                m.edge_right.add(edge);\r\n            }\r\n            if (y % 3 === 0) {\r\n                let edge = new Line(\r\n                    [0, 0], [[cell_size, 0]],\r\n                    {fill: null, strokeWidth: 4, stroke: \"black\"});\r\n                let m = get(x + grid_left, y + grid_top);\r\n                m.edge_bottom.add(edge);\r\n            }\r\n        }\r\n    }\r\n    scene.render();\r\n}\r\n\r\nfunction set_color(c) {\r\n    current_color = colors[c];\r\n\r\n    each_cell(m => {\r\n        if (m.mark)\r\n            m.r_color.options.fill = current_color;\r\n    });\r\n    scene.render();\r\n}\r\n\r\nexport function DrawRender(code, wrapper, cellSize, size, margins) {\r\n    if (scene == null) {\r\n      scene = new Scene(wrapper);\r\n      scene.on(\"keyup\", (event) => keyup(event));\r\n      scene.on(\"mouseup\", () => mouseup());\r\n    }\r\n    else {\r\n      scene.empty();\r\n      reset();\r\n    }\r\n\r\n    cell_size = cellSize;\r\n    grid_left = margins.left;\r\n    grid_right = margins.right;\r\n    grid_top = margins.top;\r\n    grid_bottom = margins.bottom;\r\n    grid_w = grid_left + size.width + grid_right;\r\n    grid_h = grid_top + size.height + grid_bottom;\r\n\r\n    const outer_w = cell_size * grid_w;\r\n    const outer_x = (scene.size.x - outer_w) / 2;\r\n    const outer_y = 20;\r\n    const options = {\r\n        fill: \"rgba(255, 255, 255, 0)\",\r\n        stroke: \"black\",\r\n        strokeWidth: 1,\r\n        cursor: Component.cursors.pointer\r\n    };\r\n    const options_inner = {\r\n        fill: \"rgba(255, 255, 255, 0)\",\r\n        cursor: Component.cursors.pointer\r\n    };\r\n\r\n    textOptions.fontSize = cell_size * 0.8;\r\n    centerTextOptions.fontSize = cell_size * 0.3;\r\n\r\n    outer = new Container([outer_x, outer_y]);\r\n    scene.add(outer);\r\n\r\n    underlay = new Container([0, 0]);\r\n    outer.add(underlay);\r\n\r\n    for (let y = 0; y < grid_h; ++y) {\r\n        matrix[y] = [];\r\n    }\r\n    for (let x = 0; x < grid_w; ++x) {\r\n        for (let y = 0; y < grid_h; ++y) {\r\n            let xp = x * cell_size;\r\n            let yp = y * cell_size;\r\n            let main_grid = (x >= grid_left && y >= grid_top\r\n              && x < (grid_w - grid_right) && y < (grid_h - grid_bottom));\r\n            let cont = new Container([xp, yp]);\r\n            options.strokeWidth = main_grid ? 1 : 0;\r\n            let r = new Rectangle([0, 0], cell_size, cell_size, options);\r\n            options.strokeWidth = 0;\r\n            let edge_right = new Rectangle([0, 0], cell_size, cell_size, options);\r\n            let edge_bottom = new Rectangle([0, 0], cell_size, cell_size, options);\r\n            let edge_cage = new Rectangle([0, 0], cell_size, cell_size, options);\r\n            let r_cage = new Rectangle([0, 0], cell_size, cell_size, options);\r\n            let r_color = new Rectangle([0, 0], cell_size, cell_size, options);\r\n            let r_hover = new Rectangle(\r\n                [hover_offset, hover_offset],\r\n                cell_size - hover_offset * 2,\r\n                cell_size - hover_offset * 2, options_inner);\r\n            let normal = new Text([0, cell_size * 0.5], \"\", textOptions);\r\n            let center = new Text([0, cell_size * 0.4], \"\", centerTextOptions);\r\n            let corner_pos = [];\r\n            corner_pos[0] = [corner_offset, corner_offset];\r\n            corner_pos[1] = [cell_size - corner_offset, corner_offset];\r\n            corner_pos[2] = [cell_size - corner_offset, cell_size - corner_offset];\r\n            corner_pos[3] = [corner_offset, cell_size - corner_offset];\r\n            let side_pos = [];\r\n            side_pos[0] = [cell_size / 2, corner_offset];\r\n            side_pos[1] = [cell_size - corner_offset, cell_size / 2];\r\n            side_pos[2] = [cell_size / 2, cell_size - corner_offset];\r\n            side_pos[3] = [corner_offset, cell_size / 2];\r\n            let center_pos = [cell_size / 2, cell_size / 2];\r\n\r\n            let cage_corner = [];\r\n            let corner = [];\r\n            if (main_grid) {\r\n                cornerTextOptions.fontSize = cell_size * 0.25;\r\n                cageCornerTextOptions.fontSize = cell_size * 0.25;\r\n                corner_pos.forEach((p, i) => {\r\n                    p = p.slice(0);\r\n                    p[0] -= cell_size * 0.025;\r\n                    p[1] -= cell_size * 0.025;\r\n                    if (i === 2 || i === 3) p[1] -= cell_size * 0.15;\r\n                    if (i === 1 || i === 2) p[0] -= cell_size * 0.1;\r\n                    if (i === 0)\r\n                        cage_corner.push(new Text2(p, \"\", cageCornerTextOptions));\r\n                    corner.push(new Text(p, \"\", cornerTextOptions));\r\n                });\r\n            }\r\n            let side = [];\r\n            if (main_grid) {\r\n                side_pos.forEach((p, i) => {\r\n                    p = p.slice(0);\r\n                    p[0] -= cell_size * 0.02;\r\n                    p[1] -= cell_size * 0.02;\r\n                    if (i === 2) p[1] -= cell_size * 0.15;\r\n                    if (i === 1 || i === 3) p[1] -= cell_size * 0.05;\r\n                    if (i === 0 || i === 2) p[0] -= cell_size * 0.02;\r\n                    if (i === 1) p[0] -= cell_size * 0.1;\r\n                    side.push(new Text(p, \"\", cornerTextOptions));\r\n                });\r\n            }\r\n\r\n            let r_corner = [];\r\n            r_corner[0] = [0, 0];\r\n            r_corner[1] = [cell_size, 0];\r\n            r_corner[2] = [cell_size, cell_size];\r\n            r_corner[3] = [0, cell_size];\r\n            let corner_ext_pos = [];\r\n            corner_ext_pos[0] = [0, corner_offset];\r\n            corner_ext_pos[1] = [corner_offset, 0];\r\n            corner_ext_pos[2] = [cell_size - corner_offset, 0];\r\n            corner_ext_pos[3] = [cell_size, corner_offset];\r\n            corner_ext_pos[4] = [cell_size, cell_size - corner_offset];\r\n            corner_ext_pos[5] = [cell_size - corner_offset, cell_size];\r\n            corner_ext_pos[6] = [corner_offset, cell_size];\r\n            corner_ext_pos[7] = [0, cell_size - corner_offset];\r\n            cont.add(r_color, r, r_cage, edge_cage,\r\n                     edge_right, edge_bottom, r_hover, normal, center,\r\n                     ...cage_corner, ...corner, ...side);\r\n            cont.on(\"mousedown\", (event) => mousedown(event, x, y));\r\n            cont.on(\"hover\", () => hover(x, y));\r\n            cont.on(\"mousemove\", (event) => move(event, x, y));\r\n            r_hover.on(\"hover\", () => inner_hover(x, y));\r\n            matrix[y][x] = {\r\n                x: x, y: y, pos: [xp, yp], cont: cont, rect: r, normal: normal, center: center,\r\n                r_corner_pos: r_corner,\r\n                corner: corner, side: side,\r\n                corner_pos: corner_pos, center_pos: center_pos, side_pos: side_pos,\r\n                corner_ext_pos: corner_ext_pos,\r\n                cage_corner: cage_corner[0],\r\n                edge_cage: edge_cage,\r\n                edge_right: edge_right,\r\n                edge_bottom: edge_bottom,\r\n                r_cage: r_cage, r_color: r_color, main_grid: main_grid};\r\n            outer.add(cont);\r\n        }\r\n    }\r\n\r\n    let frame_w = grid_w - grid_left - grid_right;\r\n    let frame_h = grid_h - grid_top - grid_bottom;\r\n    let frame = new Rectangle(\r\n        [grid_left * cell_size, grid_top * cell_size],\r\n        frame_w * cell_size, frame_h * cell_size,\r\n        {strokeWidth: 4, stroke: \"black\", fill: null});\r\n    outer.add(frame);\r\n\r\n    let color_buttons = new Container([outer_x, outer_y + cell_size * grid_h + 50]);\r\n    scene.add(color_buttons);\r\n    let c = 0;\r\n    let c_buttons = [];\r\n    for (let y = 0; y < 3; ++y) {\r\n        for (let x = 0; x < 3; ++x) {\r\n            let _c = c + 0;\r\n            let b = new Button([x * 48, y * 48], {fontSize: 32, value: '  '});\r\n            let r = new Rectangle([6, 6], 32, 32, {fill: colors[c],\r\n                cursor: Component.cursors.pointer});\r\n            b.add(r);\r\n            r.on(\"click\", () => set_color(_c));\r\n            c_buttons.push(b);\r\n            ++c;\r\n        }\r\n    }\r\n    c_buttons.reverse().forEach(e => color_buttons.add(e));\r\n    scene.render();\r\n\r\n    if (code)\r\n        load(code);\r\n\r\n    return null;\r\n}\r\n\r\nwindow.addEventListener(\"keydown\", (event) => keydown(event));\r\n","import React from 'react';\nimport './App.css';\nimport { DrawRender, DrawSetMode, DrawUndo, DrawAddGrid, DrawGenerateUrl } from './draw.js';\nimport { Box, Grid, Button, ButtonGroup, Dialog, DialogTitle, DialogContent,\n         DialogContentText, DialogActions, Slider, Typography } from '@material-ui/core';\n\nfunction UrlDialog(props) {\n  let openInTab = () => {\n    props.onClose();\n    let w = window.open(props.text, '_blank');\n    w.focus();\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <DialogTitle>URL</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {props.text}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={openInTab}>Open in tab</Button>\n        <Button color=\"primary\" onClick={props.onClose}>OK</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.cellSize = 64;\n    this.size = {width: 9, height: 9};\n    this.margins = {left: 0, right: 0, top: 0, bottom: 0};\n    this.state = {value: \"normal\", dialogOpen: false, dialogText: ''};\n  }\n\n  componentDidMount() {\n    const query = window.location.search;\n    const url_params = new URLSearchParams(query);\n    const code = url_params.get(\"p\");\n    DrawRender(code, document.getElementById('canvas'), this.cellSize, this.size, this.margins);\n  }\n\n  click = (event) => {\n    this.setState({value: event});\n    DrawSetMode(event);\n  }\n\n  getColor = (event) => {\n    console.log(\"getcolor\", event);\n    if (this.state.value === \"normal\") {\n      return \"primary\";\n    }\n    return \"secondary\";\n  }\n\n  generateUrl = (event) => {\n    let url = DrawGenerateUrl();\n    this.setState({dialogText: url, dialogOpen: true});\n  }\n\n  setGridSize(id, value) {\n    this.width = value;\n    const query = window.location.search;\n    const url_params = new URLSearchParams(query);\n    const code = url_params.get(\"p\");\n    console.log(value);\n    if (id === 'width')\n      this.size.width = value;\n    if (id === 'height')\n      this.size.height = value;\n    if (id === 'left')\n      this.margins.left = value;\n    if (id === 'right')\n      this.margins.right = value;\n    if (id === 'top')\n      this.margins.top = value;\n    if (id === 'bottom')\n      this.margins.bottom = value;\n    if (id === 'cellSize')\n      this.cellSize = value;\n    DrawRender(code, document.getElementById('canvas'), this.cellSize, this.size, this.margins);\n  }\n\n  setLeftMargin = (event, value) => this.setGridSize('left', value);\n  setRightMargin = (event, value) => this.setGridSize('right', value);\n  setTopMargin = (event, value) => this.setGridSize('top', value);\n  setBottomMargin = (event, value) => this.setGridSize('bottom', value);\n  setWidth = (event, value) => this.setGridSize('width', value);\n  setHeight = (event, value) => this.setGridSize('height', value);\n  setCellSize = (event, value) => this.setGridSize('cellSize', value);\n\n  render() {\n    let set_buttons = [\n      [\"set\", \"Set\"],\n      [\"set_corner\", \"Set corner\"],\n      [\"cage\", \"Cage\"],\n      [\"edge_cage\", \"Edge cage\"],\n      [\"thermo\", \"Thermo\"]\n    ];\n\n    return (\n      <Box>\n      <UrlDialog text={this.state.dialogText} open={this.state.dialogOpen} onClose={() => this.setState({dialogOpen: false})}/>\n      <Grid container spacing={3}>\n        <Grid item xs={2}>\n          <Box margin=\"10px\">\n          <ButtonGroup fullWidth=\"true\" size=\"large\" variant=\"contained\" orientation=\"vertical\">\n            {set_buttons.map((b) => (\n              <Button color={this.state.value === b[0] ? \"primary\" : \"default\"} onClick={(e) => this.click(b[0])}>{b[1]}</Button>\n            ))}\n          </ButtonGroup>\n          </Box>\n          <Box margin=\"10px\">\n            <ButtonGroup fullWidth=\"true\" size=\"large\" variant=\"contained\" orientation=\"vertical\">\n              <Button onClick={this.generateUrl}>Generate URL</Button>\n              <Button onClick={DrawAddGrid}>Add grid</Button>\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"10px\" padding=\"10px\" boxShadow={3}>\n            <Typography gutterBottom>Cell size</Typography>\n            <Slider defaultValue={this.cellSize} valueLabelDisplay=\"auto\" min={32} max={96} step={4} marks onChangeCommitted={this.setCellSize}/>\n            <Typography gutterBottom>Width</Typography>\n            <Slider defaultValue={this.size.width} valueLabelDisplay=\"auto\" min={3} max={30} onChangeCommitted={this.setWidth}/>\n            <Typography gutterBottom>Height</Typography>\n            <Slider defaultValue={this.size.height} valueLabelDisplay=\"auto\" min={3} max={30} onChangeCommitted={this.setHeight}/>\n            <Typography gutterBottom>Left margin</Typography>\n            <Slider defaultValue={this.margins.left} valueLabelDisplay=\"auto\" min={0} max={10} onChangeCommitted={this.setLeftMargin}/>\n            <Typography gutterBottom>Right margin</Typography>\n            <Slider defaultValue={this.margins.right} valueLabelDisplay=\"auto\" min={0} max={10} onChangeCommitted={this.setRightMargin}/>\n            <Typography gutterBottom>Top margin</Typography>\n            <Slider defaultValue={this.margins.top} valueLabelDisplay=\"auto\" min={0} max={10} onChangeCommitted={this.setTopMargin}/>\n            <Typography gutterBottom>Bottom margin</Typography>\n            <Slider defaultValue={this.margins.bottom} valueLabelDisplay=\"auto\" min={0} max={10} onChangeCommitted={this.setBottomMargin}/>\n          </Box>\n        </Grid>\n        <Grid item xs={8}>\n          <div id=\"canvas\" style={{height: '1000px'}}></div>\n        </Grid>\n        <Grid item xs={2}>\n          <ButtonGroup size=\"large\" variant=\"contained\" orientation=\"vertical\">\n            <Button color={this.state.value === \"normal\" ? \"primary\" : \"default\"} onClick={(e) => this.click(\"normal\")}>Normal</Button>\n            <Button color={this.state.value === \"center\" ? \"primary\" : \"default\"} onClick={(e) => this.click(\"center\")}>Center</Button>\n            <Button color={this.state.value === \"corner\" ? \"primary\" : \"default\"} onClick={(e) => this.click(\"corner\")}>Corner</Button>\n            <Button onClick={DrawUndo}>Undo</Button>\n          </ButtonGroup>\n        </Grid>\n      </Grid>\n      </Box>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}