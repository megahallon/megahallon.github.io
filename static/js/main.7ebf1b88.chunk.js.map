{"version":3,"sources":["cage.js","path.js","symbols.js","draw.js","App.js","serviceWorker.js","index.js"],"names":["DrawCage","ctx","cells","_style","color","split","style","size","width","get_line_width","_size","corner_offset","cell_size","cs","get_cage","x","y","find","e","DrawColorPremul","corner_pos","corner_ext_pos","lines","each_cell","m","up","down","left","right","ul","ur","dl","dr","l","add_line","start","end","push","Line","points","dash","strokeWidth","stroke","slice","length","cont","add","concat","drawDashCage","corner","lineCap","ocont","drawEdgeCage","center","p","DrawPath","start_px","map","px","objs","roundLine","flat","lineJoin","squareLine","newLine","bulb","Circle","radius","fill","line","closed","line1","line2","arrow","Arrow","underlay2","scene","draw","DrawSymbol","container","str","_color","bg","cx","cy","sym","page","substr","symbol","Math","min","meas","Text","text","fontSize","listening","measureSize","position","height","offset","offset2","aopt","pointerLength","pointerWidth","Star","innerRadius","outerRadius","numPoints","o","Group","Rect","destroy","c","symboltext","symbolcolor","grid_w","grid_h","main_w","main_h","grid_left","grid_top","grid_bottom","grid_right","grid_div_width","grid_div_height","grid_style","grid_left_diagonal","grid_right_diagonal","hover_offset","symbol_page","multi_digit","number_bg","cursor_visible","sol_text_color","DrawColors","Util","colorToRGBA","r","a","g","b","current_color","current_mode","current_rmode","current_style","solve_mode","matrix","stuff","edges","drag","drag_toggle","drag_button","undo_stack","redo_stack","current","outer","underlay","shift","cursor","boundary","grid_lines","RectHolder","this","obj","undefined","TextHolder","_text","t","setSymbol","normal","symcont","bsize","DrawSymbolElement","element","num","stage","Stage","layer","Layer","saveState","state","s","r_color","rect","cross","edge","centerline","edgecross","forEach","i","lock","saveUndo","loadState","get","setCell","drawCross","drawEdge","drawEdgeCross","drawCenterLine","_setCell","pos","mode","newtext","main_grid","lock_type","index","r_color_set","indexOf","lock_cell","DrawSetNumber","number","count","each_mark","DrawSetColor","color_index","mark","fillEnabled","last_toggle_state","set","eo","new_edge","x1","y1","btype2","edgeToggle","cp","bw","bwidth","bh","bheight","cline","centerLineToggle","last_toggle","last_move","unmark","boundary_mousedown","event","mark_boundary","mousedown","evt","stopPropagation","type","button","hasCross","hasEdgeCross","mouseup","last","DrawSetMode","numberBackground","multiDigit","cageStyle","pathStyle","edgeStyle","numberStyle","btype","on","edgeMousemove","edgeMouseup","setBoundary","f","load_grid","base64","pack","Uint8Array","from","atob","charCodeAt","unpack","pako","inflate","data","msgpack","decode","version","alert","unserialize_grid","grid","unserialize","k","_s","serialize","meta","out","desc","console","log","DrawDelete","findLastIndex","splice","DrawUndo","pop","DrawRedo","render","wrapper","margin","stage_w","stage_h","gridlayer","overlay","xp","yp","r_inner","corner_size","bc","addBoundary","type2","w","h","Array","isArray","qsize","qc","ew","eh","addBoundaries","mousemove","inner_mousemove","dots","thin","fat","diagonal","dsize","addGrid","DrawRender","code","solveMode","cellSize","top","bottom","gridDivWidth","gridDivHeight","gridStyle","gridLeftDiagonal","gridRightDiagonal","load","window","addEventListener","target","tagName","key","preventDefault","startsWith","keydown","keyup","window_mousedown","contextmenu","query","location","search","urlParams","URLSearchParams","ColorGrid","props","Grid","item","xs","Button","variant","onClick","border","background","Timer","useState","seconds","setSeconds","useEffect","id","setInterval","active","clearInterval","Box","padding","boxShadow","Typography","align","Date","toISOString","ButtonGroup","fullWidth","onStart","PlayArrow","onStop","Pause","SkipPrevious","ResetButton","confirm","useConfirm","description","then","setState","timeStatus","catch","SymbolSelect","setPage","symbolRef","useRef","DrawSetSymbolPage","FormControl","Select","value","onChange","MenuItem","keys","ref","ColorSelect","setColor","UrlDialog","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","focus","App","handleKeyDown","cycle_modes","setMode","document","getElementById","setStyle","generateUrl","url","coded","encode","packed","deflate","btoa","String","fromCharCode","origin","encodeURIComponent","DrawGenerateUrl","solveSudoku","solveEdge","solveCenterLine","dialogText","dialogOpen","setGridState","setGrid","check","range","rows","columns","boxes","missing","n","floor","isEqual","sort","DrawCheck","status","msg","canvasRef","React","createRef","settingsMode","symbolPage","DrawGetMetaData","removeEventListener","interval","InputLabel","shrink","labelId","FormControlLabel","control","Switch","checked","label","minWidth","TextField","multiline","InputProps","readOnly","numberStyleBox","cageStyleBox","pathStyleBox","edgeStyleBox","sizeSlider","FormLabel","FormGroup","newValue","includes","DrawUpdateGrid","max","step","marks","Slider","handleChange","onChangeCommitted","buttons","display","flexDirection","timerBox","maxWidth","orientation","settingLeftBox","settingRight","renderSolveMode","renderSetMode","Component","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7ebf1b88.chunk.js","sourcesContent":["import { Line } from \"konva\";\r\nimport { DrawColorPremul } from \"./draw\";\r\n\r\nexport function DrawCage(ctx, cells, _style, color) {\r\n  let [style, size] = _style.split(\":\");\r\n  let width = ctx.get_line_width(size);\r\n  if (style === \"dash\") return drawDashCage(ctx, cells, width, color);\r\n  if (style === \"edge\") return drawEdgeCage(ctx, cells, width, color);\r\n}\r\n\r\nfunction drawDashCage(ctx, cells, _size, color) {\r\n  let size = 2; //ctx.cell_size / 32;\r\n  let corner_offset = ctx.cell_size * 0.08;\r\n  let cs = ctx.cell_size;\r\n  let get_cage = (x, y) => {\r\n    return cells.find((e) => e[0] === x && e[1] === y);\r\n  };\r\n  color = DrawColorPremul(color);\r\n\r\n  const corner_pos = [\r\n    [corner_offset, corner_offset],\r\n    [cs - corner_offset, corner_offset],\r\n    [cs - corner_offset, cs - corner_offset],\r\n    [corner_offset, cs - corner_offset],\r\n  ];\r\n\r\n  const corner_ext_pos = [\r\n    [0, corner_offset],\r\n    [corner_offset, 0],\r\n    [cs - corner_offset, 0],\r\n    [cs, corner_offset],\r\n    [cs, cs - corner_offset],\r\n    [cs - corner_offset, cs],\r\n    [corner_offset, cs],\r\n    [0, cs - corner_offset],\r\n  ];\r\n\r\n  let lines = [];\r\n  ctx.each_cell((m) => {\r\n    let x = m.x;\r\n    let y = m.y;\r\n    if (!get_cage(x, y)) return;\r\n    let up = get_cage(x, y - 1);\r\n    let down = get_cage(x, y + 1);\r\n    let left = get_cage(x - 1, y);\r\n    let right = get_cage(x + 1, y);\r\n    let ul = get_cage(x - 1, y - 1);\r\n    let ur = get_cage(x + 1, y - 1);\r\n    let dl = get_cage(x - 1, y + 1);\r\n    let dr = get_cage(x + 1, y + 1);\r\n    let l = [];\r\n    let add_line = (start, end) => {\r\n      l.push(\r\n        new Line({\r\n          points: [...start, ...end],\r\n          dash: [ctx.cell_size / 20],\r\n          strokeWidth: size,\r\n          stroke: color,\r\n        })\r\n      );\r\n    };\r\n    if (!left) {\r\n      let start = corner_pos[0];\r\n      let end = corner_pos[3];\r\n      if (up) {\r\n        start = corner_ext_pos[1].slice(0);\r\n        start[1] -= !ul ? 0 : corner_offset;\r\n      }\r\n      if (down) {\r\n        end = corner_ext_pos[6].slice(0);\r\n        end[1] += !dl ? 0 : corner_offset;\r\n      }\r\n      add_line(start, end);\r\n    }\r\n    if (!right) {\r\n      let start = corner_pos[1];\r\n      let end = corner_pos[2];\r\n      if (up) {\r\n        start = corner_ext_pos[2].slice(0);\r\n        start[1] -= !ur ? 0 : corner_offset;\r\n      }\r\n      if (down) {\r\n        end = corner_ext_pos[5].slice(0);\r\n        end[1] += !dr ? 0 : corner_offset;\r\n      }\r\n      add_line(start, end);\r\n    }\r\n    if (!up) {\r\n      let start = corner_pos[0];\r\n      let end = corner_pos[1];\r\n      if (left) {\r\n        start = corner_ext_pos[0].slice(0);\r\n        start[0] -= !ul ? 0 : corner_offset;\r\n      }\r\n      if (right) {\r\n        end = corner_ext_pos[3].slice(0);\r\n        end[0] += !ur ? 0 : corner_offset;\r\n      }\r\n      add_line(start, end);\r\n    }\r\n    if (!down) {\r\n      let start = corner_pos[3];\r\n      let end = corner_pos[2];\r\n      if (left) {\r\n        start = corner_ext_pos[7].slice(0);\r\n        start[0] -= !dl ? 0 : corner_offset;\r\n      }\r\n      if (right) {\r\n        end = corner_ext_pos[4].slice(0);\r\n        end[0] += !dr ? 0 : corner_offset;\r\n      }\r\n      add_line(start, end);\r\n    }\r\n    if (l.length > 0) m.cont.add(...l);\r\n    lines = lines.concat(l);\r\n  });\r\n  return lines;\r\n}\r\n\r\nfunction drawEdgeCage(ctx, cells, size, color) {\r\n  let cs = ctx.cell_size;\r\n  let get_cage = (x, y) => {\r\n    return cells.find((e) => e[0] === x && e[1] === y);\r\n  };\r\n  color = DrawColorPremul(color);\r\n\r\n  const corner = [\r\n    [0, 0],\r\n    [cs, 0],\r\n    [cs, cs],\r\n    [0, cs],\r\n  ];\r\n\r\n  let lines = [];\r\n  ctx.each_cell((m) => {\r\n    let x = m.x;\r\n    let y = m.y;\r\n    if (!get_cage(x, y)) return;\r\n    let up = get_cage(x, y - 1);\r\n    let down = get_cage(x, y + 1);\r\n    let left = get_cage(x - 1, y);\r\n    let right = get_cage(x + 1, y);\r\n    let l = [];\r\n    let add_line = (start, end) => {\r\n      l.push(\r\n        new Line({\r\n          points: [...start, ...end],\r\n          strokeWidth: size,\r\n          stroke: color,\r\n          lineCap: \"round\",\r\n        })\r\n      );\r\n    };\r\n    if (!left) {\r\n      let start = corner[0];\r\n      let end = corner[3];\r\n      add_line(start, end);\r\n    }\r\n    if (!right) {\r\n      let start = corner[1];\r\n      let end = corner[2];\r\n      add_line(start, end);\r\n    }\r\n    if (!up) {\r\n      let start = corner[0];\r\n      let end = corner[1];\r\n      add_line(start, end);\r\n    }\r\n    if (!down) {\r\n      let start = corner[3];\r\n      let end = corner[2];\r\n      add_line(start, end);\r\n    }\r\n    if (l.length > 0) m.ocont.add(...l);\r\n    lines.push(...l);\r\n  });\r\n  return lines;\r\n}\r\n","import { Circle, Line, Arrow } from \"konva\";\r\nimport { DrawColorPremul } from \"./draw\";\r\n\r\nfunction center(cell_size, p) {\r\n  return [p[0] * cell_size + cell_size / 2, p[1] * cell_size + cell_size / 2];\r\n}\r\n\r\nexport function DrawPath(ctx, cells, style, color) {\r\n  let cell_size = ctx.cell_size;\r\n  color = DrawColorPremul(color);\r\n\r\n  let start_px = center(cell_size, cells[0]);\r\n  let points = cells.map((p) => {\r\n    let px = center(cell_size, p);\r\n    return [px[0], px[1]];\r\n  });\r\n  if (points.length === 1) points.push(points[points.length - 1]);\r\n  points = points.flat();\r\n  let objs = [];\r\n  let roundLine = {\r\n    points: points,\r\n    stroke: color,\r\n    lineCap: \"round\",\r\n    lineJoin: \"round\",\r\n  };\r\n  let squareLine = {\r\n    points: points,\r\n    stroke: color,\r\n    lineCap: \"square\",\r\n    lineJoin: \"miter\",\r\n  };\r\n  let newLine = (width) => new Line({\r\n    ...roundLine,\r\n    strokeWidth: width,\r\n  });\r\n\r\n  if (style === \"thermo\") {\r\n    let bulb = new Circle({\r\n      x: start_px[0],\r\n      y: start_px[1],\r\n      radius: cell_size * 0.4,\r\n      fill: color,\r\n    });\r\n    let line = newLine(cell_size * 0.3);\r\n    objs.push(bulb, line);\r\n  } else if (style === \"polygon\") {\r\n    let strokeWidth = cell_size * 0.05;\r\n    let line = new Line({\r\n      ...roundLine,\r\n      strokeWidth: strokeWidth,\r\n      stroke: color,\r\n      closed: true,\r\n    });\r\n    objs.push(line);\r\n  } else if (style === \"polygonfill\") {\r\n    let strokeWidth = cell_size * 0.05;\r\n    let line = new Line({\r\n      ...roundLine,\r\n      strokeWidth: strokeWidth,\r\n      fill: color,\r\n      closed: true,\r\n    });\r\n    objs.push(line);\r\n  } else if (style === \"thin\") {\r\n    let line = newLine(cell_size * 0.05);\r\n    objs.push(line);\r\n  } else if (style === \"medium\") {\r\n    let line = newLine(cell_size * 0.15);\r\n    objs.push(line);\r\n  } else if (style === \"fat\") {\r\n    let line = newLine(cell_size * 0.3);\r\n    objs.push(line);\r\n  } else if (style === \"roundborder\") {\r\n    let line1 = newLine(cell_size * 0.8);\r\n    let line2 = new Line({\r\n      ...roundLine,\r\n      strokeWidth: cell_size * 0.67,\r\n      stroke: \"white\",\r\n    });\r\n    objs.push(line1, line2);\r\n  } else if (style === \"border\") {\r\n    // TODO only allow 90 degree angles\r\n    let line1 = new Line({\r\n      ...squareLine,\r\n      strokeWidth: cell_size * 0.8,\r\n    });\r\n    let line2 = new Line({\r\n      ...squareLine,\r\n      strokeWidth: cell_size * 0.67,\r\n      stroke: \"white\",\r\n    });\r\n    objs.push(line1, line2);\r\n  } else if (style === \"roundfill\") {\r\n    let line = newLine(cell_size * 0.8);\r\n    objs.push(line);\r\n  } else if (style === \"squarefill\") {\r\n    let line = new Line({\r\n      ...squareLine,\r\n      strokeWidth: cell_size * 0.8,\r\n    });\r\n    objs.push(line);\r\n  } else if (style === \"arrowcircle\" || style === \"arrow\") {\r\n    let strokeWidth = cell_size * 0.07;\r\n    if (points.length > 1) {\r\n      let arrow = new Arrow({\r\n        points: points,\r\n        stroke: color,\r\n        strokeWidth: strokeWidth,\r\n        arrow: cell_size * 0.3,\r\n      });\r\n      objs.push(arrow);\r\n    }\r\n    let line = new Line({\r\n      ...squareLine,\r\n      strokeWidth: strokeWidth,\r\n    });\r\n    objs.push(line);\r\n    if (style === \"arrowcircle\") {\r\n      let bulb = new Circle({\r\n        x: start_px[0],\r\n        y: start_px[1],\r\n        radius: cell_size * 0.4,\r\n        fill: \"white\",\r\n        strokeWidth: strokeWidth,\r\n        stroke: color,\r\n      });\r\n      objs.push(bulb);\r\n    }\r\n  }\r\n\r\n  ctx.underlay2.add(...objs);\r\n  ctx.scene.draw();\r\n\r\n  return objs;\r\n}\r\n","//import Arrow from \"./arrow\";\r\nimport { Circle, Star, Rect, Group, Text, Line, Arrow } from \"konva\";\r\nimport { DrawColorPremul } from \"./draw\";\r\n\r\nexport function DrawSymbol(container, str, _color, _size, bg) {\r\n  let page = +str.substr(1, 1);\r\n  let symbol = +str.substr(2, 1);\r\n  let color = DrawColorPremul(_color);\r\n  let cx;\r\n  let cy;\r\n  let size;\r\n  if (typeof _size === \"object\") {\r\n    cx = _size[0] / 2;\r\n    cy = _size[1] / 2;\r\n    size = Math.min(..._size);\r\n  } else {\r\n    size = _size;\r\n    cx = size / 2;\r\n    cy = size / 2;\r\n  }\r\n  let sym;\r\n\r\n  if (str[0] !== \"#\") page = 0;\r\n\r\n  if (page === 0) {\r\n    sym = new Text({\r\n      text: str,\r\n      fontSize: size,\r\n      fill: color,\r\n      listening: false,\r\n    });\r\n    let meas = sym.measureSize(str);\r\n    sym.position({\r\n      x: cx - meas.width / 2,\r\n      y: cy - meas.height / 2,\r\n    });\r\n  }\r\n  if (page === 1) {\r\n    if (symbol === 1) {\r\n      // circle fill\r\n      sym = new Circle({\r\n        x: cx,\r\n        y: cy,\r\n        radius: (0.8 * size) / 2,\r\n        fill: color,\r\n        stroke: \"black\",\r\n        strokeWidth: 2,\r\n      });\r\n    }\r\n    if (symbol === 2) {\r\n      // circle outline\r\n      sym = new Circle({\r\n        x: cx,\r\n        y: cy,\r\n        radius: (0.8 * size) / 2,\r\n        fill: \"white\",\r\n        stroke: color,\r\n        strokeWidth: 2,\r\n      });\r\n    }\r\n    if (symbol === 3) {\r\n      // dash circle fill\r\n      sym = new Circle({\r\n        x: cx,\r\n        y: cy,\r\n        radius: (0.8 * size) / 2,\r\n        fill: color,\r\n        stroke: \"black\",\r\n        strokeWidth: 2,\r\n        dash: [4],\r\n      });\r\n    }\r\n    if (symbol === 4) {\r\n      // dash circle outline\r\n      sym = new Circle({\r\n        x: cx,\r\n        y: cy,\r\n        radius: (0.8 * size) / 2,\r\n        fill: \"white\",\r\n        stroke: color,\r\n        strokeWidth: 2,\r\n        dash: [4],\r\n      });\r\n    }\r\n  }\r\n  if (page === 2) {\r\n    // Little killer style arrows\r\n    let offset = size * 0.05;\r\n    let offset2 = size * 0.15;\r\n    let aopt = {\r\n      stroke: color,\r\n      strokeWidth: 3,\r\n      fill: color,\r\n      pointerLength: size * 0.3,\r\n      pointerWidth: size * 0.3,\r\n    };\r\n    if (symbol === 1) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: cy,\r\n        points: [0, 0, size - cx - offset, size - cy - offset],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 2) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: cy,\r\n        points: [0, 0, size - cx - offset, -cy + offset],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 3) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: cy,\r\n        points: [0, 0, -cx + offset, -cy + offset],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 4) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: cy,\r\n        points: [0, 0, -cx + offset, size - cy - offset],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 5) {\r\n      sym = new Arrow({\r\n        x: offset2,\r\n        y: cy,\r\n        points: [0, 0, size - offset2 * 2, 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 6) {\r\n      sym = new Arrow({\r\n        x: size - offset2,\r\n        y: cy,\r\n        points: [0, 0, -(size - offset2 * 2), 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 7) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: offset2,\r\n        points: [0, 0, 0, size - offset2 * 2],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 8) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: size - offset2,\r\n        points: [0, 0, 0, -(size - offset2 * 2)],\r\n        ...aopt,\r\n      });\r\n    }\r\n  }\r\n  if (page === 3) {\r\n    // Yajilin style arrows\r\n    let offset = size * 0.15;\r\n    let aopt = {\r\n      stroke: color,\r\n      fill: color,\r\n      strokeWidth: 2,\r\n      pointerLength: size * 0.1,\r\n      pointerWidth: size * 0.1,\r\n    };\r\n    if (symbol === 1) {\r\n      sym = new Arrow({\r\n        x: offset,\r\n        y: offset,\r\n        points: [0, 0, size - offset * 2, 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 2) {\r\n      sym = new Arrow({\r\n        x: size - offset,\r\n        y: offset,\r\n        points: [0, 0, -(size - offset * 2), 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 3) {\r\n      sym = new Arrow({\r\n        x: size - offset,\r\n        y: offset,\r\n        points: [0, 0, 0, size - offset * 2],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 4) {\r\n      sym = new Arrow({\r\n        x: size - offset,\r\n        y: size - offset,\r\n        points: [0, 0, 0, -(size - offset * 2)],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 5) {\r\n      sym = new Arrow({\r\n        x: size - offset,\r\n        y: size - offset,\r\n        points: [0, 0, -(size - offset * 2), 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 6) {\r\n      sym = new Arrow({\r\n        x: offset,\r\n        y: size - offset,\r\n        points: [0, 0, size - offset * 2, 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 7) {\r\n      sym = new Arrow({\r\n        x: offset,\r\n        y: size - offset,\r\n        points: [0, 0, 0, -(size - offset * 2)],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 8) {\r\n      sym = new Arrow({\r\n        x: offset,\r\n        y: offset,\r\n        points: [0, 0, 0, size - offset * 2],\r\n        ...aopt,\r\n      });\r\n    }\r\n  }\r\n  if (page === 4) {\r\n    if (symbol === 1) {\r\n      sym = new Star({\r\n        x: cx,\r\n        y: cy,\r\n        innerRadius: size * 0.2,\r\n        outerRadius: size * 0.4,\r\n        numPoints: 5,\r\n        fill: color,\r\n        stroke: \"black\",\r\n      });\r\n    }\r\n    if (symbol === 2) {\r\n      let o = size * 0.1;\r\n      sym = new Line({\r\n        points: [o, o, size - o, size / 2, o, size - o, o, o],\r\n        fill: color,\r\n        closed: true,\r\n      });\r\n    }\r\n    if (symbol === 3) {\r\n      // Kakuro box\r\n      sym = new Group();\r\n      sym.add(new Rect({ width: size, height: size, fill: color }));\r\n      sym.add(\r\n        new Line({\r\n          points: [0, 0, size, size],\r\n          stroke: \"white\",\r\n          strokeWidth: 3,\r\n        })\r\n      );\r\n    }\r\n    if (symbol === 4) {\r\n      // Cross\r\n      let o = size * 0.1;\r\n      sym = new Group();\r\n      sym.add(\r\n        new Line({\r\n          x: cx - size / 2,\r\n          y: cy - size / 2,\r\n          points: [o, o, size - o, size - o],\r\n          stroke: color,\r\n          strokeWidth: 3,\r\n          listening: false,\r\n        })\r\n      );\r\n      sym.add(\r\n        new Line({\r\n          x: cx - size / 2,\r\n          y: cy - size / 2,\r\n          points: [o, size - o, size - o, o],\r\n          stroke: color,\r\n          strokeWidth: 3,\r\n          listening: false,\r\n        })\r\n      );\r\n    }\r\n    if (symbol === 5) {\r\n      let o = size * 0.1;\r\n      sym = new Line({\r\n        x: cx - size / 2,\r\n        y: cy - size / 2,\r\n        points: [o, o, size - o, size / 2, o, size - o],\r\n        stroke: color,\r\n        strokeWidth: 3,\r\n        listening: false,\r\n      });\r\n    }\r\n    if (symbol === 6) {\r\n      let o = size * 0.1;\r\n      sym = new Line({\r\n        x: cx - size / 2,\r\n        y: cy - size / 2,\r\n        points: [size - o, o, o, size / 2, size - o, size - o],\r\n        stroke: color,\r\n        strokeWidth: 3,\r\n        listening: false,\r\n      });\r\n    }\r\n    if (symbol === 7) {\r\n      let o = size * 0.1;\r\n      sym = new Line({\r\n        x: cx - size / 2,\r\n        y: cy - size / 2,\r\n        points: [o, o, size / 2, size - o, size - o, o],\r\n        stroke: color,\r\n        strokeWidth: 3,\r\n        listening: false,\r\n      });\r\n    }\r\n  }\r\n  if (sym) {\r\n    if (container.symbol) {\r\n      container.symbol.destroy();\r\n    }\r\n    if (bg) {\r\n      let bg = new Rect({\r\n        width: size,\r\n        height: size,\r\n        fill: \"white\",\r\n        listening: false,\r\n      });\r\n      let c = new Group();\r\n      c.add(bg, sym);\r\n      container.symbol = c;\r\n      container.add(c);\r\n    } else {\r\n      container.symbol = sym;\r\n      container.add(sym);\r\n    }\r\n    container.symboltext = str;\r\n    container.symbolcolor = _color;\r\n  }\r\n}\r\n","import { Stage, Layer, Text, Rect, Group, Line, Circle, Util } from \"konva\";\nimport { DrawCage } from \"./cage\";\nimport { DrawPath } from \"./path\";\nimport { DrawSymbol } from \"./symbols\";\nimport pako from \"pako\";\nimport msgpack from \"msgpack-lite\";\nimport { isEqual, range, findLastIndex, last } from \"lodash\";\n\nlet ctx = {};\nlet cell_size = 0;\nlet grid_w = null;\nlet grid_h = null;\nlet main_w = null;\nlet main_h = null;\nlet grid_left = 0;\nlet grid_top = 0;\nlet grid_bottom = 0;\nlet grid_right = 0;\nlet grid_div_width = 0;\nlet grid_div_height = 0;\nlet grid_style = \"normal\";\nlet grid_left_diagonal = false;\nlet grid_right_diagonal = false;\nlet corner_offset = 0;\nlet hover_offset = 0;\nlet symbol_page = 0;\nlet multi_digit = false;\nlet number_bg = false;\nlet cursor_visible = true;\n\nconst thin_grid_line = 0.01;\nconst medium_grid_line = 0.05;\nconst fat_grid_line = 0.1;\n\nconst type_path = 1;\nconst type_cage = 2;\n\nconst lock_normal = 1;\nconst lock_color = 2;\nconst lock_boundary = 3;\n\nconst b_corner = 1;\nconst b_side = 2;\nconst b_quarter = 3;\nconst b_boundary = 4;\nconst b_edge = 5;\n\nconst b_left = 1;\nconst b_top = 2;\nconst b_bottom = 3;\nconst b_right = 4;\n\nconst sol_text_color = \"rgb(29, 106, 229)\";\nconst mark_color = \"rgba(247, 208, 56, 0.5)\";\nexport const DrawColors = [\n  \"rgba(0, 0, 0, 1)\",\n  \"rgba(207, 207, 207, 0.5)\",\n  \"rgba(255, 255, 255, 1)\",\n  \"rgba(163, 224, 72, 0.5)\",\n  \"rgba(210, 59, 231, 0.5)\",\n  \"rgba(235, 117, 50, 0.5)\",\n  \"rgba(226, 38, 31, 0.5)\",\n  \"rgba(247, 208, 56, 0.5)\",\n  \"rgba(52, 187, 230, 0.5)\",\n  //\n  \"rgba(140, 140, 140, 0.5)\",\n  \"rgba(80, 80, 80, 0.5)\",\n  \"rgba(20, 20, 20, 0.5)\",\n];\n\nexport function DrawColorPremul(color) {\n  if (typeof color === \"number\") {\n    color = DrawColors[color];\n  }\n  // Premultiply for thermo\n  color = Util.colorToRGBA(color);\n  color.r = color.r * color.a + (1 - color.a) * 255;\n  color.g = color.g * color.a + (1 - color.a) * 255;\n  color.b = color.b * color.a + (1 - color.a) * 255;\n  color.a = 1;\n  return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n}\n\nlet current_color = 0;\nlet current_mode = \"normal\";\nlet current_rmode = null;\nlet current_style = null;\nlet solve_mode = false;\nlet scene = null;\nlet matrix = [];\nlet stuff = [];\nlet edges = {};\nlet drag = false;\nlet drag_toggle = null;\nlet drag_button = -1;\nlet undo_stack = [];\nlet redo_stack = [];\nlet current = null;\nlet outer = null;\nlet underlay = null;\nlet shift = false;\nlet cursor = null;\nlet boundary = null;\nlet grid_lines = [];\n\nfunction reset() {\n  matrix = [];\n  stuff = [];\n  edges = {};\n  undo_stack = [];\n  redo_stack = [];\n  current = null;\n  outer = null;\n  underlay = null;\n  shift = false;\n  cursor = null;\n}\n\nexport function DrawSetSymbolPage(page) {\n  symbol_page = page;\n}\n\nclass RectHolder {\n  constructor(container, width, height) {\n    this.container = container;\n    this.width = width;\n    this.height = height;\n    this.color = null;\n    this.obj = null;\n  }\n\n  fill(color) {\n    if (color === undefined) return this.color;\n\n    this.color = color;\n    if (color === null) {\n      if (this.obj) {\n        this.obj.destroy();\n        this.obj = null;\n      }\n    } else {\n      if (this.obj === null) {\n        this.obj = new Rect({ width: this.width, height: this.height });\n        this.container.add(this.obj);\n      }\n      this.obj.fill(this.color);\n    }\n  }\n}\n\nclass TextHolder {\n  constructor(container, color, fontSize, size) {\n    this.container = container;\n    this._color = color;\n    this.fontSize = fontSize;\n    this.size = size;\n    this._text = \"\";\n    this.obj = null;\n  }\n\n  text(t) {\n    if (t === undefined) return this._text;\n\n    this._text = t;\n    if (this._text.length > 0) {\n      if (!this.obj) {\n        this.obj = new Text({\n          fill: this._color,\n          text: this._text,\n          fontSize: this.fontSize,\n        });\n        this.container.add(this.obj);\n      } else this.obj.text(this._text);\n      let meas = this.obj.measureSize(this._text);\n      this.obj.position({\n        x: (this.size - meas.width) / 2,\n        y: (this.size - meas.height) / 2,\n      });\n    } else if (this.obj) {\n      this.obj.destroy();\n      this.obj = null;\n    }\n  }\n\n  color(c) {\n    if (c === undefined) return this._color;\n\n    this._color = c;\n    if (this.obj) this.obj.fill(this._color);\n  }\n}\n\nfunction setSymbol(container, str, color, _size) {\n  let text;\n  let size = _size;\n  if (container.normal) {\n    if (typeof color === \"number\") color = DrawColors[color];\n    size = cell_size;\n    text = container.normal.text;\n    if (multi_digit) str = text.text() + str;\n    container = container.symcont;\n  } else if (size > 0) {\n    // Symbol page\n    color = \"gray\";\n  } else {\n    size = container.bsize;\n    if (multi_digit && str !== \"\") str = (container.symboltext || \"\") + str;\n  }\n  if (str[0] === \"#\" || !text) {\n    DrawSymbol(container, str, color, size, number_bg);\n  } else {\n    text.text(str);\n    text.color(color);\n  }\n}\n\nexport function DrawSymbolElement(element, page, num, size) {\n  let stage = new Stage({ container: element, width: size, height: size });\n  let layer = new Layer();\n  setSymbol(layer, \"#\" + page + num, current_color, size);\n  stage.add(layer);\n  stage.draw();\n}\n\nfunction saveState() {\n  let state = [];\n  each_cell((m) => {\n    let s = { x: m.x, y: m.y };\n    if (m.normal.text.text() !== \"\") s.normal = m.normal.text.text();\n    else {\n      if (m.center.text.text() !== \"\") s.center = m.center.text.text();\n      s.corner = m.corner.map((c) => c.text.text());\n    }\n    if (m.r_color.rect.fill()) s.color = m.r_color.rect.fill();\n    if (m.cross) s.cross = true;\n    s.edge = [];\n    s.centerline = [];\n    s.edgecross = [];\n    m.boundary.forEach((b, i) => {\n      if (b.edge && !b.lock) s.edge.push(i);\n      if (b.cross) s.edgecross.push(i);\n      if (b.centerline) s.centerline.push(i);\n    });\n    state.push(s);\n  });\n  return state;\n}\n\nfunction saveUndo() {\n  let state = saveState();\n  undo_stack.push(state);\n}\n\nfunction loadState(state) {\n  state.forEach((s) => {\n    let m = get(s.x, s.y);\n    setCell([s.x, s.y], \"reset\", null, \"\");\n    if (s.normal) m.normal.text.text(s.normal);\n    else {\n      if (s.center) m.center.text.text(s.center);\n      if (s.corner) s.corner.forEach((c, i) => m.corner[i].text.text(c));\n    }\n    if (s.color) m.r_color.rect.fill(s.color);\n    if (s.cross) drawCross(s.x, s.y, true);\n    s.edge.forEach(i => drawEdge(s.x, s.y, i, true));\n    s.edgecross.forEach(i => drawEdgeCross(s.x, s.y, i, true));\n    s.centerline.forEach(i => drawCenterLine(s.x, s.y, i, true));\n  });\n}\n\nfunction _setCell(lock, pos, mode, color, newtext) {\n  let x = pos[0];\n  let y = pos[1];\n  let b = null;\n  if (pos.length === 3) b = get(...pos);\n  let m = get(x, y);\n\n  if (!m.main_grid && mode !== \"normal\" && !lock) {\n    return;\n  }\n  if (m.lock_type === lock_normal && !lock && mode !== \"color\") {\n    return;\n  }\n\n  if (mode === \"reset\") {\n    m.center.text.text(\"\");\n    m.normal.text.text(\"\");\n    m.corner.forEach((c) => c.text.text(\"\"));\n    m.r_color.rect.fill(null);\n    if (m.cross) {\n      m.cross.destroy();\n      m.cross = null;\n    }\n    m.boundary.forEach((b) => {\n      if (b.edge && !b.lock) {\n        b.edge.destroy();\n        b.edge = null;\n        delete edges[[x, y, b.index]];\n      }\n      if (b.centerline) {\n        b.centerline.destroy();\n        b.centerline = null;\n      }\n      if (b.cross) {\n        b.cross.destroy();\n        b.cross = null;\n      }\n    });\n    if (lock) {\n      m.r_color_set.rect.fill(null);\n      m.fill = -1;\n      if (m.symcont.symbol) {\n        m.symcont.symbol.destroy();\n        m.symcont.symbol = null;\n        m.symcont.symboltext = \"\";\n      }\n      m.boundary.forEach((b) => {\n        if (b.symbol) {\n          b.symbol.destroy();\n          b.symbol = null;\n          b.symboltext = \"\";\n        }\n        if (b.rect) {\n          b.rect.destroy();\n          b.rect = null;\n        }\n        if (b.edge) {\n          b.edge.destroy();\n          b.edge = null;\n          delete edges[[x, y, b.index]];\n        }\n      });\n    }\n  } else if (b) {\n    setSymbol(b, newtext, color);\n  } else if (mode === \"normal\") {\n    if (!lock) {\n      color = sol_text_color;\n    } else {\n      m.lock_type = newtext !== \"\" ? lock_normal : 0;\n      if (newtext[0] !== \"#\") {\n        m.color = color;\n      }\n    }\n    setSymbol(m, newtext, color);\n    if (newtext[0] !== \"#\") {\n      m.center.text.text(\"\");\n      m.corner.forEach((c) => c.text.text(\"\"));\n    }\n  } else if (mode === \"center\" && m.normal.text.text() === \"\") {\n    let current = m.center.text.text();\n    let center = \"\";\n    if (newtext !== \"\") {\n      for (let i = 1; i <= 9; ++i) {\n        if (\n          (current.indexOf(i) === -1 && i === +newtext) ||\n          (current.indexOf(i) !== -1 && i !== +newtext)\n        ) {\n          center += i;\n        }\n      }\n    }\n\n    m.center.text.text(center);\n  } else if (mode === \"corner\" && m.normal.text.text() === \"\") {\n    let current = \"\";\n    m.corner.forEach((t) => (current += t.text.text()));\n    let text = \"\";\n    if (newtext !== \"\") {\n      for (let i = 1; i <= 9; ++i) {\n        if (\n          (current.indexOf(i) === -1 && i === +newtext) ||\n          (current.indexOf(i) !== -1 && i !== +newtext)\n        ) {\n          text += i;\n        }\n      }\n    }\n    let i = 0;\n    m.corner.forEach((c) => c.text.text(text[i++] || \"\"));\n  } else if (mode === \"color\") {\n    if (!lock) {\n      if (color === 2) {\n        // white == clear in solve mode\n        m.r_color.rect.fill(null);\n      } else {\n        m.r_color.rect.fill(DrawColors[color]);\n      }\n    } else {\n      m.r_color_set.rect.fill(DrawColors[color]);\n      m.fill = color;\n    }\n  }\n}\n\nfunction keyup(event) {\n  if (event.key === \"Shift\") {\n    shift = false;\n  }\n}\n\nfunction setCell(pos, mode, color, newtext) {\n  let lock = !solve_mode;\n  _setCell(lock, pos, mode, color, newtext);\n}\n\nfunction lock_cell(pos, mode, color, newtext) {\n  _setCell(true, pos, mode, color, newtext);\n}\n\nexport function DrawSetNumber(number) {\n  saveUndo();\n\n  let symbol = \"\" + number;\n  if (symbol_page > 0) symbol = \"#\" + symbol_page + number;\n  if (boundary) {\n    setCell(boundary, \"boundary\", current_color, symbol);\n  } else {\n    let count = 0;\n    let mode = current_mode;\n    each_mark((m) => ++count);\n    if (count > 1 && solve_mode && mode === \"normal\") mode = \"center\";\n    each_mark((m) => setCell([m.x, m.y], mode, current_color, symbol));\n  }\n  scene.draw();\n}\n\nexport function DrawSetColor(color_index) {\n  saveUndo();\n\n  current_color = color_index;\n  if (current_mode === \"color\") {\n    each_mark((m) => {\n      setCell([m.x, m.y], \"color\", color_index, null);\n    });\n    scene.draw();\n  }\n}\n\nfunction keydown(event) {\n  if (event.target.tagName === \"TEXTAREA\") {\n    return;\n  }\n\n  let newtext;\n  if (event.key === \"Shift\") {\n    shift = true;\n    return;\n  } else if (event.key === \"Delete\" || event.key === \"Backspace\") {\n    DrawDelete();\n    event.preventDefault();\n    return;\n  } else if (event.key >= \"0\" && event.key <= \"9\") {\n    newtext = event.key;\n    if (symbol_page > 0) newtext = \"#\" + symbol_page + newtext;\n  } else if (event.key === \"u\" && solve_mode) {\n    DrawUndo();\n    return;\n  } else if (\n    event.key.length === 1 &&\n    ((event.key >= \"a\" && event.key <= \"z\") ||\n      (event.key >= \"A\" && event.key <= \"Z\")) &&\n    !solve_mode\n  ) {\n    newtext = event.key;\n  } else if (event.key.startsWith(\"Arrow\") && cursor) {\n    let c = cursor.slice();\n    if (!shift) unmark();\n    cursor = c;\n    if (event.key === \"ArrowUp\" && cursor[1] > 0) cursor[1] -= 1;\n    if (event.key === \"ArrowDown\" && cursor[1] < grid_h - 1) cursor[1] += 1;\n    if (event.key === \"ArrowLeft\" && cursor[0] > 0) cursor[0] -= 1;\n    if (event.key === \"ArrowRight\" && cursor[0] < grid_w - 1) cursor[0] += 1;\n    mark(cursor[0], cursor[1]);\n    scene.draw();\n    return;\n  } else {\n    return;\n  }\n\n  saveUndo();\n\n  if (boundary) {\n    setCell(boundary, \"boundary\", current_color, newtext);\n  } else {\n    let count = 0;\n    each_mark((m) => ++count);\n\n    let mode = current_mode;\n    if (count > 1 && solve_mode && mode === \"normal\") mode = \"center\";\n    each_mark((m) => {\n      if (current_mode === \"color\") {\n        let color = +newtext - 1;\n        if (color >= 0 && color <= 9)\n          setCell([m.x, m.y], current_mode, color, null);\n      } else setCell([m.x, m.y], mode, current_color, newtext);\n    });\n  }\n  scene.draw();\n}\n\nfunction get(x, y, b) {\n  if (x < 0 || y < 0 || x >= grid_w || y >= grid_h) {\n    return null;\n  }\n  let m = matrix[y][x];\n  if (b >= 0) return m.boundary[b];\n  return m;\n}\n\nfunction mark(x, y) {\n  let m = get(x, y);\n  cursor = [x, y];\n  if (!m.mark) {\n    m.mark = true;\n    m.rect.fill(mark_color);\n    m.rect.fillEnabled(cursor_visible);\n    return true;\n  }\n  return false;\n}\n\nfunction inner_mousemove(event, x, y) {\n  if (!drag) return;\n  if (drag_button !== 0) return;\n\n  if (current_mode === \"path\") {\n    if (current.cells.length > 0) {\n      let l = last(current.cells);\n      if (l[0] === x && l[1] === y) return;\n    }\n    current.objs.forEach((o) => o.destroy());\n    current.cells.push([x, y]);\n    current.objs = DrawPath(ctx, current.cells, current_style, current_color);\n    scene.draw();\n  }\n}\n\nlet last_toggle_state = null;\n\nfunction get_line_width(style) {\n  switch (style) {\n    case \"thin\":\n      return cell_size * thin_grid_line;\n    case \"medium\":\n      return cell_size * medium_grid_line;\n    default:\n      return cell_size * fat_grid_line;\n  }\n}\n\nfunction drawEdge(x, y, i, set, style, color, lock = false) {\n  let m = get(x, y);\n  let b = m.boundary[i];\n  let c = solve_mode ? sol_text_color : DrawColors[current_color];\n  let width = solve_mode ? get_line_width(\"fat\") : get_line_width(style);\n  let eo = cell_size * 0.15;\n\n  if (!set) {\n    if (b.edge) {\n      b.edge.destroy();\n      b.edge = null;\n      delete edges[[x, y, i]];\n    }\n  }\n  else if (!b.edge) {\n    let edge;\n    let new_edge = (x, y, x1, y1) => {\n      edge = new Line({\n        x: x,\n        y: y,\n        points: [0, 0, x1, y1],\n        strokeWidth: width,\n        stroke: c,\n        lineCap: \"round\",\n        listening: false,\n      });\n    };\n    switch (b.btype2) {\n      case b_left:\n      case b_right:\n        new_edge(eo, -eo, 0, cell_size);\n        break;\n      case b_top:\n      case b_bottom:\n        new_edge(-eo, eo, cell_size, 0);\n        break;\n      default:\n        break;\n    }\n    edges[[x, y, i]] = [style, color];\n    b.edge = edge;\n    b.lock = lock;\n    b.add(edge);\n  }\n}\n\nfunction edgeToggle(x, y, i, style, color, lock) {\n  let m = get(x, y);\n  let b = m.boundary[i];\n  let set;\n\n  if (b.lock && solve_mode) return;\n\n  if (last_toggle_state === null) {\n    if (b.edge) last_toggle_state = true;\n    else last_toggle_state = false;\n  }\n  set = !last_toggle_state;\n\n  drawEdge(x, y, i, set, style, color, lock);\n}\n\nfunction drawCenterLine(x, y, i, set, style, color) {\n  let m = get(x, y);\n  let b = m.boundary[i];\n  let c = solve_mode ? sol_text_color : DrawColors[current_color];\n  if (color !== undefined) c = DrawColors[color];\n  let width = get_line_width(style);\n\n  if (!set) {\n    if (b.centerline) {\n      b.centerline.destroy();\n      b.centerline = null;\n    }\n  } else if (!b.centerline) {\n    let points;\n    let cp = cell_size / 2;\n    let bw = b.bwidth / 2;\n    let bh = b.bheight / 2;\n    if (b.btype2 === b_top || b.btype2 === b_bottom) {\n      if (b.btype2 === b_top && m.y <= grid_top) return;\n      if (b.btype2 === b_bottom && m.y >= grid_top + grid_h - 1) return;\n      points = [0, -cp, 0, cp];\n    } else {\n      if (b.btype2 === b_left && m.x <= grid_left) return;\n      if (b.btype2 === b_right && m.x >= grid_left + grid_w - 1) return;\n      points = [-cp, 0, cp, 0];\n    }\n\n    let cline = new Line({\n      x: bw,\n      y: bh,\n      points: points,\n      strokeWidth: width,\n      stroke: c,\n      lineCap: \"round\",\n      listening: false,\n    });\n    b.centerline = cline;\n    b.add(cline);\n  }\n}\n\nfunction centerLineToggle(x, y, i, style, color) {\n  let m = get(x, y);\n  let b = m.boundary[i];\n  let set;\n\n  if (last_toggle_state === null) {\n    if (b.centerline) last_toggle_state = true;\n    else last_toggle_state = false;\n  }\n  set = !last_toggle_state;\n\n  drawCenterLine(x, y, i, set, style, color);\n}\n\nlet last_toggle = { x: -1, y: -1, i: -1 };\n\nfunction hasCross(x, y) {\n  let m = get(x, y);\n  return !!m.cross;\n}\n\nfunction drawCross(x, y, set) {\n  let m = get(x, y);\n  if (set) {\n    if (!m.cross) {\n      m.cross = new Group();\n      m.add(m.cross);\n      DrawSymbol(m.cross, \"#44\", sol_text_color, cell_size);\n    }\n  } else {\n    if (m.cross) {\n      m.cross.destroy();\n      m.cross = null;\n    }\n  }\n}\n\nfunction hasEdgeCross(x, y, i) {\n  let b = get(x, y).boundary[i];\n  return !!b.cross;\n}\n\nfunction drawEdgeCross(x, y, i, set) {\n  let b = get(x, y).boundary[i];\n  if (set) {\n    if (!b.cross) {\n      b.cross = new Group();\n      b.add(b.cross);\n      DrawSymbol(b.cross, \"#44\", sol_text_color, [b.bwidth, b.bheight]);\n    }\n  } else if (b.cross) {\n    b.cross.destroy();\n    b.cross = null;\n  }\n}\n\nfunction edgeMousemove(event, x, y, i) {\n  if (!drag) return;\n  if (last_toggle.x === x && last_toggle.y === y && last_toggle.i === i) return;\n  last_toggle = { x: x, y: y, i: i };\n\n  saveUndo();\n\n  if (drag_button === 2 && current_rmode === \"edgecross\") {\n    if (i !== undefined) {\n      drawEdgeCross(x, y, i, drag_toggle);\n      scene.draw();\n    }\n    return;\n  }\n\n  unmark();\n\n  if (current_mode === \"edge\") {\n    edgeToggle(x, y, i, current_style, current_color);\n  } else {\n    centerLineToggle(x, y, i, current_style, current_color);\n  }\n  scene.draw();\n}\n\nlet last_move = [-1, -1];\n\nfunction mousemove(event, x, y) {\n  if (x === last_move[0] && y === last_move[1]) return;\n\n  last_move[0] = x;\n  last_move[1] = y;\n\n  if (!drag) return;\n\n  if (drag_button === 2 && current_rmode === \"edgecross\") return;\n\n  if (drag_button === 2 && current_rmode === \"cross\") {\n    drawCross(x, y, drag_toggle);\n    scene.draw();\n    return;\n  }\n\n  if (\n    current_mode === \"path\" ||\n    current_mode === \"edge\" ||\n    current_mode === \"centerline\"\n  ) {\n  } else if (current_mode === \"cage\") {\n    if (current.cells.length > 0) {\n      let l = last(current.cells);\n      if (l[0] === x && l[1] === y) return;\n    }\n    if (current.objs) current.objs.forEach((o) => o.destroy());\n    current.cells.push([x, y]);\n    current.objs = DrawCage(ctx, current.cells, current_style, current_color);\n  } else {\n    mark(x, y);\n  }\n\n  scene.draw();\n}\n\nfunction mark_boundary(x, y, i) {\n  unmark();\n\n  let b = get(x, y).boundary[i];\n  if (!b.rect) {\n    b.rect = new Rect({\n      width: b.bwidth,\n      height: b.bheight,\n      fillEnabled: false,\n    });\n    b.add(b.rect);\n  }\n  b.rect.stroke(\"red\");\n  b.rect.strokeWidth(1);\n  boundary = [x, y, i];\n}\n\nfunction unmark() {\n  if (boundary) {\n    let r = get(...boundary).rect;\n    if (r) r.strokeWidth(0);\n    boundary = null;\n  }\n  each_mark((m) => {\n    m.rect.fill(null);\n    m.mark = false;\n  });\n  cursor = null;\n}\n\nfunction boundary_mousedown(event, x, y, i) {\n  mark_boundary(x, y, i);\n  scene.draw();\n}\n\nfunction contextmenu(event) {\n  if (event.target.tagName === \"CANVAS\") event.preventDefault();\n}\n\nfunction window_mousedown(event) {\n  if (event.target.tagName === \"HTML\") {\n    unmark();\n    scene.draw();\n  }\n  last_move = [-1, -1];\n}\n\nfunction mousedown(event, x, y, i) {\n  event.evt.stopPropagation();\n\n  drag = true;\n  if (event.evt.type === \"touchstart\") drag_button = 0;\n  else drag_button = event.evt.button;\n\n  if (event.evt.button === 2 && current_rmode === \"edgecross\") {\n    if (i !== undefined) {\n      drag_toggle = !hasEdgeCross(x, y, i);\n      saveUndo();\n      drawEdgeCross(x, y, i, drag_toggle);\n      scene.draw();\n    }\n    return;\n  }\n\n  if (event.evt.button === 2 && current_rmode === \"cross\") {\n    drag_toggle = !hasCross(x, y);\n    saveUndo();\n    drawCross(x, y, drag_toggle);\n    scene.draw();\n    return;\n  }\n\n  if (!shift) {\n    unmark();\n  }\n\n  if (boundary) {\n    get(...boundary).strokeWidth(0);\n    boundary = null;\n  }\n\n  if (current_mode === \"path\") {\n    current = { cells: [[x, y]], color: current_color };\n    current.objs = DrawPath(ctx, current.cells, current_style, current_color);\n  } else if (current_mode === \"cage\") {\n    current = { cells: [[x, y]], color: current_color };\n    current.objs = DrawCage(ctx, current.cells, current_style, current_color);\n  } else if (current_mode === \"edge\" && i !== undefined) {\n    saveUndo();\n    edgeToggle(x, y, i, current_style, current_color);\n  } else if (current_mode === \"centerline\" && i !== undefined) {\n    saveUndo();\n    centerLineToggle(x, y, i, current_style, current_color);\n  } else {\n    mark(x, y);\n  }\n\n  scene.draw();\n}\n\nfunction edgeMouseup(event, x, y, i) {\n  if (event.evt.button === 2) return;\n  if (last_toggle_state === null && current_mode === \"edge\") {\n    edgeToggle(x, y, i, current_style, current_color);\n  }\n}\n\nfunction mouseup() {\n  drag = false;\n  last_toggle_state = null;\n\n  if (current_mode === \"path\" && current) {\n    stuff.push({\n      type: type_path,\n      style: current_style,\n      cells: current.cells,\n      objs: current.objs,\n      color: current_color,\n    });\n    cursor = last(current.cells);\n    current = null;\n  } else if (current_mode === \"cage\" && current) {\n    stuff.push({\n      type: type_cage,\n      style: current_style,\n      cells: current.cells,\n      objs: current.objs,\n      color: current_color,\n    });\n    cursor = last(current.cells);\n    current = null;\n  }\n}\n\nexport function DrawSetMode(state) {\n  current_mode = state.mode;\n  number_bg = state.numberBackground;\n  multi_digit = state.multiDigit;\n\n  each_cell((m) =>\n    m.boundary.forEach((b) => {\n      if (b.rect) {\n        b.rect.destroy();\n        b.rect = null;\n      }\n    })\n  );\n\n  cursor_visible = false;\n\n  if (state.mode === \"cage\") current_style = state.cageStyle;\n  else if (state.mode === \"path\") current_style = state.pathStyle;\n  else if (state.mode === \"edge\") current_style = state.edgeStyle;\n  else if (state.mode === \"edgecross\") {\n    current_mode = \"edge\";\n    current_style = \"fat\";\n    current_color = undefined;\n    current_rmode = \"edgecross\";\n  } else if (state.mode === \"centerline\") {\n    current_mode = \"centerline\";\n    current_style = \"fat\";\n    current_color = undefined;\n    current_rmode = \"edgecross\";\n  } else if (\n    (state.mode === \"normal\" || state.mode === \"number\") &&\n    state.numberStyle === \"normal\"\n  ) {\n    current_mode = \"normal\";\n    cursor_visible = true;\n  } else cursor_visible = true;\n\n  if (!cursor_visible) unmark();\n\n  if (current_mode === \"edge\" || current_mode === \"centerline\") {\n    each_cell((m) =>\n      m.boundary.forEach((b, i) => {\n        if (b.btype === b_edge) {\n          if (!b.rect) {\n            b.rect = new Rect({\n              width: b.bwidth,\n              height: b.bheight,\n              fill: null,\n              fillEnabled: false,\n            });\n            b.add(b.rect);\n          }\n          b.rect.fillEnabled(true);\n          b.rect.on(\"mousemove touchmove\", (event) =>\n            edgeMousemove(event, m.x, m.y, i)\n          );\n          b.rect.on(\"mousedown tap touchstart\", (event) =>\n            mousedown(event, m.x, m.y, i)\n          );\n          b.rect.on(\"mouseup touchend\", (event) =>\n            edgeMouseup(event, m.x, m.y, i)\n          );\n        }\n      })\n    );\n  }\n\n  let setBoundary = (type) => {\n    each_cell((m) =>\n      m.boundary.forEach((b, i) => {\n        if (b.btype === type) {\n          if (!b.rect) {\n            b.rect = new Rect({\n              width: b.bwidth,\n              height: b.bheight,\n              fill: null,\n              fillEnabled: true,\n            });\n            b.add(b.rect);\n          }\n          b.rect.on(\"mousedown touchstart tap\", (event) =>\n            boundary_mousedown(event, m.x, m.y, i)\n          );\n        }\n      })\n    );\n  };\n\n  if (state.mode === \"number\" && state.numberStyle === \"corner\") {\n    current_mode = \"boundary\";\n    setBoundary(b_corner);\n  }\n  if (state.mode === \"number\" && state.numberStyle === \"side\") {\n    current_mode = \"boundary\";\n    setBoundary(b_side);\n  }\n  if (state.mode === \"number\" && state.numberStyle === \"quarter\") {\n    current_mode = \"boundary\";\n    setBoundary(b_quarter);\n  }\n  if (state.mode === \"number\" && state.numberStyle === \"boundary\") {\n    current_mode = \"boundary\";\n    setBoundary(b_boundary);\n  }\n  scene.draw();\n}\n\nfunction each_cell(f) {\n  for (let x = 0; x < grid_w; ++x) {\n    for (let y = 0; y < grid_h; ++y) {\n      let m = get(x, y);\n      f(m);\n    }\n  }\n}\n\nfunction each_mark(f) {\n  for (let x = 0; x < grid_w; ++x) {\n    for (let y = 0; y < grid_h; ++y) {\n      let m = get(x, y);\n      if (m.mark) f(m);\n    }\n  }\n}\n\nfunction unserialize_grid(s) {\n  [\n    cell_size,\n    grid_w,\n    grid_h,\n    grid_left,\n    grid_right,\n    grid_top,\n    grid_bottom,\n    grid_div_width,\n    grid_div_height,\n    grid_style,\n    grid_left_diagonal,\n    grid_right_diagonal,\n  ] = s;\n}\n\nfunction load_grid(base64) {\n  let pack = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n  let unpack = pako.inflate(pack);\n  let data = msgpack.decode(unpack);\n\n  if (data.version !== 1) {\n    alert(\"Bad version\");\n  }\n\n  unserialize_grid(data.grid);\n}\n\nfunction unserialize(data) {\n  stuff = [];\n  each_cell((m) => {\n    m.lock_type = 0;\n    m.normal.text.text(\"\");\n    m.center.text.text(\"\");\n  });\n\n  if (data.edges) {\n    for (const k in data.edges) {\n      let pos = k.split(\",\").map((x) => +x);\n      let [style, color] = data.edges[k];\n      edgeToggle(...pos, style, color, true);\n    }\n  }\n\n  data.cells.forEach((c) => {\n    let [pos, type, text, color] = c;\n    if (type === lock_normal) {\n      lock_cell(pos, \"normal\", color, text);\n    } else if (type === lock_color) {\n      lock_cell(pos, \"color\", color, text);\n    } else if (type === lock_boundary) {\n      lock_cell(pos, \"boundary\", color, text);\n    }\n  });\n  data.stuff.forEach((_s) => {\n    let s = { type: _s[0], style: _s[1], color: _s[2], cells: _s[3] };\n    if (s.type === type_path) {\n      s.objs = DrawPath(ctx, s.cells, s.style, s.color);\n    } else if (s.type === type_cage) {\n      s.objs = DrawCage(ctx, s.cells, s.style, s.color);\n    }\n    stuff.push(s);\n  });\n}\n\nfunction load(base64) {\n  let pack = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n  let unpack = pako.inflate(pack);\n  let data = msgpack.decode(unpack);\n\n  unserialize(data);\n}\n\nexport function DrawGetMetaData(base64) {\n  let pack = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n  let unpack = pako.inflate(pack);\n  let data = msgpack.decode(unpack);\n\n  return data.desc;\n}\n\nfunction serialize(meta) {\n  let out = {\n    version: 1,\n    grid: [\n      cell_size,\n      grid_w,\n      grid_h,\n      grid_left,\n      grid_right,\n      grid_top,\n      grid_bottom,\n      grid_div_width,\n      grid_div_height,\n      grid_style,\n      grid_left_diagonal,\n      grid_right_diagonal,\n    ],\n    cells: [],\n    stuff: stuff.map((e) => [e.type, e.style, e.color, e.cells]),\n    edges: edges,\n    desc: meta,\n  };\n\n  each_cell((m) => {\n    let pos = [m.x, m.y];\n    if (m.lock_type === lock_normal) {\n      if (m.normal.text.text() !== \"\")\n        out.cells.push([pos, m.lock_type, m.normal.text.text(), m.color]);\n      if (m.symcont.symboltext !== \"\" && m.symcont.symboltext !== undefined)\n        out.cells.push([\n          pos,\n          m.lock_type,\n          m.symcont.symboltext,\n          m.symcont.symbolcolor,\n        ]);\n    }\n    if (m.fill >= 0) {\n      out.cells.push([pos, lock_color, null, m.fill]);\n    }\n    m.boundary.forEach((b, i) => {\n      if (b.symboltext)\n        out.cells.push([\n          [m.x, m.y, i],\n          lock_boundary,\n          b.symboltext,\n          b.symbolcolor,\n        ]);\n    });\n  });\n\n  console.log(out);\n  return out;\n}\n\nexport function DrawGenerateUrl(meta) {\n  let out = serialize(meta);\n  let coded = msgpack.encode(out);\n  let packed = pako.deflate(coded);\n  let base64 = btoa(String.fromCharCode(...packed));\n  return window.location.origin + \"/?s=1&p=\" + encodeURIComponent(base64);\n}\n\nexport function DrawCheck() {\n  if (main_w !== 9 || main_h !== 9) return [false, \"Not sudoku\"];\n  let r = range(1, 10);\n  let rows = Array.from({ length: 9 }, () => []);\n  let columns = Array.from({ length: 9 }, () => []);\n  let boxes = Array.from({ length: 9 }, () => []);\n  let missing = null;\n  each_cell((m) => {\n    let x = m.x - grid_left;\n    let y = m.y - grid_top;\n    let n = +m.normal.text.text();\n    if (n === 0 && missing === null) {\n      missing = `Missing entry at ${x + 1}, ${y + 1}`;\n    }\n    columns[x].push(n);\n    rows[y].push(n);\n    let b = Math.floor(x / 3) + Math.floor(y / 3) * 3;\n    boxes[b].push(n);\n  });\n  if (missing) {\n    return [false, missing];\n  }\n  for (let i = 0; i < 9; ++i) {\n    if (!isEqual(rows[i].sort(), r)) {\n      return [false, `Bad row ${i + 1}`];\n    }\n    if (!isEqual(columns[i].sort(), r)) {\n      return [false, `Bad column ${i + 1}`];\n    }\n    if (!isEqual(boxes[i].sort(), r)) {\n      return [false, `Bad box ${i + 1}`];\n    }\n  }\n  return [true, \"OK\"];\n}\n\nexport function DrawDelete() {\n  if (!solve_mode && cursor) {\n    let i = findLastIndex(stuff, (s) =>\n      s.cells.find((c) => c[0] === cursor[0] && c[1] === cursor[1])\n    );\n    if (i === -1) {\n      each_mark((m) => {\n        if (i !== -1) return;\n        i = findLastIndex(stuff, (s) =>\n          s.cells.find((c) => c[0] === m.x && c[1] === m.y)\n        );\n      });\n    }\n    if (i !== -1) {\n      stuff[i].objs.forEach((o) => o.destroy());\n      stuff.splice(i, 1);\n      scene.draw();\n      return;\n    }\n  }\n\n  saveUndo();\n\n  if (boundary) {\n    setCell(boundary, \"boundary\", null, \"\");\n  } else {\n    each_mark((m) => {\n      setCell([m.x, m.y], \"reset\", null, \"\");\n    });\n  }\n\n  scene.draw();\n}\n\nexport function DrawReset() {\n  each_cell((m) => {\n    setCell([m.x, m.y], \"reset\", null, \"\");\n  });\n\n  if (!solve_mode) {\n    stuff.forEach((s) => s.objs.forEach((o) => o.destroy()));\n    stuff = [];\n  }\n\n  undo_stack = [];\n  redo_stack = [];\n\n  scene.draw();\n}\n\nexport function DrawUndo() {\n  if (undo_stack.length === 0) return;\n  let state = saveState();\n  redo_stack.push(state);\n  state = undo_stack.pop();\n  loadState(state);\n  scene.draw();\n}\n\nexport function DrawRedo() {\n  if (redo_stack.length === 0) return;\n  let state = saveState();\n  undo_stack.push(state);\n  state = redo_stack.pop();\n  loadState(state);\n  scene.draw();\n}\n\nfunction addGrid(layer) {\n  let dash = grid_style === \"dash\" ? [4] : null;\n  let dots = grid_style === \"dots\";\n\n  let thin = {\n    stroke: \"black\",\n    strokeWidth: cell_size * thin_grid_line,\n    dash: dash,\n  };\n  let fat = {\n    stroke: \"black\",\n    strokeWidth: cell_size * medium_grid_line,\n  };\n\n  grid_lines.forEach((g) => g.destroy());\n\n  main_w = grid_w - grid_left - grid_right;\n  main_h = grid_h - grid_top - grid_bottom;\n\n  grid_lines = [];\n  if (grid_left_diagonal || grid_right_diagonal) {\n    let diagonal = {\n      stroke: DrawColors[1],\n      strokeWidth: cell_size * medium_grid_line,\n    };\n    if (grid_left_diagonal)\n      grid_lines.push(\n        new Line({\n          points: [\n            grid_left * cell_size,\n            grid_top * cell_size,\n            (grid_left + main_w) * cell_size,\n            (grid_top + main_h) * cell_size,\n          ],\n          ...diagonal,\n        })\n      );\n    if (grid_right_diagonal)\n      grid_lines.push(\n        new Line({\n          points: [\n            (grid_w - grid_right) * cell_size,\n            grid_top * cell_size,\n            grid_left * cell_size,\n            (grid_top + main_h) * cell_size,\n          ],\n          ...diagonal,\n        })\n      );\n  }\n\n  if (dots) {\n    let dsize = cell_size * 0.07;\n    for (let y = 0; y <= main_h; ++y) {\n      for (let x = 0; x <= main_w; ++x) {\n        grid_lines.push(\n          new Circle({\n            x: (grid_left + x) * cell_size,\n            y: (grid_top + y) * cell_size,\n            radius: dsize,\n            fill: \"black\",\n          })\n        );\n      }\n    }\n  } else {\n    for (let x = 0; x <= main_w; ++x) {\n      grid_lines.push(\n        new Line({\n          x: (grid_left + x) * cell_size,\n          y: grid_top * cell_size,\n          points: [0, 0, 0, main_h * cell_size],\n          ...(x % grid_div_width === 0 ? fat : thin),\n        })\n      );\n    }\n    for (let y = 0; y <= main_h; ++y) {\n      grid_lines.push(\n        new Line({\n          x: grid_left * cell_size,\n          y: (grid_top + y) * cell_size,\n          points: [0, 0, main_w * cell_size, 0],\n          ...(y % grid_div_height === 0 ? fat : thin),\n        })\n      );\n    }\n\n    grid_lines.push(\n      new Rect({\n        x: grid_left * cell_size,\n        y: grid_top * cell_size,\n        width: main_w * cell_size,\n        height: main_h * cell_size,\n        stroke: \"black\",\n        strokeWidth: cell_size * medium_grid_line,\n        fillEnabled: false,\n      })\n    );\n  }\n\n  layer.add(...grid_lines);\n}\n\nfunction addBoundaries(x, y, boundary) {\n  const bc = cell_size * 0.03;\n  const cs = cell_size;\n  const bsize = cell_size * 0.3;\n\n  let i = 0;\n  const addBoundary = (x, y, size, type, type2) => {\n    let b = new Group({ x: x, y: y });\n    let w = size;\n    let h = size;\n    let s = size;\n    if (Array.isArray(size)) {\n      w = size[0];\n      h = size[1];\n      s = Math.min(size[0], size[1]);\n    }\n    b.rect = null;\n    b.index = i++;\n    b.bsize = s;\n    b.bwidth = w;\n    b.bheight = h;\n    b.btype = type;\n    b.btype2 = type2;\n    boundary.push(b);\n  };\n\n  // Corners\n  addBoundary(bc, bc, bsize, b_corner);\n  addBoundary(cs - bsize - bc, bc, bsize, b_corner);\n  addBoundary(bc, cs - bsize - bc, bsize, b_corner);\n  addBoundary(cs - bsize - bc, cs - bsize - bc, bsize, b_corner);\n\n  // Sides\n  addBoundary(bc, cs / 2 - bsize / 2, bsize, b_side);\n  addBoundary(cs / 2 - bsize / 2, bc, bsize, b_side);\n  addBoundary(cs - bsize - bc, cs / 2 - bsize / 2, bsize, b_side);\n  addBoundary(cs / 2 - bsize / 2, cs - bsize - bc, bsize, b_side);\n\n  // Quarter\n  const qsize = cell_size * 0.4;\n  const qc = cell_size * 0.05;\n  addBoundary(qc, qc, qsize, b_quarter);\n  addBoundary(cs - qsize - qc, qc, qsize, b_quarter);\n  addBoundary(qc, cs - qsize - qc, qsize, b_quarter);\n  addBoundary(cs - qsize - qc, cs - qsize - qc, qsize, b_quarter);\n\n  // Edges\n  const ew = cell_size * 0.3;\n  const eh = cell_size * 0.7;\n  const eo = ew / 2;\n  addBoundary(-eo, eo, [ew, eh], b_edge, b_left);\n  addBoundary(eo, -eo, [eh, ew], b_edge, b_top);\n  if (x === grid_w - grid_right - 1)\n    addBoundary(cs - eo, eo, [ew, eh], b_edge, b_right);\n  if (y === grid_h - grid_bottom - 1)\n    addBoundary(eo, cs - eo, [eh, ew], b_edge, b_bottom);\n\n  // Boundaries\n  addBoundary(-bsize / 2, -bsize / 2, bsize, b_boundary);\n  addBoundary(-bsize / 2, cs / 2 - bsize / 2, bsize, b_boundary);\n  addBoundary(cs / 2 - bsize / 2, -bsize / 2, bsize, b_boundary);\n  if (x === grid_w - grid_right - 1) {\n    addBoundary(cs - bsize / 2, -bsize / 2, bsize, b_boundary);\n    addBoundary(cs - bsize / 2, cs / 2 - bsize / 2, bsize, b_boundary);\n  }\n  if (y === grid_h - grid_bottom - 1) {\n    addBoundary(-bsize / 2, cs - bsize / 2, bsize, b_boundary);\n    addBoundary(cs / 2 - bsize / 2, cs - bsize / 2, bsize, b_boundary);\n    addBoundary(cs - bsize / 2, cs - bsize / 2, bsize, b_boundary);\n  }\n}\n\nfunction render(wrapper) {\n  hover_offset = cell_size * 0.2;\n\n  const margin = cell_size * 0.2;\n  const stage_w = grid_w * cell_size + margin * 2;\n  const stage_h = grid_h * cell_size + margin * 2;\n  let stage = new Stage({\n    container: wrapper,\n    width: stage_w,\n    height: stage_h,\n  });\n  scene = new Layer();\n  stage.add(scene);\n\n  reset();\n\n  outer = new Group({ x: margin, y: margin });\n  scene.add(outer);\n\n  underlay = new Group();\n  let underlay2 = new Group();\n  let gridlayer = new Group();\n  let overlay = new Group();\n  outer.add(underlay2, underlay, gridlayer, overlay);\n\n  for (let y = 0; y < grid_h; ++y) {\n    matrix[y] = [];\n  }\n  let cs = cell_size;\n\n  for (let x = 0; x < grid_w; ++x) {\n    for (let y = 0; y < grid_h; ++y) {\n      let xp = x * cs;\n      let yp = y * cs;\n      let main_grid =\n        x >= grid_left &&\n        y >= grid_top &&\n        x < grid_w - grid_right &&\n        y < grid_h - grid_bottom;\n      let ocont = new Group({ x: xp, y: yp });\n      let cont = new Group({ x: xp, y: yp });\n      let symcont = new Group();\n      let r = new Rect({\n        width: cs,\n        height: cs,\n        strokeWidth: 0,\n        fillEnabled: true,\n      });\n      let r_color = new Group();\n      r_color.rect = new RectHolder(r_color, cs, cs);\n      let r_color_set = new Group();\n      r_color_set.rect = new RectHolder(r_color_set, cs, cs);\n      let r_inner = new Rect({\n        x: hover_offset,\n        y: hover_offset,\n        width: cs - hover_offset * 2,\n        height: cs - hover_offset * 2,\n        fillEnabled: true,\n      });\n      let normal = new Group();\n      normal.text = new TextHolder(normal, sol_text_color, cs * 0.7, cs);\n      let center = new Group();\n      center.text = new TextHolder(center, sol_text_color, cs * 0.3, cs);\n      let corner_pos = [];\n      let corner_size = cell_size * 0.2;\n      corner_offset = cell_size * 0;\n      corner_pos[0] = [0, 0];\n      corner_pos[1] = [cs - corner_size, 0];\n      corner_pos[2] = [cs - corner_size, cs - corner_size];\n      corner_pos[3] = [0, cs - corner_size];\n      corner_pos[4] = [(cs - corner_size) / 2, 0];\n      corner_pos[5] = [cs - corner_size, (cs - corner_size) / 2];\n      corner_pos[6] = [(cs - corner_size) / 2, cs - corner_size];\n      corner_pos[7] = [0, (cs - corner_size) / 2];\n\n      let corner = [];\n      let boundary = [];\n      if (main_grid) {\n        corner_pos.forEach((p, i) => {\n          let g = new Group({ x: p[0], y: p[1] });\n          g.text = new TextHolder(g, sol_text_color, cs * 0.2, cs * 0.2);\n          corner.push(g);\n        });\n      }\n      addBoundaries(x, y, boundary);\n\n      cont.add(r_color_set, r_color, r, r_inner, symcont, normal, center);\n      cont.on(\"mousedown touchstart tap\", (event) => mousedown(event, x, y));\n      cont.on(\"mousemove touchmove\", (event) => mousemove(event, x, y));\n      r_inner.on(\"mousemove touchmove\", (event) =>\n        inner_mousemove(event, x, y)\n      );\n      matrix[y][x] = {\n        x: x,\n        y: y,\n        pos: [xp, yp],\n        symcont: symcont,\n        cont: cont,\n        ocont: ocont,\n        rect: r,\n        boundary: boundary,\n        fill: -1,\n        color: null,\n        normal: normal,\n        center: center,\n        corner: corner,\n        corner_pos: corner_pos,\n        r_color_set: r_color_set,\n        r_color: r_color,\n        main_grid: main_grid,\n      };\n      underlay.add(cont);\n      if (main_grid) ocont.add(...corner);\n      ocont.add(...boundary);\n      overlay.add(ocont);\n    }\n  }\n\n  addGrid(gridlayer);\n\n  ctx.scene = scene;\n  ctx.underlay = underlay;\n  ctx.underlay2 = underlay2;\n  ctx.overlay = overlay;\n  ctx.cell_size = cell_size;\n  ctx.corner_offset = corner_offset;\n  ctx.each_cell = each_cell;\n  ctx.get_line_width = get_line_width;\n  ctx.get = get;\n}\n\nexport function DrawUpdateGrid(wrapper, state) {\n  let s = serialize();\n  if (\"cellSize\" in state) cell_size = state.cellSize;\n  if (\"gridDivWidth\" in state) grid_div_width = state.gridDivWidth;\n  if (\"gridDivHeight\" in state) grid_div_height = state.gridDivHeight;\n  if (\"gridStyle\" in state) grid_style = state.gridStyle;\n  if (\"gridLeftDiagonal\" in state) grid_left_diagonal = state.gridLeftDiagonal;\n  if (\"gridRightDiagonal\" in state)\n    grid_right_diagonal = state.gridRightDiagonal;\n  render(wrapper);\n  unserialize(s);\n  scene.draw();\n}\n\nexport function DrawRender(code, wrapper, state) {\n  solve_mode = state.solveMode;\n  cell_size = state.cellSize;\n  grid_left = state.left;\n  grid_right = state.right;\n  grid_top = state.top;\n  grid_bottom = state.bottom;\n  grid_w = grid_left + state.width + grid_right;\n  grid_h = grid_top + state.height + grid_bottom;\n  grid_div_width = state.gridDivWidth;\n  grid_div_height = state.gridDivHeight;\n  grid_style = state.gridStyle;\n  grid_left_diagonal = state.gridLeftDiagonal;\n  grid_right_diagonal = state.gridRightDiagonal;\n\n  if (code) load_grid(code);\n\n  render(wrapper);\n\n  if (code) load(code);\n\n  scene.draw();\n\n  DrawSetMode(state);\n}\n\nwindow.addEventListener(\"keydown\", (event) => keydown(event));\nwindow.addEventListener(\"keyup\", (event) => keyup(event));\nwindow.addEventListener(\"mousedown\", (event) => window_mousedown(event));\nwindow.addEventListener(\"mouseup\", (event) => mouseup(event));\nwindow.addEventListener(\"touchend\", (event) => mouseup(event));\nwindow.addEventListener(\"contextmenu\", (event) => contextmenu(event));\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  DrawRender,\n  DrawSymbolElement,\n  DrawSetMode,\n  DrawUndo,\n  DrawRedo,\n  DrawDelete,\n  DrawGenerateUrl,\n  DrawSetNumber,\n  DrawSetColor,\n  DrawColors,\n  DrawGetMetaData,\n  DrawReset,\n  DrawCheck,\n  DrawSetSymbolPage,\n  DrawUpdateGrid,\n} from \"./draw\";\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Slider,\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  FormGroup,\n  FormLabel,\n  FormControlLabel,\n  InputLabel,\n  Grid,\n  TextField,\n  Switch,\n} from \"@material-ui/core\";\nimport { ConfirmProvider, useConfirm } from \"material-ui-confirm\";\nimport { PlayArrow, Pause, SkipPrevious } from \"@material-ui/icons\";\n\nconst query = window.location.search;\nconst urlParams = new URLSearchParams(query);\nconst code = urlParams.get(\"p\");\nconst solveMode = urlParams.get(\"s\") === \"1\";\n\nfunction ColorGrid(props) {\n  return DrawColors.slice(0, props.num).map((color, index) => (\n    <Grid key={index} item xs={4}>\n      <Button variant=\"outlined\" onClick={() => DrawSetColor(index)}>\n        <div\n          style={{\n            border: \"1px solid black\",\n            background: color,\n            width: \"30px\",\n            height: \"30px\",\n          }}\n        />\n      </Button>\n    </Grid>\n  ));\n}\n\nfunction Timer(props) {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (props.active) {\n        setSeconds((s) => s + 1);\n      }\n    }, 1000);\n    return () => clearInterval(id);\n  }, [props.active]);\n\n  const restart = () => {\n    props.onStop();\n    setSeconds(0);\n  };\n\n  return (\n    <Box margin=\"20px\" padding=\"10px\" boxShadow={3}>\n      <Typography align=\"center\" variant=\"h4\">\n        {new Date(seconds * 1000).toISOString().substr(11, 8)}\n      </Typography>\n      <ButtonGroup fullWidth={true} size=\"large\">\n        <Button onClick={props.onStart}>\n          <PlayArrow />\n        </Button>\n        <Button onClick={props.onStop}>\n          <Pause />\n        </Button>\n        <Button onClick={restart}>\n          <SkipPrevious />\n        </Button>\n      </ButtonGroup>\n    </Box>\n  );\n}\n\nfunction ResetButton() {\n  const confirm = useConfirm();\n\n  const onClick = () => {\n    confirm({ description: \"Remove all changes in grid?\" })\n      .then(() => {\n        DrawReset();\n        this.setState({ timeStatus: true });\n      })\n      .catch(() => null);\n  };\n\n  return (\n    <Button fullWidth={true} variant=\"contained\" size=\"large\" onClick={onClick}>\n      Reset\n    </Button>\n  );\n}\n\nfunction SymbolSelect() {\n  let [page, setPage] = useState(\"0\");\n  let symbolRef = [];\n  symbolRef[0] = useRef(null);\n  symbolRef[1] = useRef(null);\n  symbolRef[2] = useRef(null);\n  symbolRef[3] = useRef(null);\n  symbolRef[4] = useRef(null);\n  symbolRef[5] = useRef(null);\n  symbolRef[6] = useRef(null);\n  symbolRef[7] = useRef(null);\n  symbolRef[8] = useRef(null);\n  symbolRef[9] = useRef(null);\n\n  const pages = [\"Numbers\", \"Circles\", \"Arrows\", \"Arrows 2\", \"Misc\"];\n  const setSymbolPage = (e) => setPage(e.target.value);\n\n  useEffect(() => {\n    if (+page > 0) {\n      for (let i = 0; i < 9; ++i) {\n        DrawSymbolElement(symbolRef[i].current, page, i + 1, 30);\n      }\n    }\n    DrawSetSymbolPage(+page);\n  });\n\n  return (\n    <Box>\n      <FormControl fullWidth={true}>\n        <Select fullWidth={true} value={page} onChange={setSymbolPage}>\n          {pages.map((p, i) => (\n            <MenuItem key={p} value={i}>\n              {p}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <Grid container>\n        {[...Array(9).keys()].map((index) => (\n          <Grid key={index} item xs={4}>\n            <Button variant=\"outlined\" onClick={() => DrawSetNumber(index + 1)}>\n              {+page === 0 && (\n                <div style={{ fontSize: \"20px\" }}>{index + 1}</div>\n              )}\n              {+page > 0 && <div ref={symbolRef[index]} />}\n            </Button>\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n\nfunction ColorSelect() {\n  let [color, setColor] = useState(0);\n\n  return DrawColors.map((c, index) => (\n    <Grid key={index} item xs={4}>\n      <Button\n        variant={color === index ? \"contained\" : \"outlined\"}\n        onClick={() => {\n          setColor(index);\n          DrawSetColor(index);\n        }}\n      >\n        <div\n          style={{\n            border: \"1px solid black\",\n            background: c,\n            width: \"30px\",\n            height: \"30px\",\n          }}\n        />\n      </Button>\n    </Grid>\n  ));\n}\n\nfunction UrlDialog(props) {\n  let openInTab = () => {\n    props.onClose();\n    let w = window.open(props.text, \"_blank\");\n    w.focus();\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <DialogTitle>URL</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{props.text}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={openInTab}>Open in tab</Button>\n        <Button color=\"primary\" onClick={props.onClose}>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.symbolRef = [];\n    for (let i = 0; i < 9; ++i) this.symbolRef.push(React.createRef());\n\n    this.state = {\n      solveMode: solveMode,\n      settingsMode: \"size\",\n      color: 0,\n      description: \"\",\n      cellSize: 64,\n      width: 9,\n      height: 9,\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      gridDivWidth: 3,\n      gridDivHeight: 3,\n      gridStyle: \"lines\",\n      gridLeftDiagonal: false,\n      gridRightDiagonal: false,\n      mode: solveMode ? \"normal\" : \"number\",\n      numberStyle: \"normal\",\n      multiDigit: false,\n      numberBackground: false,\n      edgeStyle: \"fat\",\n      cageStyle: \"dash\",\n      pathStyle: \"arrow\",\n      dialogOpen: false,\n      dialogText: \"\",\n      timeStatus: true,\n      symbolPage: \"0\",\n      solveSudoku: true,\n      solveEdge: false,\n      solveCenterLine: false,\n    };\n  }\n\n  handleKeyDown = (event) => {\n    if (event.target.tagName === \"TEXTAREA\") return;\n\n    if (solveMode) {\n      const cycle_modes = [\"normal\", \"center\", \"corner\", \"color\"];\n      let i = \"qwer\".indexOf(event.key);\n      if (event.key.length === 1 && i !== -1) this.setMode(cycle_modes[i]);\n      else if (event.key === \" \") {\n        let i = cycle_modes.indexOf(this.state.mode);\n        i = (i + 1) % cycle_modes.length;\n        this.setMode(cycle_modes[i]);\n      }\n    }\n  };\n\n  componentDidMount() {\n    let meta = {};\n    if (code) {\n      meta = DrawGetMetaData(code);\n      if (typeof meta !== \"object\") meta = { description: meta };\n    }\n    this.setState(meta, () => {\n      DrawRender(code, this.canvasRef.current, this.state);\n    });\n\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n    clearInterval(this.interval);\n  }\n\n  setMode = (mode) => {\n    let b = document.getElementById(\"button\" + mode);\n    if (b) b.focus();\n    this.setState({ mode: mode }, () => {\n      DrawSetMode(this.state);\n    });\n  };\n\n  setStyle = (style, value) => {\n    this.setState({ [style]: value }, () => DrawSetMode(this.state));\n  };\n\n  generateUrl = () => {\n    let meta = {\n      description: this.state.description,\n      solveSudoku: this.state.solveSudoku,\n      solveEdge: this.state.solveEdge,\n      solveCenterLine: this.state.solveCenterLine,\n    };\n    let url = DrawGenerateUrl(meta);\n    this.setState({ dialogText: url, dialogOpen: true });\n  };\n\n  numberStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"numberstyle-label\">\n            Style\n          </InputLabel>\n          <Select\n            labelId=\"numberstyle-label\"\n            fullWidth={true}\n            value={this.state.numberStyle}\n            onChange={(event) =>\n              this.setStyle(\"numberStyle\", event.target.value)\n            }\n          >\n            <MenuItem value=\"normal\">Normal</MenuItem>\n            <MenuItem value=\"corner\">Corner</MenuItem>\n            <MenuItem value=\"side\">Side</MenuItem>\n            <MenuItem value=\"quarter\">Quarter</MenuItem>\n            <MenuItem value=\"boundary\">Boundary</MenuItem>\n          </Select>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={this.state.numberBackground}\n                onChange={(e) => {\n                  this.setStyle(\"numberBackground\", e.target.checked);\n                }}\n              />\n            }\n            label=\"Background\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={this.state.multiDigit}\n                onChange={(e) => {\n                  this.setStyle(\"multiDigit\", e.target.checked);\n                }}\n              />\n            }\n            label=\"Multi digit\"\n          />\n        </FormControl>\n      </Box>\n    );\n  }\n\n  cageStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"cagestyle-label\">\n            Style\n          </InputLabel>\n          <Select\n            labelId=\"cagestyle-label\"\n            fullWidth={true}\n            value={this.state.cageStyle}\n            onChange={(event) => this.setStyle(\"cageStyle\", event.target.value)}\n          >\n            <MenuItem value=\"dash\">Dashed</MenuItem>\n            <MenuItem value=\"edge:thin\">Edge thin</MenuItem>\n            <MenuItem value=\"edge:medium\">Edge medium </MenuItem>\n            <MenuItem value=\"edge:fat\">Edge fat</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  edgeStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"edgestyle-label\">\n            Style\n          </InputLabel>\n          <Select\n            labelId=\"cagestyle-label\"\n            fullWidth={true}\n            value={this.state.edgeStyle}\n            onChange={(event) => this.setStyle(\"edgeStyle\", event.target.value)}\n          >\n            <MenuItem value=\"thin\">Thin</MenuItem>\n            <MenuItem value=\"medium\">Medium</MenuItem>\n            <MenuItem value=\"fat\">Fat</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  pathStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"pathstyle-label\">\n            Style\n          </InputLabel>\n          <Select\n            labelId=\"pathstyle-label\"\n            fullWidth={true}\n            value={this.state.pathStyle}\n            onChange={(event) => this.setStyle(\"pathStyle\", event.target.value)}\n          >\n            <MenuItem value=\"thin\">Line</MenuItem>\n            <MenuItem value=\"medium\">Medium line</MenuItem>\n            <MenuItem value=\"fat\">Fat Line</MenuItem>\n            <MenuItem value=\"thermo\">Thermo</MenuItem>\n            <MenuItem value=\"arrow\">Arrow</MenuItem>\n            <MenuItem value=\"arrowcircle\">Arrow with circle</MenuItem>\n            <MenuItem value=\"roundborder\">Round border</MenuItem>\n            <MenuItem value=\"border\">Border</MenuItem>\n            <MenuItem value=\"roundfill\">Round fill</MenuItem>\n            <MenuItem value=\"squarefill\">Square fill</MenuItem>\n            <MenuItem value=\"polygon\">Polygon</MenuItem>\n            <MenuItem value=\"polygonfill\">Polygon fill</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  timerBox() {\n    return (\n      <Box minWidth=\"250px\">\n        <Timer\n          active={this.state.timeStatus}\n          onStart={() => this.setState({ timeStatus: true })}\n          onStop={() => this.setState({ timeStatus: false })}\n        />\n        {this.state.description !== \"\" && (\n          <Box margin=\"20px\">\n            <TextField\n              multiline\n              variant=\"outlined\"\n              InputProps={{ readOnly: true }}\n              value={this.state.description}\n            />\n          </Box>\n        )}\n        <Box margin=\"20px\">\n          <TextField multiline variant=\"outlined\" />\n        </Box>\n      </Box>\n    );\n  }\n\n  settingLeftBox() {\n    return (\n      <Box minWidth=\"250px\">\n        <Box margin=\"30px\">\n          <Select\n            fullWidth={true}\n            value={this.state.mode}\n            onChange={(event) => this.setMode(event.target.value)}\n          >\n            <MenuItem value=\"number\">Number</MenuItem>\n            <MenuItem value=\"cage\">Cage</MenuItem>\n            <MenuItem value=\"path\">Path</MenuItem>\n            <MenuItem value=\"color\">Color</MenuItem>\n            <MenuItem value=\"edge\">Edge</MenuItem>\n          </Select>\n          {this.state.mode === \"number\" && this.numberStyleBox()}\n          {this.state.mode === \"cage\" && this.cageStyleBox()}\n          {this.state.mode === \"path\" && this.pathStyleBox()}\n          {this.state.mode === \"edge\" && this.edgeStyleBox()}\n        </Box>\n        <Box margin=\"30px\">\n          <Select\n            fullWidth={true}\n            value={this.state.settingsMode}\n            onChange={(event) =>\n              this.setState({ settingsMode: event.target.value })\n            }\n          >\n            <MenuItem value=\"size\">Size</MenuItem>\n            <MenuItem value=\"margins\">Margins</MenuItem>\n            <MenuItem value=\"grid\">Grid</MenuItem>\n            <MenuItem value=\"description\">Description</MenuItem>\n            <MenuItem value=\"solve\">Solve</MenuItem>\n          </Select>\n        </Box>\n        {this.state.settingsMode === \"size\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            {this.sizeSlider(\"cellSize\", \"Cell size\", 32, 96, 4, true)}\n            {this.sizeSlider(\"width\", \"Width\", 3, 30)}\n            {this.sizeSlider(\"height\", \"Height\", 3, 30)}\n          </Box>\n        )}\n        {this.state.settingsMode === \"margins\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            {this.sizeSlider(\"left\", \"Left\")}\n            {this.sizeSlider(\"right\", \"Right\")}\n            {this.sizeSlider(\"top\", \"Top\")}\n            {this.sizeSlider(\"bottom\", \"Bottom\")}\n          </Box>\n        )}\n        {this.state.settingsMode === \"grid\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            {this.sizeSlider(\"gridDivWidth\", \"Grid divider width\")}\n            {this.sizeSlider(\"gridDivHeight\", \"Grid divider height\")}\n            <FormControl fullWidth={true}>\n              <InputLabel id=\"gridstyle-label\">Style</InputLabel>\n              <Select\n                labelId=\"gridstyle-label\"\n                fullWidth={true}\n                value={this.state.gridStyle}\n                onChange={(event) =>\n                  this.setGridState(\"gridStyle\", event.target.value)\n                }\n              >\n                <MenuItem value=\"lines\">Lines</MenuItem>\n                <MenuItem value=\"dash\">Dashed</MenuItem>\n                <MenuItem value=\"dots\">Dots</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControl fullWidth={true}>\n              <FormLabel>Diagonals</FormLabel>\n              <FormGroup>\n                <FormControlLabel\n                  fullWidth={true}\n                  control={\n                    <Switch\n                      checked={this.state.gridLeftDiagonal}\n                      onChange={(e) => {\n                        this.setGridState(\"gridLeftDiagonal\", e.target.checked);\n                      }}\n                    />\n                  }\n                  label=\"Left\"\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      labelId=\"rightdiagonal-label\"\n                      fullWidth={true}\n                      checked={this.state.gridRightDiagonal}\n                      onChange={(e) => {\n                        this.setGridState(\n                          \"gridRightDiagonal\",\n                          e.target.checked\n                        );\n                      }}\n                    />\n                  }\n                  label=\"Right\"\n                />\n              </FormGroup>\n            </FormControl>\n          </Box>\n        )}\n        {this.state.settingsMode === \"description\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            <TextField\n              multiline\n              rows={8}\n              value={this.state.description}\n              onChange={(e) => this.setState({ description: e.target.value })}\n            />\n          </Box>\n        )}\n        {this.state.settingsMode === \"solve\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            <FormControl fullWidth={true}>\n              <FormLabel></FormLabel>\n              <FormGroup>\n                <FormControlLabel\n                  fullWidth={true}\n                  control={\n                    <Switch\n                      checked={this.state.solveSudoku}\n                      onChange={(e) => {\n                        this.setState({ solveSudoku: e.target.checked });\n                      }}\n                    />\n                  }\n                  label=\"Sudoku\"\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      fullWidth={true}\n                      checked={this.state.solveEdge}\n                      onChange={(e) => {\n                        this.setState({ solveEdge: e.target.checked });\n                      }}\n                    />\n                  }\n                  label=\"Edge\"\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      fullWidth={true}\n                      checked={this.state.solveCenterLine}\n                      onChange={(e) => {\n                        this.setState({ solveCenterLine: e.target.checked});\n                      }}\n                    />\n                  }\n                  label=\"Center line\"\n                />\n              </FormGroup>\n            </FormControl>\n          </Box>\n        )}\n      </Box>\n    );\n  }\n\n  handleChange(newValue, type) {\n    this.setState({ [type]: newValue });\n  }\n\n  setGrid(type) {\n    if (\n      [\n        \"cellSize\",\n        \"gridDivWidth\",\n        \"gridDivHeight\",\n        \"gridStyle\",\n        \"gridLeftDiagonal\",\n        \"gridRightDiagonal\",\n      ].includes(type)\n    )\n      DrawUpdateGrid(this.canvasRef.current, this.state);\n    else DrawRender(code, this.canvasRef.current, this.state);\n  }\n\n  setGridState = (state, value) => {\n    this.setState({ [state]: value }, () => {\n      this.setGrid(state);\n    });\n  };\n\n  sizeSlider(type, label, min = 0, max = 10, step = 1, marks = false) {\n    return (\n      <Box>\n        <Typography>\n          {label}: {this.state[type]}\n        </Typography>\n        <Slider\n          value={this.state[type]}\n          min={min}\n          max={max}\n          step={step}\n          marks={marks}\n          id={type}\n          onChange={(e, newValue) => this.handleChange(newValue, type)}\n          onChangeCommitted={() => this.setGrid(type)}\n        />\n      </Box>\n    );\n  }\n\n  check = () => {\n    let r = DrawCheck();\n    let status = r[0];\n    let msg = r[1];\n    if (status) this.setState({ timeStatus: false });\n    alert(msg);\n  };\n\n  renderSolveMode() {\n    let buttons = [];\n    if (this.state.solveSudoku)\n      buttons.push(\n        [\"normal\", \"Normal\"],\n        [\"center\", \"Center\"],\n        [\"corner\", \"Corner\"]\n      );\n    if (this.state.solveEdge) buttons.push([\"edgecross\", \"Edge\"]);\n    if (this.state.solveCenterLine) buttons.push([\"centerline\", \"Center line\"]);\n    buttons.push([\"color\", \"Color\"]);\n\n    return (\n      <Box display=\"flex\" flexDirection=\"row\">\n        {this.timerBox()}\n        <Box display=\"flex\">\n          <div id=\"canvas\" ref={this.canvasRef}></div>\n        </Box>\n        <Box minWidth=\"250px\" maxWidth=\"250px\">\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              {buttons.map((b) => (\n                <Button\n                  id={\"button\" + b[0]}\n                  key={b[0]}\n                  color={this.state.mode === b[0] ? \"primary\" : \"default\"}\n                  onClick={() => this.setMode(b[0])}\n                >\n                  {b[1]}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              <Button onClick={DrawUndo}>Undo</Button>\n              <Button onClick={DrawRedo}>Redo</Button>\n              <Button onClick={DrawDelete}>Delete</Button>\n              <Button onClick={this.check}>Check</Button>\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              <ResetButton />\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <Grid container>\n              {this.state.mode === \"color\" && <ColorGrid num={9} />}\n              {[\"normal\", \"center\", \"corner\"].includes(this.state.mode) &&\n                [...Array(9).keys()].map((index) => (\n                  <Grid key={index} item xs={4}>\n                    <Button\n                      variant=\"outlined\"\n                      onClick={() => DrawSetNumber(index + 1)}\n                    >\n                      <div style={{ fontSize: \"20px\" }}>{index + 1}</div>\n                    </Button>\n                  </Grid>\n                ))}\n            </Grid>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n\n  settingRight() {\n    return (\n      <Grid container>\n        {this.state.mode !== \"color\" && <ColorSelect />}\n        {this.state.mode === \"color\" && <ColorGrid />}\n        {this.state.mode === \"number\" && <SymbolSelect />}\n      </Grid>\n    );\n  }\n\n  renderSetMode() {\n    return (\n      <Box display=\"flex\" flexDirection=\"row\">\n        <UrlDialog\n          text={this.state.dialogText}\n          open={this.state.dialogOpen}\n          onClose={() => this.setState({ dialogOpen: false })}\n        />\n        {this.settingLeftBox()}\n        <Box display=\"flex\">\n          <div id=\"canvas\" ref={this.canvasRef}></div>\n        </Box>\n        <Box minWidth=\"250px\" maxWidth=\"250px\">\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              <ResetButton />\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              <Button onClick={DrawDelete}>Delete</Button>\n              <Button onClick={this.generateUrl}>Generate URL</Button>\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">{this.settingRight()}</Box>\n        </Box>\n      </Box>\n    );\n  }\n\n  render() {\n    return (\n      <ConfirmProvider>\n        {solveMode ? this.renderSolveMode() : this.renderSetMode()}\n      </ConfirmProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}