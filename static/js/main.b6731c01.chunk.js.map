{"version":3,"sources":["cage.js","path.js","symbols.js","draw.js","App.js","serviceWorker.js","index.js"],"names":["draw_cage","ctx","cells","_style","color","split","style","size","width","get_line_width","corner_offset","cs","cell_size","get_cage","x","y","find","e","DrawColorPremul","corner_ext_pos","lines","each_cell","m","up","down","left","right","ul","ur","dl","dr","l","add_line","start","end","push","Line","points","dash","strokeWidth","stroke","corner_pos","slice","length","cont","add","concat","draw_dash_cage","corner","lineCap","ocont","draw_edge_cage","center_px","p","draw_path","start_px","map","px","objs","roundLine","flat","lineJoin","squareLine","newLine","bulb","Circle","radius","fill","line","closed","line1","line2","arrow","Arrow","underlay2","scene","draw","draw_symbol","container","str","_color","_size","bg","cx","cy","sym","page","substr","symbol","Math","min","Text","text","fontSize","listening","offset","offset2","aopt","pointerLength","pointerWidth","Star","innerRadius","outerRadius","numPoints","o","Group","Rect","height","destroy","c","symboltext","symbolcolor","grid_w","grid_h","main_w","main_h","grid_left","grid_top","grid_bottom","grid_right","grid_div_width","grid_div_height","grid_style","grid_left_diagonal","grid_right_diagonal","hover_offset","symbol_page","multi_digit","number_bg","cursor_visible","sol_text_color","DrawColors","Util","colorToRGBA","r","a","g","b","current_color","current_mode","current_rmode","current_style","solve_mode","matrix","stuff","edges","drag","drag_toggle","drag_button","undo_stack","redo_stack","current","outer","underlay","shift","cursor","boundary","grid_lines","TextHolder","this","_text","obj","t","undefined","meas","position","set_symbol","normal","symcont","bsize","DrawSymbol","element","num","stage","Stage","layer","Layer","save_state","state","s","center","r_color","fillEnabled","save_undo","load_state","forEach","get","set_cell","i","_set_cell","lock","pos","mode","newtext","main_grid","lock_type","edge","index","centerline","r_color_set","rect","indexOf","lock_cell","DrawSetNumber","number","count","each_mark","DrawSetColor","color_index","mark","last_toggle_state","edge_toggle","del","eo","new_edge","x1","y1","btype2","center_line_toggle","cp","bw","bwidth","bh","bheight","cline","last_toggle","last_move","unmark","boundary_mousedown","event","mark_boundary","mousedown","evt","stopPropagation","button","type","mouseup","last","DrawSetMode","numberBackground","multiDigit","cageStyle","pathStyle","edgeStyle","numberStyle","btype","on","edge_mousemove","edge_mouseup","setBoundary","f","load_grid","base64","pack","Uint8Array","from","atob","charCodeAt","unpack","pako","inflate","data","msgpack","decode","version","alert","unserialize_grid","grid","unserialize","k","_s","serialize","meta","out","desc","console","log","DrawDelete","findLastIndex","splice","DrawUndo","pop","DrawRedo","render","wrapper","margin","stage_w","stage_h","gridlayer","overlay","xp","yp","r_inner","bc","addBoundary","type2","w","h","Array","isArray","qsize","qc","ew","eh","addBoundaries","mousemove","inner_mousemove","dots","thin","fat","diagonal","dsize","add_grid","DrawRender","code","solveMode","cellSize","top","bottom","gridDivWidth","gridDivHeight","gridStyle","gridLeftDiagonal","gridRightDiagonal","load","window","addEventListener","target","tagName","key","preventDefault","startsWith","keydown","keyup","window_mousedown","contextmenu","query","location","search","urlParams","URLSearchParams","ColorGrid","props","Grid","item","xs","Button","variant","onClick","border","background","Timer","useState","seconds","setSeconds","useEffect","id","setInterval","active","clearInterval","Box","padding","boxShadow","Typography","align","Date","toISOString","ButtonGroup","fullWidth","onStart","PlayArrow","onStop","Pause","SkipPrevious","ResetButton","confirm","useConfirm","description","then","setState","timeStatus","catch","SymbolSelect","setPage","symbolRef","useRef","DrawSetSymbolPage","FormControl","Select","value","onChange","MenuItem","keys","ref","ColorSelect","setColor","UrlDialog","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","focus","App","handleKeyDown","cycle_modes","setMode","document","getElementById","setStyle","generateUrl","url","coded","encode","packed","deflate","btoa","String","fromCharCode","origin","encodeURIComponent","DrawGenerateUrl","solveSudoku","solveEdge","solveCenterLine","dialogText","dialogOpen","setGridState","setGrid","check","range","rows","columns","boxes","missing","n","floor","isEqual","sort","DrawCheck","status","msg","canvasRef","React","createRef","settingsMode","symbolPage","DrawGetMetaData","removeEventListener","interval","InputLabel","shrink","labelId","FormControlLabel","control","Switch","checked","label","minWidth","TextField","multiline","InputProps","readOnly","numberStyleBox","cageStyleBox","pathStyleBox","edgeStyleBox","sizeSlider","FormLabel","FormGroup","newValue","includes","DrawUpdateGrid","max","step","marks","Slider","handleChange","onChangeCommitted","buttons","display","flexDirection","timerBox","maxWidth","orientation","settingLeftBox","settingRight","renderSolveMode","renderSetMode","Component","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b6731c01.chunk.js","sourcesContent":["import { Line } from \"konva\";\r\nimport { DrawColorPremul } from \"./draw\";\r\n\r\nexport function draw_cage(ctx, cells, _style, color) {\r\n  let [style, size] = _style.split(\":\");\r\n  let width = ctx.get_line_width(size);\r\n  if (style === \"dash\") return draw_dash_cage(ctx, cells, width, color);\r\n  if (style === \"edge\") return draw_edge_cage(ctx, cells, width, color);\r\n}\r\n\r\nfunction draw_dash_cage(ctx, cells, size, color) {\r\n  let corner_offset = ctx.corner_offset;\r\n  let cs = ctx.cell_size;\r\n  let get_cage = (x, y) => {\r\n    return cells.find((e) => e[0] === x && e[1] === y);\r\n  };\r\n  color = DrawColorPremul(color);\r\n\r\n  const corner_ext_pos = [\r\n    [0, corner_offset],\r\n    [corner_offset, 0],\r\n    [cs - corner_offset, 0],\r\n    [cs, corner_offset],\r\n    [cs, cs - corner_offset],\r\n    [cs - corner_offset, cs],\r\n    [corner_offset, cs],\r\n    [0, cs - corner_offset],\r\n  ];\r\n\r\n  let lines = [];\r\n  ctx.each_cell((m) => {\r\n    let x = m.x;\r\n    let y = m.y;\r\n    if (!get_cage(x, y)) return;\r\n    let up = get_cage(x, y - 1);\r\n    let down = get_cage(x, y + 1);\r\n    let left = get_cage(x - 1, y);\r\n    let right = get_cage(x + 1, y);\r\n    let ul = get_cage(x - 1, y - 1);\r\n    let ur = get_cage(x + 1, y - 1);\r\n    let dl = get_cage(x - 1, y + 1);\r\n    let dr = get_cage(x + 1, y + 1);\r\n    let l = [];\r\n    let add_line = (start, end) => {\r\n      l.push(\r\n        new Line({\r\n          points: [...start, ...end],\r\n          dash: [ctx.cell_size / 20],\r\n          strokeWidth: 2,\r\n          stroke: color,\r\n        })\r\n      );\r\n    };\r\n    if (!left) {\r\n      let start = m.corner_pos[0];\r\n      let end = m.corner_pos[3];\r\n      if (up) {\r\n        start = corner_ext_pos[1].slice(0);\r\n        start[1] -= !ul ? 0 : corner_offset;\r\n      }\r\n      if (down) {\r\n        end = corner_ext_pos[6].slice(0);\r\n        end[1] += !dl ? 0 : corner_offset;\r\n      }\r\n      add_line(start, end);\r\n    }\r\n    if (!right) {\r\n      let start = m.corner_pos[1];\r\n      let end = m.corner_pos[2];\r\n      if (up) {\r\n        start = corner_ext_pos[2].slice(0);\r\n        start[1] -= !ur ? 0 : corner_offset;\r\n      }\r\n      if (down) {\r\n        end = corner_ext_pos[5].slice(0);\r\n        end[1] += !dr ? 0 : corner_offset;\r\n      }\r\n      add_line(start, end);\r\n    }\r\n    if (!up) {\r\n      let start = m.corner_pos[0];\r\n      let end = m.corner_pos[1];\r\n      if (left) {\r\n        start = corner_ext_pos[0].slice(0);\r\n        start[0] -= !ul ? 0 : corner_offset;\r\n      }\r\n      if (right) {\r\n        end = corner_ext_pos[3].slice(0);\r\n        end[0] += !ur ? 0 : corner_offset;\r\n      }\r\n      add_line(start, end);\r\n    }\r\n    if (!down) {\r\n      let start = m.corner_pos[3];\r\n      let end = m.corner_pos[2];\r\n      if (left) {\r\n        start = corner_ext_pos[7].slice(0);\r\n        start[0] -= !dl ? 0 : corner_offset;\r\n      }\r\n      if (right) {\r\n        end = corner_ext_pos[4].slice(0);\r\n        end[0] += !dr ? 0 : corner_offset;\r\n      }\r\n      add_line(start, end);\r\n    }\r\n    if (l.length > 0) m.cont.add(...l);\r\n    lines = lines.concat(l);\r\n  });\r\n  return lines;\r\n}\r\n\r\nfunction draw_edge_cage(ctx, cells, size, color) {\r\n  let cs = ctx.cell_size;\r\n  let get_cage = (x, y) => {\r\n    return cells.find((e) => e[0] === x && e[1] === y);\r\n  };\r\n  color = DrawColorPremul(color);\r\n\r\n  const corner = [\r\n    [0, 0],\r\n    [cs, 0],\r\n    [cs, cs],\r\n    [0, cs],\r\n  ];\r\n\r\n  let lines = [];\r\n  ctx.each_cell((m) => {\r\n    let x = m.x;\r\n    let y = m.y;\r\n    if (!get_cage(x, y)) return;\r\n    let up = get_cage(x, y - 1);\r\n    let down = get_cage(x, y + 1);\r\n    let left = get_cage(x - 1, y);\r\n    let right = get_cage(x + 1, y);\r\n    let l = [];\r\n    let add_line = (start, end) => {\r\n      l.push(\r\n        new Line({\r\n          points: [...start, ...end],\r\n          strokeWidth: size,\r\n          stroke: color,\r\n          lineCap: \"round\",\r\n        })\r\n      );\r\n    };\r\n    if (!left) {\r\n      let start = corner[0];\r\n      let end = corner[3];\r\n      add_line(start, end);\r\n    }\r\n    if (!right) {\r\n      let start = corner[1];\r\n      let end = corner[2];\r\n      add_line(start, end);\r\n    }\r\n    if (!up) {\r\n      let start = corner[0];\r\n      let end = corner[1];\r\n      add_line(start, end);\r\n    }\r\n    if (!down) {\r\n      let start = corner[3];\r\n      let end = corner[2];\r\n      add_line(start, end);\r\n    }\r\n    if (l.length > 0) m.ocont.add(...l);\r\n    lines.push(...l);\r\n  });\r\n  return lines;\r\n}\r\n","import { Circle, Line, Arrow } from \"konva\";\r\nimport { DrawColorPremul } from \"./draw\";\r\n\r\nfunction center_px(cell_size, p) {\r\n  return [p[0] * cell_size + cell_size / 2, p[1] * cell_size + cell_size / 2];\r\n}\r\n\r\nexport function draw_path(ctx, cells, style, color) {\r\n  let cell_size = ctx.cell_size;\r\n  color = DrawColorPremul(color);\r\n\r\n  let start_px = center_px(cell_size, cells[0]);\r\n  let points = cells.map((p) => {\r\n    let px = center_px(cell_size, p);\r\n    return [px[0], px[1]];\r\n  });\r\n  if (points.length === 1) points.push(points[points.length - 1]);\r\n  points = points.flat();\r\n  let objs = [];\r\n  let roundLine = {\r\n    points: points,\r\n    stroke: color,\r\n    lineCap: \"round\",\r\n    lineJoin: \"round\",\r\n  };\r\n  let squareLine = {\r\n    points: points,\r\n    stroke: color,\r\n    lineCap: \"square\",\r\n    lineJoin: \"miter\",\r\n  };\r\n  let newLine = (width) => new Line({\r\n    ...roundLine,\r\n    strokeWidth: width,\r\n  });\r\n\r\n  if (style === \"thermo\") {\r\n    let bulb = new Circle({\r\n      x: start_px[0],\r\n      y: start_px[1],\r\n      radius: cell_size * 0.4,\r\n      fill: color,\r\n    });\r\n    let line = newLine(cell_size * 0.3);\r\n    objs.push(bulb, line);\r\n  } else if (style === \"polygon\") {\r\n    let strokeWidth = cell_size * 0.05;\r\n    let line = new Line({\r\n      ...roundLine,\r\n      strokeWidth: strokeWidth,\r\n      stroke: color,\r\n      closed: true,\r\n    });\r\n    objs.push(line);\r\n  } else if (style === \"polygonfill\") {\r\n    let strokeWidth = cell_size * 0.05;\r\n    let line = new Line({\r\n      ...roundLine,\r\n      strokeWidth: strokeWidth,\r\n      fill: color,\r\n      closed: true,\r\n    });\r\n    objs.push(line);\r\n  } else if (style === \"thin\") {\r\n    let line = newLine(cell_size * 0.05);\r\n    objs.push(line);\r\n  } else if (style === \"medium\") {\r\n    let line = newLine(cell_size * 0.15);\r\n    objs.push(line);\r\n  } else if (style === \"fat\") {\r\n    let line = newLine(cell_size * 0.3);\r\n    objs.push(line);\r\n  } else if (style === \"roundborder\") {\r\n    let line1 = newLine(cell_size * 0.8);\r\n    let line2 = new Line({\r\n      ...roundLine,\r\n      strokeWidth: cell_size * 0.67,\r\n      stroke: \"white\",\r\n    });\r\n    objs.push(line1, line2);\r\n  } else if (style === \"border\") {\r\n    // TODO only allow 90 degree angles\r\n    let line1 = new Line({\r\n      ...squareLine,\r\n      strokeWidth: cell_size * 0.8,\r\n    });\r\n    let line2 = new Line({\r\n      ...squareLine,\r\n      strokeWidth: cell_size * 0.67,\r\n      stroke: \"white\",\r\n    });\r\n    objs.push(line1, line2);\r\n  } else if (style === \"roundfill\") {\r\n    let line = newLine(cell_size * 0.8);\r\n    objs.push(line);\r\n  } else if (style === \"squarefill\") {\r\n    let line = new Line({\r\n      ...squareLine,\r\n      strokeWidth: cell_size * 0.8,\r\n    });\r\n    objs.push(line);\r\n  } else if (style === \"arrowcircle\" || style === \"arrow\") {\r\n    let strokeWidth = cell_size * 0.07;\r\n    if (points.length > 1) {\r\n      let arrow = new Arrow({\r\n        points: points,\r\n        stroke: color,\r\n        strokeWidth: strokeWidth,\r\n        arrow: cell_size * 0.3,\r\n      });\r\n      objs.push(arrow);\r\n    }\r\n    let line = new Line({\r\n      ...squareLine,\r\n      strokeWidth: strokeWidth,\r\n    });\r\n    objs.push(line);\r\n    if (style === \"arrowcircle\") {\r\n      let bulb = new Circle({\r\n        x: start_px[0],\r\n        y: start_px[1],\r\n        radius: cell_size * 0.4,\r\n        fill: \"white\",\r\n        strokeWidth: strokeWidth,\r\n        stroke: color,\r\n      });\r\n      objs.push(bulb);\r\n    }\r\n  }\r\n\r\n  ctx.underlay2.add(...objs);\r\n  ctx.scene.draw();\r\n\r\n  return objs;\r\n}\r\n","//import Arrow from \"./arrow\";\r\nimport { Circle, Star, Rect, Group, Text, Line, Arrow } from \"konva\";\r\nimport { DrawColorPremul } from \"./draw\";\r\n\r\nexport function draw_symbol(container, str, _color, _size, bg) {\r\n  let page = +str.substr(1, 1);\r\n  let symbol = +str.substr(2, 1);\r\n  let color = DrawColorPremul(_color);\r\n  let cx;\r\n  let cy;\r\n  let size;\r\n  if (typeof _size === \"object\") {\r\n    cx = _size[0] / 2;\r\n    cy = _size[1] / 2;\r\n    size = Math.min(..._size);\r\n  } else {\r\n    size = _size;\r\n    cx = size / 2;\r\n    cy = size / 2;\r\n  }\r\n  let sym;\r\n\r\n  if (str[0] !== \"#\") page = 0;\r\n\r\n  if (page === 0) {\r\n    sym = new Text({\r\n      x: size * 0.5 - 0.25 * size * str.length,\r\n      y: size * 0.1,\r\n      text: str,\r\n      fontSize: size,\r\n      fill: color,\r\n      listening: false,\r\n    });\r\n  }\r\n  if (page === 1) {\r\n    if (symbol === 1) {\r\n      // circle fill\r\n      sym = new Circle({\r\n        x: cx,\r\n        y: cy,\r\n        radius: (0.8 * size) / 2,\r\n        fill: color,\r\n        stroke: \"black\",\r\n        strokeWidth: 2,\r\n      });\r\n    }\r\n    if (symbol === 2) {\r\n      // circle outline\r\n      sym = new Circle({\r\n        x: cx,\r\n        y: cy,\r\n        radius: (0.8 * size) / 2,\r\n        fill: \"white\",\r\n        stroke: color,\r\n        strokeWidth: 2,\r\n      });\r\n    }\r\n    if (symbol === 3) {\r\n      // dash circle fill\r\n      sym = new Circle({\r\n        x: cx,\r\n        y: cy,\r\n        radius: (0.8 * size) / 2,\r\n        fill: color,\r\n        stroke: \"black\",\r\n        strokeWidth: 2,\r\n        dash: [4],\r\n      });\r\n    }\r\n    if (symbol === 4) {\r\n      // dash circle outline\r\n      sym = new Circle({\r\n        x: cx,\r\n        y: cy,\r\n        radius: (0.8 * size) / 2,\r\n        fill: \"white\",\r\n        stroke: color,\r\n        strokeWidth: 2,\r\n        dash: [4],\r\n      });\r\n    }\r\n  }\r\n  if (page === 2) {\r\n    // Little killer style arrows\r\n    let offset = size * 0.05;\r\n    let offset2 = size * 0.15;\r\n    let aopt = {\r\n      stroke: color,\r\n      strokeWidth: 3,\r\n      fill: color,\r\n      pointerLength: size * 0.3,\r\n      pointerWidth: size * 0.3,\r\n    };\r\n    if (symbol === 1) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: cy,\r\n        points: [0, 0, size - cx - offset, size - cy - offset],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 2) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: cy,\r\n        points: [0, 0, size - cx - offset, -cy + offset],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 3) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: cy,\r\n        points: [0, 0, -cx + offset, -cy + offset],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 4) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: cy,\r\n        points: [0, 0, -cx + offset, size - cy - offset],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 5) {\r\n      sym = new Arrow({\r\n        x: offset2,\r\n        y: cy,\r\n        points: [0, 0, size - offset2 * 2, 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 6) {\r\n      sym = new Arrow({\r\n        x: size - offset2,\r\n        y: cy,\r\n        points: [0, 0, -(size - offset2 * 2), 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 7) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: offset2,\r\n        points: [0, 0, 0, size - offset2 * 2],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 8) {\r\n      sym = new Arrow({\r\n        x: cx,\r\n        y: size - offset2,\r\n        points: [0, 0, 0, -(size - offset2 * 2)],\r\n        ...aopt,\r\n      });\r\n    }\r\n  }\r\n  if (page === 3) {\r\n    // Yajilin style arrows\r\n    let offset = size * 0.15;\r\n    let aopt = {\r\n      stroke: color,\r\n      fill: color,\r\n      strokeWidth: 2,\r\n      pointerLength: size * 0.1,\r\n      pointerWidth: size * 0.1,\r\n    };\r\n    if (symbol === 1) {\r\n      sym = new Arrow({\r\n        x: offset,\r\n        y: offset,\r\n        points: [0, 0, size - offset * 2, 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 2) {\r\n      sym = new Arrow({\r\n        x: size - offset,\r\n        y: offset,\r\n        points: [0, 0, -(size - offset * 2), 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 3) {\r\n      sym = new Arrow({\r\n        x: size - offset,\r\n        y: offset,\r\n        points: [0, 0, 0, size - offset * 2],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 4) {\r\n      sym = new Arrow({\r\n        x: size - offset,\r\n        y: size - offset,\r\n        points: [0, 0, 0, -(size - offset * 2)],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 5) {\r\n      sym = new Arrow({\r\n        x: size - offset,\r\n        y: size - offset,\r\n        points: [0, 0, -(size - offset * 2), 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 6) {\r\n      sym = new Arrow({\r\n        x: offset,\r\n        y: size - offset,\r\n        points: [0, 0, size - offset * 2, 0],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 7) {\r\n      sym = new Arrow({\r\n        x: offset,\r\n        y: size - offset,\r\n        points: [0, 0, 0, -(size - offset * 2)],\r\n        ...aopt,\r\n      });\r\n    }\r\n    if (symbol === 8) {\r\n      sym = new Arrow({\r\n        x: offset,\r\n        y: offset,\r\n        points: [0, 0, 0, size - offset * 2],\r\n        ...aopt,\r\n      });\r\n    }\r\n  }\r\n  if (page === 4) {\r\n    if (symbol === 1) {\r\n      sym = new Star({\r\n        x: cx,\r\n        y: cy,\r\n        innerRadius: size * 0.2,\r\n        outerRadius: size * 0.4,\r\n        numPoints: 5,\r\n        fill: color,\r\n        stroke: \"black\",\r\n      });\r\n    }\r\n    if (symbol === 2) {\r\n      let o = size * 0.1;\r\n      sym = new Line({\r\n        points: [o, o, size - o, size / 2, o, size - o, o, o],\r\n        fill: color,\r\n        closed: true,\r\n      });\r\n    }\r\n    if (symbol === 3) {\r\n      // Kakuro box\r\n      sym = new Group();\r\n      sym.add(new Rect({ width: size, height: size, fill: color }));\r\n      sym.add(\r\n        new Line({\r\n          points: [0, 0, size, size],\r\n          stroke: \"white\",\r\n          strokeWidth: 3,\r\n        })\r\n      );\r\n    }\r\n    if (symbol === 4) {\r\n      // Cross\r\n      let o = size * 0.1;\r\n      sym = new Group();\r\n      sym.add(\r\n        new Line({\r\n          x: cx - size / 2,\r\n          y: cy - size / 2,\r\n          points: [o, o, size - o, size - o],\r\n          stroke: color,\r\n          strokeWidth: 3,\r\n          listening: false,\r\n        })\r\n      );\r\n      sym.add(\r\n        new Line({\r\n          x: cx - size / 2,\r\n          y: cy - size / 2,\r\n          points: [o, size - o, size - o, o],\r\n          stroke: color,\r\n          strokeWidth: 3,\r\n          listening: false,\r\n        })\r\n      );\r\n    }\r\n    if (symbol === 5) {\r\n      let o = size * 0.1;\r\n      sym = new Line({\r\n        x: cx - size / 2,\r\n        y: cy - size / 2,\r\n        points: [o, o, size - o, size / 2, o, size - o],\r\n        stroke: color,\r\n        strokeWidth: 3,\r\n        listening: false,\r\n      });\r\n    }\r\n    if (symbol === 6) {\r\n      let o = size * 0.1;\r\n      sym = new Line({\r\n        x: cx - size / 2,\r\n        y: cy - size / 2,\r\n        points: [size - o, o, o, size / 2, size - o, size - o],\r\n        stroke: color,\r\n        strokeWidth: 3,\r\n        listening: false,\r\n      });\r\n    }\r\n    if (symbol === 7) {\r\n      let o = size * 0.1;\r\n      sym = new Line({\r\n        x: cx - size / 2,\r\n        y: cy - size / 2,\r\n        points: [o, o, size / 2, size - o, size - o, o],\r\n        stroke: color,\r\n        strokeWidth: 3,\r\n        listening: false,\r\n      });\r\n    }\r\n  }\r\n  if (sym) {\r\n    if (container.symbol) {\r\n      container.symbol.destroy();\r\n    }\r\n    if (bg) {\r\n      let bg = new Rect({\r\n        width: size,\r\n        height: size,\r\n        fill: \"white\",\r\n        listening: false,\r\n      });\r\n      let c = new Group();\r\n      c.add(bg, sym);\r\n      container.symbol = c;\r\n      container.add(c);\r\n    } else {\r\n      container.symbol = sym;\r\n      container.add(sym);\r\n    }\r\n    container.symboltext = str;\r\n    container.symbolcolor = _color;\r\n  }\r\n}\r\n","import { Stage, Layer, Text, Rect, Group, Line, Circle, Util } from \"konva\";\nimport { draw_cage } from \"./cage\";\nimport { draw_path } from \"./path\";\nimport { draw_symbol } from \"./symbols\";\nimport pako from \"pako\";\nimport msgpack from \"msgpack-lite\";\nimport { isEqual, range, findLastIndex, last } from \"lodash\";\n\nlet ctx = {};\nlet cell_size = 0;\nlet grid_w = null;\nlet grid_h = null;\nlet main_w = null;\nlet main_h = null;\nlet grid_left = 0;\nlet grid_top = 0;\nlet grid_bottom = 0;\nlet grid_right = 0;\nlet grid_div_width = 0;\nlet grid_div_height = 0;\nlet grid_style = \"normal\";\nlet grid_left_diagonal = false;\nlet grid_right_diagonal = false;\nlet corner_offset = 0;\nlet hover_offset = 0;\nlet symbol_page = 0;\nlet multi_digit = false;\nlet number_bg = false;\nlet cursor_visible = true;\n\nconst thin_grid_line = 0.01;\nconst medium_grid_line = 0.05;\nconst fat_grid_line = 0.1;\n\nconst type_path = 1;\nconst type_cage = 2;\n\nconst lock_normal = 1;\nconst lock_color = 2;\nconst lock_boundary = 3;\n\nconst b_corner = 1;\nconst b_side = 2;\nconst b_quarter = 3;\nconst b_boundary = 4;\nconst b_edge = 5;\n\nconst b_left = 1;\nconst b_top = 2;\nconst b_bottom = 3;\nconst b_right = 4;\n\nconst sol_text_color = \"rgb(29, 106, 229)\";\nconst mark_color = \"rgba(247, 208, 56, 0.5)\";\nexport const DrawColors = [\n  \"rgba(0, 0, 0, 1)\",\n  \"rgba(207, 207, 207, 0.5)\",\n  \"rgba(255, 255, 255, 1)\",\n  \"rgba(163, 224, 72, 0.5)\",\n  \"rgba(210, 59, 231, 0.5)\",\n  \"rgba(235, 117, 50, 0.5)\",\n  \"rgba(226, 38, 31, 0.5)\",\n  \"rgba(247, 208, 56, 0.5)\",\n  \"rgba(52, 187, 230, 0.5)\",\n  //\n  \"rgba(140, 140, 140, 0.5)\",\n  \"rgba(80, 80, 80, 0.5)\",\n  \"rgba(20, 20, 20, 0.5)\",\n];\n\nexport function DrawColorPremul(color) {\n  if (typeof color === \"number\") {\n    color = DrawColors[color];\n  }\n  // Premultiply for thermo\n  color = Util.colorToRGBA(color);\n  color.r = color.r * color.a + (1 - color.a) * 255;\n  color.g = color.g * color.a + (1 - color.a) * 255;\n  color.b = color.b * color.a + (1 - color.a) * 255;\n  color.a = 1;\n  return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n}\n\nlet current_color = 0;\nlet current_mode = \"normal\";\nlet current_rmode = null;\nlet current_style = null;\nlet solve_mode = false;\nlet scene = null;\nlet matrix = [];\nlet stuff = [];\nlet edges = {};\nlet drag = false;\nlet drag_toggle = null;\nlet drag_button = -1;\nlet undo_stack = [];\nlet redo_stack = [];\nlet current = null;\nlet outer = null;\nlet underlay = null;\nlet shift = false;\nlet cursor = null;\nlet boundary = null;\nlet grid_lines = [];\n\nfunction reset() {\n  matrix = [];\n  stuff = [];\n  edges = {};\n  undo_stack = [];\n  redo_stack = [];\n  current = null;\n  outer = null;\n  underlay = null;\n  shift = false;\n  cursor = null;\n}\n\nexport function DrawSetSymbolPage(page) {\n  symbol_page = page;\n}\n\nclass TextHolder {\n  constructor(container, color, fontSize, size) {\n    this.container = container;\n    this._color = color;\n    this.fontSize = fontSize;\n    this.size = size;\n    this._text = \"\";\n    this.obj = null;\n  }\n\n  text(t) {\n    if (t === undefined) return this._text;\n\n    this._text = t;\n    if (this._text.length > 0) {\n      if (!this.obj) {\n        this.obj = new Text({\n          fill: this._color,\n          text: this._text,\n          fontSize: this.fontSize,\n        });\n        this.container.add(this.obj);\n      } else this.obj.text(this._text);\n\n      if (this.size === 1) {\n        let size = cell_size;\n        let meas = {\n          width: this.fontSize * this._text.length * 0.6,\n          height: this.fontSize,\n        };\n        this.obj.position({\n          x: (size - meas.width) / 2 - size * 0.2,\n          y: (size - meas.height) / 2 - size * 0.1,\n        });\n      } else if (this.size === 2) {\n        let size = 64;\n        let meas = {\n          width: this.fontSize * this._text.length * 0.5,\n          height: this.fontSize,\n        };\n        this.obj.position({\n          x: (size - meas.width) / 2,\n          y: (size - meas.height) / 2,\n        });\n      } else {\n        this.obj.position({\n          x: 0,\n          y: 0,\n        });\n      }\n    } else if (this.obj) {\n      this.obj.destroy();\n      this.obj = null;\n    }\n  }\n\n  color(c) {\n    if (c === undefined) return this._color;\n\n    this._color = c;\n    if (this.obj) this.obj.fill(this._color);\n  }\n}\n\nfunction set_symbol(container, str, color, _size) {\n  let text;\n  let size = _size;\n  if (container.normal) {\n    if (typeof color === \"number\") color = DrawColors[color];\n    size = cell_size;\n    text = container.normal.text;\n    if (multi_digit) str = text.text() + str;\n    container = container.symcont;\n  } else if (size > 0) {\n    // Symbol page\n    color = \"gray\";\n  } else {\n    size = container.bsize;\n    if (multi_digit && str !== \"\") str = (container.symboltext || \"\") + str;\n  }\n  if (str[0] === \"#\" || !text) {\n    draw_symbol(container, str, color, size, number_bg);\n  } else {\n    text.text(str);\n    text.color(color);\n  }\n}\n\nexport function DrawSymbol(element, page, num, size) {\n  let stage = new Stage({ container: element, width: size, height: size });\n  let layer = new Layer();\n  set_symbol(layer, \"#\" + page + num, current_color, size);\n  stage.add(layer);\n  stage.draw();\n}\n\nfunction save_state() {\n  let state = [];\n  each_cell((m) => {\n    let s = { x: m.x, y: m.y };\n    if (m.normal.text.text() !== \"\") s.normal = m.normal.text.text();\n    else {\n      if (m.center.text.text() !== \"\") s.center = m.center.text.text();\n      if (m.corner.length > 0) s.corner = m.corner.map((c) => c.text.text());\n    }\n    if (m.r_color.fillEnabled()) s.color = m.r_color.fill();\n    state.push(s);\n  });\n  return state;\n}\n\nfunction save_undo() {\n  let state = save_state();\n  undo_stack.push(state);\n}\n\nfunction load_state(state) {\n  state.forEach((c) => {\n    let m = get(c.x, c.y);\n    set_cell([c.x, c.y], \"reset\", null, \"\");\n    if (c.normal) m.normal.text.text(c.normal);\n    else {\n      if (c.center) m.center.text.text(c.center);\n      if (c.corner) c.corner.forEach((c, i) => m.corner[i].text.text(c));\n      if (c.color) {\n        m.r_color.fill(c.color);\n        m.r_color.fillEnabled(true);\n      }\n    }\n  });\n}\n\nfunction _set_cell(lock, pos, mode, color, newtext) {\n  let x = pos[0];\n  let y = pos[1];\n  let b = null;\n  if (pos.length === 3) b = get(...pos);\n  let m = get(x, y);\n\n  if (!m.main_grid && mode !== \"normal\" && !lock) {\n    return;\n  }\n  if (m.lock_type === lock_normal && !lock && mode !== \"color\") {\n    return;\n  }\n\n  if (mode === \"reset\") {\n    m.center.text.text(\"\");\n    m.normal.text.text(\"\");\n    m.corner.forEach((c) => c.text.text(\"\"));\n    m.r_color.fill(null);\n    m.r_color.fillEnabled(false);\n    m.boundary.forEach((b) => {\n      if (b.edge && !b.lock) {\n        b.edge.destroy();\n        b.edge = null;\n        delete edges[[x, y, b.index]];\n      }\n      if (b.centerline) {\n        b.centerline.destroy();\n        b.centerline = null;\n      }\n    });\n    if (lock) {\n      m.r_color_set.fill(null);\n      m.r_color_set.fillEnabled(false);\n      m.fill = -1;\n      if (m.symcont.symbol) {\n        m.symcont.symbol.destroy();\n        m.symcont.symbol = null;\n        m.symcont.symboltext = \"\";\n      }\n      m.boundary.forEach((b) => {\n        if (b.symbol) {\n          b.symbol.destroy();\n          b.symbol = null;\n          b.symboltext = \"\";\n        }\n        if (b.rect) {\n          b.rect.destroy();\n          b.rect = null;\n        }\n        if (b.edge) {\n          b.edge.destroy();\n          b.edge = null;\n          delete edges[[x, y, b.index]];\n        }\n      });\n    }\n  } else if (b) {\n    set_symbol(b, newtext, color);\n  } else if (mode === \"normal\") {\n    if (!lock) {\n      color = sol_text_color;\n    } else {\n      m.lock_type = newtext !== \"\" ? lock_normal : 0;\n      if (newtext[0] !== \"#\") {\n        m.color = color;\n      }\n    }\n    set_symbol(m, newtext, color);\n    if (newtext[0] !== \"#\") {\n      m.center.text.text(\"\");\n      m.corner.forEach((c) => c.text.text(\"\"));\n    }\n  } else if (mode === \"center\" && m.normal.text.text() === \"\") {\n    let current = m.center.text.text();\n    let center = \"\";\n    if (newtext !== \"\") {\n      for (let i = 1; i <= 9; ++i) {\n        if (\n          (current.indexOf(i) === -1 && i === +newtext) ||\n          (current.indexOf(i) !== -1 && i !== +newtext)\n        ) {\n          center += i;\n        }\n      }\n    }\n\n    m.center.text.text(center);\n  } else if (mode === \"corner\" && m.normal.text.text() === \"\") {\n    let current = \"\";\n    m.corner.forEach((t) => (current += t.text.text()));\n    let text = \"\";\n    if (newtext !== \"\") {\n      for (let i = 1; i <= 9; ++i) {\n        if (\n          (current.indexOf(i) === -1 && i === +newtext) ||\n          (current.indexOf(i) !== -1 && i !== +newtext)\n        ) {\n          text += i;\n        }\n      }\n    }\n    let i = 0;\n    m.corner.forEach((c) => c.text.text(text[i++] || \"\"));\n  } else if (mode === \"color\") {\n    if (!lock) {\n      if (color === 2) {\n        // white == clear in solve mode\n        m.r_color.fill(null);\n        m.r_color.fillEnabled(false);\n      } else {\n        m.r_color.fill(DrawColors[color]);\n        m.r_color.fillEnabled(true);\n      }\n    } else {\n      m.r_color_set.fill(DrawColors[color]);\n      m.r_color_set.fillEnabled(true);\n      m.fill = color;\n    }\n  }\n}\n\nfunction keyup(event) {\n  if (event.key === \"Shift\") {\n    shift = false;\n  }\n}\n\nfunction set_cell(pos, mode, color, newtext) {\n  let lock = !solve_mode;\n  _set_cell(lock, pos, mode, color, newtext);\n}\n\nfunction lock_cell(pos, mode, color, newtext) {\n  _set_cell(true, pos, mode, color, newtext);\n}\n\nexport function DrawSetNumber(number) {\n  save_undo();\n\n  let symbol = \"\" + number;\n  if (symbol_page > 0) symbol = \"#\" + symbol_page + number;\n  if (boundary) {\n    set_cell(boundary, \"boundary\", current_color, symbol);\n  } else {\n    let count = 0;\n    let mode = current_mode;\n    each_mark((m) => ++count);\n    if (count > 1 && solve_mode && mode === \"normal\") mode = \"center\";\n    each_mark((m) => set_cell([m.x, m.y], mode, current_color, symbol));\n  }\n  scene.draw();\n}\n\nexport function DrawSetColor(color_index) {\n  save_undo();\n\n  current_color = color_index;\n  if (current_mode === \"color\") {\n    each_mark((m) => {\n      set_cell([m.x, m.y], \"color\", color_index, null);\n    });\n    scene.draw();\n  }\n}\n\nfunction keydown(event) {\n  if (event.target.tagName === \"TEXTAREA\") {\n    return;\n  }\n\n  let newtext;\n  if (event.key === \"Shift\") {\n    shift = true;\n    return;\n  } else if (event.key === \"Delete\" || event.key === \"Backspace\") {\n    DrawDelete();\n    event.preventDefault();\n    return;\n  } else if (event.key >= \"0\" && event.key <= \"9\") {\n    newtext = event.key;\n    if (symbol_page > 0) newtext = \"#\" + symbol_page + newtext;\n  } else if (event.key === \"u\" && solve_mode) {\n    DrawUndo();\n    return;\n  } else if (\n    event.key.length === 1 &&\n    ((event.key >= \"a\" && event.key <= \"z\") ||\n      (event.key >= \"A\" && event.key <= \"Z\")) &&\n    !solve_mode\n  ) {\n    newtext = event.key;\n  } else if (event.key.startsWith(\"Arrow\") && cursor) {\n    let c = cursor.slice();\n    if (!shift) unmark();\n    cursor = c;\n    if (event.key === \"ArrowUp\" && cursor[1] > 0) cursor[1] -= 1;\n    if (event.key === \"ArrowDown\" && cursor[1] < grid_h - 1) cursor[1] += 1;\n    if (event.key === \"ArrowLeft\" && cursor[0] > 0) cursor[0] -= 1;\n    if (event.key === \"ArrowRight\" && cursor[0] < grid_w - 1) cursor[0] += 1;\n    mark(cursor[0], cursor[1]);\n    scene.draw();\n    return;\n  } else {\n    return;\n  }\n\n  save_undo();\n\n  if (boundary) {\n    set_cell(boundary, \"boundary\", current_color, newtext);\n  } else {\n    let count = 0;\n    each_mark((m) => ++count);\n\n    let mode = current_mode;\n    if (count > 1 && solve_mode && mode === \"normal\") mode = \"center\";\n    each_mark((m) => {\n      if (current_mode === \"color\") {\n        let color = +newtext - 1;\n        if (color >= 0 && color <= 9)\n          set_cell([m.x, m.y], current_mode, color, null);\n      } else set_cell([m.x, m.y], mode, current_color, newtext);\n    });\n  }\n  scene.draw();\n}\n\nfunction get(x, y, b) {\n  if (x < 0 || y < 0 || x >= grid_w || y >= grid_h) {\n    return null;\n  }\n  let m = matrix[y][x];\n  if (b >= 0) return m.boundary[b];\n  return m;\n}\n\nfunction mark(x, y) {\n  let m = get(x, y);\n  cursor = [x, y];\n  if (!m.mark) {\n    m.mark = true;\n    m.rect.fill(mark_color);\n    m.rect.fillEnabled(cursor_visible);\n    return true;\n  }\n  return false;\n}\n\nfunction inner_mousemove(event, x, y) {\n  if (!drag) return;\n  if (drag_button !== 0) return;\n\n  if (current_mode === \"path\") {\n    if (current.cells.length > 0) {\n      let l = last(current.cells);\n      if (l[0] === x && l[1] === y) return;\n    }\n    current.objs.forEach((o) => o.destroy());\n    current.cells.push([x, y]);\n    current.objs = draw_path(ctx, current.cells, current_style, current_color);\n    scene.draw();\n  }\n}\n\nlet last_toggle_state = null;\n\nfunction get_line_width(style) {\n  switch (style) {\n    case \"thin\":\n      return cell_size * thin_grid_line;\n    case \"medium\":\n      return cell_size * medium_grid_line;\n    default:\n      return cell_size * fat_grid_line;\n  }\n}\n\nfunction edge_toggle(x, y, i, style, color, lock) {\n  let m = get(x, y);\n  let b = m.boundary[i];\n  let c = solve_mode ? sol_text_color : DrawColors[current_color];\n  if (color !== undefined) c = DrawColors[color];\n  let eo = cell_size * 0.15;\n  let del;\n\n  if (b.lock && solve_mode) return;\n\n  if (last_toggle_state === null) {\n    if (b.edge) last_toggle_state = true;\n    else last_toggle_state = false;\n  }\n  del = last_toggle_state;\n\n  let width = get_line_width(style);\n\n  if (del) {\n    if (b.edge) {\n      b.edge.destroy();\n      b.edge = null;\n      delete edges[[x, y, i]];\n    }\n  } else if (!b.edge) {\n    let edge;\n    let new_edge = (x, y, x1, y1) => {\n      edge = new Line({\n        x: x,\n        y: y,\n        points: [0, 0, x1, y1],\n        strokeWidth: width,\n        stroke: c,\n        lineCap: \"round\",\n        listening: false,\n      });\n    };\n    switch (b.btype2) {\n      case b_left:\n      case b_right:\n        new_edge(eo, -eo, 0, cell_size);\n        break;\n      case b_top:\n      case b_bottom:\n        new_edge(-eo, eo, cell_size, 0);\n        break;\n      default:\n        break;\n    }\n    edges[[x, y, i]] = [style, color];\n    b.edge = edge;\n    b.lock = lock;\n    b.add(edge);\n  }\n  scene.draw();\n}\n\nfunction center_line_toggle(x, y, i, style, color) {\n  let m = get(x, y);\n  let b = m.boundary[i];\n  let c = solve_mode ? sol_text_color : DrawColors[current_color];\n  if (color !== undefined) c = DrawColors[color];\n  let width = get_line_width(style);\n  let del;\n\n  if (last_toggle_state === null) {\n    if (b.centerline) last_toggle_state = true;\n    else last_toggle_state = false;\n  }\n  del = last_toggle_state;\n\n  if (del) {\n    if (b.centerline) {\n      b.centerline.destroy();\n      b.centerline = null;\n    }\n  } else {\n    let points;\n    let cp = cell_size / 2;\n    let bw = b.bwidth / 2;\n    let bh = b.bheight / 2;\n    if (b.btype2 === b_top || b.btype2 === b_bottom) points = [0, -cp, 0, cp];\n    else points = [-cp, 0, cp, 0];\n\n    let cline = new Line({\n      x: bw,\n      y: bh,\n      points: points,\n      strokeWidth: width,\n      stroke: c,\n      lineCap: \"round\",\n      listening: false,\n    });\n    b.centerline = cline;\n    b.add(cline);\n  }\n  scene.draw();\n}\n\nlet last_toggle = { x: -1, y: -1, i: -1 };\n\nfunction edge_mousemove(event, x, y, i) {\n  if (!drag) return;\n\n  if (\n    last_toggle_state !== null &&\n    last_toggle.x === x &&\n    last_toggle.y === y &&\n    last_toggle.i === i\n  )\n    return;\n\n  unmark();\n\n  last_toggle = { x: x, y: y, i: i };\n  if (current_mode === \"edge\") {\n    edge_toggle(x, y, i, current_style, current_color);\n  } else {\n    center_line_toggle(x, y, i, current_style, current_color);\n  }\n}\n\nlet last_move = [-1, -1];\n\nfunction mousemove(event, x, y) {\n  if (x === last_move[0] && y === last_move[1]) return;\n\n  last_move[0] = x;\n  last_move[1] = y;\n\n  if (!drag) return;\n\n  if (drag_button === 2 && current_rmode === \"cross\") {\n    let m = get(x, y);\n    m.normal.text.text(\"\");\n    if (m.symcont.symbol) {\n      m.symcont.symbol.destroy();\n      m.symcont.symbol = null;\n      m.symcont.symboltext = \"\";\n    }\n    if (drag_toggle) draw_symbol(m.symcont, \"#44\", sol_text_color, cell_size);\n    scene.draw();\n    return;\n  }\n\n  if (\n    current_mode === \"path\" ||\n    current_mode === \"edge\" ||\n    current_mode === \"centerline\"\n  ) {\n  } else if (current_mode === \"cage\") {\n    if (current.cells.length > 0) {\n      let l = last(current.cells);\n      if (l[0] === x && l[1] === y) return;\n    }\n    if (current.objs) current.objs.forEach((o) => o.destroy());\n    current.cells.push([x, y]);\n    current.objs = draw_cage(ctx, current.cells, current_style, current_color);\n  } else {\n    mark(x, y);\n  }\n\n  scene.draw();\n}\n\nfunction mark_boundary(x, y, i) {\n  unmark();\n\n  let b = get(x, y).boundary[i];\n  if (!b.rect) {\n    b.rect = new Rect({\n      width: b.bwidth,\n      height: b.bheight,\n      fillEnabled: false,\n    });\n    b.add(b.rect);\n  }\n  b.rect.stroke(\"red\");\n  b.rect.strokeWidth(1);\n  boundary = [x, y, i];\n}\n\nfunction unmark() {\n  if (boundary) {\n    let r = get(...boundary).rect;\n    if (r) r.strokeWidth(0);\n    boundary = null;\n  }\n  each_mark((m) => {\n    m.rect.fill(null);\n    m.mark = false;\n  });\n  cursor = null;\n}\n\nfunction boundary_mousedown(event, x, y, i) {\n  mark_boundary(x, y, i);\n  scene.draw();\n}\n\nfunction contextmenu(event) {\n  if (event.target.tagName === \"CANVAS\") event.preventDefault();\n}\n\nfunction window_mousedown(event) {\n  if (event.target.tagName === \"HTML\") {\n    unmark();\n    scene.draw();\n  }\n  last_move = [-1, -1];\n}\n\nfunction mousedown(event, x, y, i) {\n  event.evt.stopPropagation();\n\n  if (event.evt.button === 2 && current_rmode === \"edgecross\") {\n    if (i !== undefined) {\n      let b = get(x, y).boundary[i];\n      if (b.symbol) {\n        b.symbol.destroy();\n        b.symbol = null;\n        b.symboltext = \"\";\n        drag_toggle = false;\n      } else {\n        draw_symbol(b, \"#44\", sol_text_color, [b.bwidth, b.bheight]);\n        drag_toggle = true;\n      }\n      scene.draw();\n    }\n    return;\n  }\n\n  if (event.evt.button === 2 && current_rmode === \"cross\") {\n    let m = get(x, y);\n    m.normal.text.text(\"\");\n    if (m.symcont.symbol) {\n      m.symcont.symbol.destroy();\n      m.symcont.symbol = null;\n      m.symcont.symboltext = \"\";\n      drag_toggle = false;\n    } else {\n      draw_symbol(m.symcont, \"#44\", sol_text_color, cell_size);\n      drag_toggle = true;\n    }\n    scene.draw();\n    return;\n  }\n\n  if (!shift) {\n    unmark();\n  }\n\n  drag = true;\n  if (event.evt.type === \"touchstart\") drag_button = 0;\n  else drag_button = event.evt.button;\n\n  if (boundary) {\n    get(...boundary).strokeWidth(0);\n    boundary = null;\n  }\n\n  if (current_mode === \"path\") {\n    current = { cells: [[x, y]], color: current_color };\n    current.objs = draw_path(ctx, current.cells, current_style, current_color);\n  } else if (current_mode === \"cage\") {\n    current = { cells: [[x, y]], color: current_color };\n    current.objs = draw_cage(ctx, current.cells, current_style, current_color);\n  } else if (current_mode === \"edge\" && i !== undefined) {\n    edge_toggle(x, y, i, current_style, current_color);\n  } else if (current_mode === \"centerline\" && i !== undefined) {\n    center_line_toggle(x, y, i, current_style, current_color);\n  } else {\n    mark(x, y);\n  }\n\n  scene.draw();\n}\n\nfunction edge_mouseup(event, x, y, i) {\n  if (event.evt.button === 2) return;\n  if (last_toggle_state === null && current_mode === \"edge\") {\n    edge_toggle(x, y, i, current_style, current_color);\n  }\n}\n\nfunction mouseup() {\n  drag = false;\n  last_toggle_state = null;\n\n  if (current_mode === \"path\" && current) {\n    stuff.push({\n      type: type_path,\n      style: current_style,\n      cells: current.cells,\n      objs: current.objs,\n      color: current_color,\n    });\n    cursor = last(current.cells);\n    current = null;\n  } else if (current_mode === \"cage\" && current) {\n    stuff.push({\n      type: type_cage,\n      style: current_style,\n      cells: current.cells,\n      objs: current.objs,\n      color: current_color,\n    });\n    cursor = last(current.cells);\n    current = null;\n  }\n}\n\nexport function DrawSetMode(state) {\n  current_mode = state.mode;\n  number_bg = state.numberBackground;\n  multi_digit = state.multiDigit;\n\n  each_cell((m) =>\n    m.boundary.forEach((b) => {\n      if (b.rect) {\n        b.rect.destroy();\n        b.rect = null;\n      }\n    })\n  );\n\n  cursor_visible = false;\n\n  if (state.mode === \"cage\") current_style = state.cageStyle;\n  else if (state.mode === \"path\") current_style = state.pathStyle;\n  else if (state.mode === \"edge\") current_style = state.edgeStyle;\n  else if (state.mode === \"edgecross\") {\n    current_mode = \"edge\";\n    current_style = \"fat\";\n    current_color = undefined;\n    current_rmode = \"edgecross\";\n  } else if (state.mode === \"centerline\") {\n    current_mode = \"centerline\";\n    current_style = \"fat\";\n    current_color = undefined;\n    current_rmode = \"edgecross\";\n  } else if (\n    (state.mode === \"normal\" || state.mode === \"number\") &&\n    state.numberStyle === \"normal\"\n  ) {\n    current_mode = \"normal\";\n    cursor_visible = true;\n  } else cursor_visible = true;\n\n  if (!cursor_visible) unmark();\n\n  if (current_mode === \"edge\" || current_mode === \"centerline\") {\n    each_cell((m) =>\n      m.boundary.forEach((b, i) => {\n        if (b.btype === b_edge) {\n          if (!b.rect) {\n            b.rect = new Rect({\n              width: b.bwidth,\n              height: b.bheight,\n              fill: null,\n              fillEnabled: false,\n            });\n            b.add(b.rect);\n          }\n          b.rect.fillEnabled(true);\n          b.rect.on(\"mousemove touchmove\", (event) =>\n            edge_mousemove(event, m.x, m.y, i)\n          );\n          b.rect.on(\"mousedown tap touchstart\", (event) =>\n            mousedown(event, m.x, m.y, i)\n          );\n          b.rect.on(\"mouseup touchend\", (event) =>\n            edge_mouseup(event, m.x, m.y, i)\n          );\n        }\n      })\n    );\n  }\n\n  let setBoundary = (type) => {\n    each_cell((m) =>\n      m.boundary.forEach((b, i) => {\n        if (b.btype === type) {\n          if (!b.rect) {\n            b.rect = new Rect({\n              width: b.bwidth,\n              height: b.bheight,\n              fill: null,\n              fillEnabled: true,\n            });\n            b.add(b.rect);\n          }\n          b.rect.on(\"mousedown touchstart tap\", (event) =>\n            boundary_mousedown(event, m.x, m.y, i)\n          );\n        }\n      })\n    );\n  };\n\n  if (state.mode === \"number\" && state.numberStyle === \"corner\") {\n    current_mode = \"boundary\";\n    setBoundary(b_corner);\n  }\n  if (state.mode === \"number\" && state.numberStyle === \"side\") {\n    current_mode = \"boundary\";\n    setBoundary(b_side);\n  }\n  if (state.mode === \"number\" && state.numberStyle === \"quarter\") {\n    current_mode = \"boundary\";\n    setBoundary(b_quarter);\n  }\n  if (state.mode === \"number\" && state.numberStyle === \"boundary\") {\n    current_mode = \"boundary\";\n    setBoundary(b_boundary);\n  }\n  scene.draw();\n}\n\nfunction each_cell(f) {\n  for (let x = 0; x < grid_w; ++x) {\n    for (let y = 0; y < grid_h; ++y) {\n      let m = get(x, y);\n      f(m);\n    }\n  }\n}\n\nfunction each_mark(f) {\n  for (let x = 0; x < grid_w; ++x) {\n    for (let y = 0; y < grid_h; ++y) {\n      let m = get(x, y);\n      if (m.mark) f(m);\n    }\n  }\n}\n\nfunction unserialize_grid(s) {\n  [\n    cell_size,\n    grid_w,\n    grid_h,\n    grid_left,\n    grid_right,\n    grid_top,\n    grid_bottom,\n    grid_div_width,\n    grid_div_height,\n    grid_style,\n    grid_left_diagonal,\n    grid_right_diagonal,\n  ] = s;\n}\n\nfunction load_grid(base64) {\n  let pack = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n  let unpack = pako.inflate(pack);\n  let data = msgpack.decode(unpack);\n\n  if (data.version !== 1) {\n    alert(\"Bad version\");\n  }\n\n  unserialize_grid(data.grid);\n}\n\nfunction unserialize(data) {\n  stuff = [];\n  each_cell((m) => {\n    m.lock_type = 0;\n    m.normal.text.text(\"\");\n    m.center.text.text(\"\");\n  });\n\n  if (data.edges) {\n    for (const k in data.edges) {\n      let pos = k.split(\",\").map((x) => +x);\n      let [style, color] = data.edges[k];\n      edge_toggle(...pos, style, color, true);\n    }\n  }\n\n  data.cells.forEach((c) => {\n    let [pos, type, text, color] = c;\n    if (type === lock_normal) {\n      lock_cell(pos, \"normal\", color, text);\n    } else if (type === lock_color) {\n      lock_cell(pos, \"color\", color, text);\n    } else if (type === lock_boundary) {\n      lock_cell(pos, \"boundary\", color, text);\n    }\n  });\n  data.stuff.forEach((_s) => {\n    let s = { type: _s[0], style: _s[1], color: _s[2], cells: _s[3] };\n    if (s.type === type_path) {\n      s.objs = draw_path(ctx, s.cells, s.style, s.color);\n    } else if (s.type === type_cage) {\n      s.objs = draw_cage(ctx, s.cells, s.style, s.color);\n    }\n    stuff.push(s);\n  });\n}\n\nfunction load(base64) {\n  let pack = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n  let unpack = pako.inflate(pack);\n  let data = msgpack.decode(unpack);\n\n  unserialize(data);\n}\n\nexport function DrawGetMetaData(base64) {\n  let pack = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n  let unpack = pako.inflate(pack);\n  let data = msgpack.decode(unpack);\n\n  return data.desc;\n}\n\nfunction serialize(meta) {\n  let out = {\n    version: 1,\n    grid: [\n      cell_size,\n      grid_w,\n      grid_h,\n      grid_left,\n      grid_right,\n      grid_top,\n      grid_bottom,\n      grid_div_width,\n      grid_div_height,\n      grid_style,\n      grid_left_diagonal,\n      grid_right_diagonal,\n    ],\n    cells: [],\n    stuff: stuff.map((e) => [e.type, e.style, e.color, e.cells]),\n    edges: edges,\n    desc: meta,\n  };\n\n  each_cell((m) => {\n    let pos = [m.x, m.y];\n    if (m.lock_type === lock_normal) {\n      if (m.normal.text.text() !== \"\")\n        out.cells.push([pos, m.lock_type, m.normal.text.text(), m.color]);\n      if (m.symcont.symboltext !== \"\" && m.symcont.symboltext !== undefined)\n        out.cells.push([\n          pos,\n          m.lock_type,\n          m.symcont.symboltext,\n          m.symcont.symbolcolor,\n        ]);\n    }\n    if (m.fill >= 0) {\n      out.cells.push([pos, lock_color, null, m.fill]);\n    }\n    m.boundary.forEach((b, i) => {\n      if (b.symboltext)\n        out.cells.push([\n          [m.x, m.y, i],\n          lock_boundary,\n          b.symboltext,\n          b.symbolcolor,\n        ]);\n    });\n  });\n\n  console.log(out);\n  return out;\n}\n\nexport function DrawGenerateUrl(meta) {\n  let out = serialize(meta);\n  let coded = msgpack.encode(out);\n  let packed = pako.deflate(coded);\n  let base64 = btoa(String.fromCharCode(...packed));\n  return window.location.origin + \"/?s=1&p=\" + encodeURIComponent(base64);\n}\n\nexport function DrawCheck() {\n  if (main_w !== 9 || main_h !== 9) return [false, \"Not sudoku\"];\n  let r = range(1, 10);\n  let rows = Array.from({ length: 9 }, () => []);\n  let columns = Array.from({ length: 9 }, () => []);\n  let boxes = Array.from({ length: 9 }, () => []);\n  let missing = null;\n  each_cell((m) => {\n    let x = m.x - grid_left;\n    let y = m.y - grid_top;\n    let n = +m.normal.text.text();\n    if (n === 0 && missing === null) {\n      missing = `Missing entry at ${x + 1}, ${y + 1}`;\n    }\n    columns[x].push(n);\n    rows[y].push(n);\n    let b = Math.floor(x / 3) + Math.floor(y / 3) * 3;\n    boxes[b].push(n);\n  });\n  if (missing) {\n    return [false, missing];\n  }\n  for (let i = 0; i < 9; ++i) {\n    if (!isEqual(rows[i].sort(), r)) {\n      return [false, `Bad row ${i + 1}`];\n    }\n    if (!isEqual(columns[i].sort(), r)) {\n      return [false, `Bad column ${i + 1}`];\n    }\n    if (!isEqual(boxes[i].sort(), r)) {\n      return [false, `Bad box ${i + 1}`];\n    }\n  }\n  return [true, \"OK\"];\n}\n\nexport function DrawDelete() {\n  if (!solve_mode && cursor) {\n    let i = findLastIndex(stuff, (s) =>\n      s.cells.find((c) => c[0] === cursor[0] && c[1] === cursor[1])\n    );\n    if (i === -1) {\n      each_mark((m) => {\n        if (i !== -1) return;\n        i = findLastIndex(stuff, (s) =>\n          s.cells.find((c) => c[0] === m.x && c[1] === m.y)\n        );\n      });\n    }\n    if (i !== -1) {\n      stuff[i].objs.forEach((o) => o.destroy());\n      stuff.splice(i, 1);\n      scene.draw();\n      return;\n    }\n  }\n\n  save_undo();\n\n  if (boundary) {\n    set_cell(boundary, \"boundary\", null, \"\");\n  } else {\n    each_mark((m) => {\n      set_cell([m.x, m.y], \"reset\", null, \"\");\n    });\n  }\n\n  scene.draw();\n}\n\nexport function DrawReset() {\n  each_cell((m) => {\n    set_cell([m.x, m.y], \"reset\", null, \"\");\n  });\n\n  if (!solve_mode) {\n    stuff.forEach((s) => s.objs.forEach((o) => o.destroy()));\n    stuff = [];\n  }\n\n  undo_stack = [];\n  redo_stack = [];\n\n  scene.draw();\n}\n\nexport function DrawUndo() {\n  if (undo_stack.length === 0) return;\n  let state = save_state();\n  redo_stack.push(state);\n  state = undo_stack.pop();\n  load_state(state);\n  scene.draw();\n}\n\nexport function DrawRedo() {\n  if (redo_stack.length === 0) return;\n  let state = save_state();\n  undo_stack.push(state);\n  state = redo_stack.pop();\n  load_state(state);\n  scene.draw();\n}\n\nfunction add_grid(layer) {\n  let dash = grid_style === \"dash\" ? [4] : null;\n  let dots = grid_style === \"dots\";\n\n  let thin = {\n    stroke: \"black\",\n    strokeWidth: cell_size * thin_grid_line,\n    dash: dash,\n  };\n  let fat = {\n    stroke: \"black\",\n    strokeWidth: cell_size * medium_grid_line,\n  };\n\n  grid_lines.forEach((g) => g.destroy());\n\n  main_w = grid_w - grid_left - grid_right;\n  main_h = grid_h - grid_top - grid_bottom;\n\n  grid_lines = [];\n  if (grid_left_diagonal || grid_right_diagonal) {\n    let diagonal = {\n      stroke: DrawColors[1],\n      strokeWidth: cell_size * medium_grid_line,\n    };\n    if (grid_left_diagonal)\n      grid_lines.push(\n        new Line({\n          points: [\n            grid_left * cell_size,\n            grid_top * cell_size,\n            (grid_left + main_w) * cell_size,\n            (grid_top + main_h) * cell_size,\n          ],\n          ...diagonal,\n        })\n      );\n    if (grid_right_diagonal)\n      grid_lines.push(\n        new Line({\n          points: [\n            (grid_w - grid_right) * cell_size,\n            grid_top * cell_size,\n            grid_left * cell_size,\n            (grid_top + main_h) * cell_size,\n          ],\n          ...diagonal,\n        })\n      );\n  }\n\n  if (dots) {\n    let dsize = cell_size * 0.07;\n    for (let y = 0; y <= main_h; ++y) {\n      for (let x = 0; x <= main_w; ++x) {\n        grid_lines.push(\n          new Circle({\n            x: (grid_left + x) * cell_size,\n            y: (grid_top + y) * cell_size,\n            radius: dsize,\n            fill: \"black\",\n          })\n        );\n      }\n    }\n  } else {\n    for (let x = 0; x <= main_w; ++x) {\n      grid_lines.push(\n        new Line({\n          x: (grid_left + x) * cell_size,\n          y: grid_top * cell_size,\n          points: [0, 0, 0, main_h * cell_size],\n          ...(x % grid_div_width === 0 ? fat : thin),\n        })\n      );\n    }\n    for (let y = 0; y <= main_h; ++y) {\n      grid_lines.push(\n        new Line({\n          x: grid_left * cell_size,\n          y: (grid_top + y) * cell_size,\n          points: [0, 0, main_w * cell_size, 0],\n          ...(y % grid_div_height === 0 ? fat : thin),\n        })\n      );\n    }\n\n    grid_lines.push(\n      new Rect({\n        x: grid_left * cell_size,\n        y: grid_top * cell_size,\n        width: main_w * cell_size,\n        height: main_h * cell_size,\n        stroke: \"black\",\n        strokeWidth: cell_size * medium_grid_line,\n        fillEnabled: false,\n      })\n    );\n  }\n\n  layer.add(...grid_lines);\n}\n\nfunction addBoundaries(x, y, boundary) {\n  const bc = cell_size * 0.03;\n  const cs = cell_size;\n  const bsize = cell_size * 0.3;\n\n  let i = 0;\n  const addBoundary = (x, y, size, type, type2) => {\n    let b = new Group({ x: x, y: y });\n    let w = size;\n    let h = size;\n    let s = size;\n    if (Array.isArray(size)) {\n      w = size[0];\n      h = size[1];\n      s = Math.min(size[0], size[1]);\n    }\n    b.rect = null;\n    b.index = i++;\n    b.bsize = s;\n    b.bwidth = w;\n    b.bheight = h;\n    b.btype = type;\n    b.btype2 = type2;\n    boundary.push(b);\n  };\n\n  // Corners\n  addBoundary(bc, bc, bsize, b_corner);\n  addBoundary(cs - bsize - bc, bc, bsize, b_corner);\n  addBoundary(bc, cs - bsize - bc, bsize, b_corner);\n  addBoundary(cs - bsize - bc, cs - bsize - bc, bsize, b_corner);\n\n  // Sides\n  addBoundary(bc, cs / 2 - bsize / 2, bsize, b_side);\n  addBoundary(cs / 2 - bsize / 2, bc, bsize, b_side);\n  addBoundary(cs - bsize - bc, cs / 2 - bsize / 2, bsize, b_side);\n  addBoundary(cs / 2 - bsize / 2, cs - bsize - bc, bsize, b_side);\n\n  // Quarter\n  const qsize = cell_size * 0.4;\n  const qc = cell_size * 0.05;\n  addBoundary(qc, qc, qsize, b_quarter);\n  addBoundary(cs - qsize - qc, qc, qsize, b_quarter);\n  addBoundary(qc, cs - qsize - qc, qsize, b_quarter);\n  addBoundary(cs - qsize - qc, cs - qsize - qc, qsize, b_quarter);\n\n  // Edges\n  const ew = cell_size * 0.3;\n  const eh = cell_size * 0.7;\n  const eo = ew / 2;\n  addBoundary(-eo, eo, [ew, eh], b_edge, b_left);\n  addBoundary(eo, -eo, [eh, ew], b_edge, b_top);\n  if (x === grid_w - grid_right - 1)\n    addBoundary(cs - eo, eo, [ew, eh], b_edge, b_right);\n  if (y === grid_h - grid_bottom - 1)\n    addBoundary(eo, cs - eo, [eh, ew], b_edge, b_bottom);\n\n  // Boundaries\n  addBoundary(-bsize / 2, -bsize / 2, bsize, b_boundary);\n  addBoundary(-bsize / 2, cs / 2 - bsize / 2, bsize, b_boundary);\n  addBoundary(cs / 2 - bsize / 2, -bsize / 2, bsize, b_boundary);\n  if (x === grid_w - grid_right - 1) {\n    addBoundary(cs - bsize / 2, -bsize / 2, bsize, b_boundary);\n    addBoundary(cs - bsize / 2, cs / 2 - bsize / 2, bsize, b_boundary);\n  }\n  if (y === grid_h - grid_bottom - 1) {\n    addBoundary(-bsize / 2, cs - bsize / 2, bsize, b_boundary);\n    addBoundary(cs / 2 - bsize / 2, cs - bsize / 2, bsize, b_boundary);\n    addBoundary(cs - bsize / 2, cs - bsize / 2, bsize, b_boundary);\n  }\n}\n\nfunction render(wrapper) {\n  corner_offset = cell_size * 0.08;\n  hover_offset = cell_size * 0.2;\n\n  const margin = cell_size * 0.2;\n  const stage_w = grid_w * cell_size + margin * 2;\n  const stage_h = grid_h * cell_size + margin * 2;\n  let stage = new Stage({\n    container: wrapper,\n    width: stage_w,\n    height: stage_h,\n  });\n  scene = new Layer();\n  stage.add(scene);\n\n  reset();\n\n  outer = new Group({ x: margin, y: margin });\n  scene.add(outer);\n\n  underlay = new Group();\n  let underlay2 = new Group();\n  let gridlayer = new Group();\n  let overlay = new Group();\n  outer.add(underlay2, underlay, gridlayer, overlay);\n\n  for (let y = 0; y < grid_h; ++y) {\n    matrix[y] = [];\n  }\n  let cs = cell_size;\n\n  for (let x = 0; x < grid_w; ++x) {\n    for (let y = 0; y < grid_h; ++y) {\n      let xp = x * cs;\n      let yp = y * cs;\n      let main_grid =\n        x >= grid_left &&\n        y >= grid_top &&\n        x < grid_w - grid_right &&\n        y < grid_h - grid_bottom;\n      let ocont = new Group({ x: xp, y: yp });\n      let cont = new Group({ x: xp, y: yp });\n      let symcont = new Group();\n      let r = new Rect({\n        width: cs,\n        height: cs,\n        strokeWidth: 0,\n        fillEnabled: true,\n      });\n      let r_color = new Rect({\n        width: cs,\n        height: cs,\n        strokeWidth: 0,\n        fillEnabled: false,\n      });\n      let r_color_set = new Rect({\n        width: cs,\n        height: cs,\n        strokeWidth: 0,\n        fillEnabled: false,\n      });\n      let r_inner = new Rect({\n        x: hover_offset,\n        y: hover_offset,\n        width: cs - hover_offset * 2,\n        height: cs - hover_offset * 2,\n        fillEnabled: true,\n      });\n      let normal = new Group({ x: cell_size * 0.25, y: cell_size * 0.15 });\n      normal.text = new TextHolder(normal, sol_text_color, cell_size * 0.7, 1);\n      let center = new Group();\n      center.text = new TextHolder(center, sol_text_color, cell_size * 0.3, 2);\n      let corner_pos = [];\n      corner_pos[0] = [corner_offset, corner_offset];\n      corner_pos[1] = [cs - corner_offset, corner_offset];\n      corner_pos[2] = [cs - corner_offset, cs - corner_offset];\n      corner_pos[3] = [corner_offset, cs - corner_offset];\n      corner_pos[4] = [cs / 2, corner_offset];\n      corner_pos[5] = [cs - corner_offset, cs / 2];\n      corner_pos[6] = [cs / 2, cs - corner_offset];\n      corner_pos[7] = [corner_offset, cs / 2];\n\n      let corner = [];\n      let boundary = [];\n      if (main_grid) {\n        corner_pos.forEach((p, i) => {\n          p = p.slice(0);\n          p[0] -= cs * 0.025;\n          p[1] -= cs * 0.025;\n          if (i < 4) {\n            if (i === 2 || i === 3) p[1] -= cs * 0.15;\n            if (i === 1 || i === 2) p[0] -= cs * 0.1;\n          } else {\n            if (i === 6) p[1] -= cs * 0.15;\n            if (i === 5 || i === 7) p[1] -= cs * 0.05;\n            if (i === 4 || i === 6) p[0] -= cs * 0.025;\n            if (i === 5) p[0] -= cs * 0.1;\n          }\n          let g = new Group({ x: p[0], y: p[1] });\n          g.text = new TextHolder(g, sol_text_color, cs * 0.2, 3);\n          corner.push(g);\n        });\n      }\n      addBoundaries(x, y, boundary);\n\n      cont.add(r_color_set, r_color, r, r_inner, symcont, normal, center);\n      cont.on(\"mousedown touchstart tap\", (event) => mousedown(event, x, y));\n      cont.on(\"mousemove touchmove\", (event) => mousemove(event, x, y));\n      r_inner.on(\"mousemove touchmove\", (event) =>\n        inner_mousemove(event, x, y)\n      );\n      matrix[y][x] = {\n        x: x,\n        y: y,\n        pos: [xp, yp],\n        symcont: symcont,\n        cont: cont,\n        ocont: ocont,\n        rect: r,\n        boundary: boundary,\n        fill: -1,\n        color: null,\n        normal: normal,\n        center: center,\n        corner: corner,\n        corner_pos: corner_pos,\n        r_color_set: r_color_set,\n        r_color: r_color,\n        main_grid: main_grid,\n      };\n      underlay.add(cont);\n      if (main_grid) ocont.add(...corner);\n      ocont.add(...boundary);\n      overlay.add(ocont);\n    }\n  }\n\n  add_grid(gridlayer);\n\n  ctx.scene = scene;\n  ctx.underlay = underlay;\n  ctx.underlay2 = underlay2;\n  ctx.overlay = overlay;\n  ctx.cell_size = cell_size;\n  ctx.corner_offset = corner_offset;\n  ctx.each_cell = each_cell;\n  ctx.get_line_width = get_line_width;\n  ctx.get = get;\n}\n\nexport function DrawUpdateGrid(wrapper, state) {\n  let s = serialize();\n  if (\"cellSize\" in state) cell_size = state.cellSize;\n  if (\"gridDivWidth\" in state) grid_div_width = state.gridDivWidth;\n  if (\"gridDivHeight\" in state) grid_div_height = state.gridDivHeight;\n  if (\"gridStyle\" in state) grid_style = state.gridStyle;\n  if (\"gridLeftDiagonal\" in state) grid_left_diagonal = state.gridLeftDiagonal;\n  if (\"gridRightDiagonal\" in state)\n    grid_right_diagonal = state.gridRightDiagonal;\n  render(wrapper);\n  unserialize(s);\n  scene.draw();\n}\n\nexport function DrawRender(code, wrapper, state) {\n  solve_mode = state.solveMode;\n  cell_size = state.cellSize;\n  grid_left = state.left;\n  grid_right = state.right;\n  grid_top = state.top;\n  grid_bottom = state.bottom;\n  grid_w = grid_left + state.width + grid_right;\n  grid_h = grid_top + state.height + grid_bottom;\n  grid_div_width = state.gridDivWidth;\n  grid_div_height = state.gridDivHeight;\n  grid_style = state.gridStyle;\n  grid_left_diagonal = state.gridLeftDiagonal;\n  grid_right_diagonal = state.gridRightDiagonal;\n\n  if (code) load_grid(code);\n\n  render(wrapper);\n\n  if (code) load(code);\n\n  scene.draw();\n\n  DrawSetMode(state);\n}\n\nwindow.addEventListener(\"keydown\", (event) => keydown(event));\nwindow.addEventListener(\"keyup\", (event) => keyup(event));\nwindow.addEventListener(\"mousedown\", (event) => window_mousedown(event));\nwindow.addEventListener(\"mouseup\", (event) => mouseup(event));\nwindow.addEventListener(\"touchend\", (event) => mouseup(event));\nwindow.addEventListener(\"contextmenu\", (event) => contextmenu(event));\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  DrawRender,\n  DrawSymbol,\n  DrawSetMode,\n  DrawUndo,\n  DrawRedo,\n  DrawDelete,\n  DrawGenerateUrl,\n  DrawSetNumber,\n  DrawSetColor,\n  DrawColors,\n  DrawGetMetaData,\n  DrawReset,\n  DrawCheck,\n  DrawSetSymbolPage,\n  DrawUpdateGrid,\n} from \"./draw\";\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Slider,\n  Typography,\n  Select,\n  MenuItem,\n  FormControl,\n  FormGroup,\n  FormLabel,\n  FormControlLabel,\n  InputLabel,\n  Grid,\n  TextField,\n  Switch,\n} from \"@material-ui/core\";\nimport { ConfirmProvider, useConfirm } from \"material-ui-confirm\";\nimport { PlayArrow, Pause, SkipPrevious } from \"@material-ui/icons\";\n\nconst query = window.location.search;\nconst urlParams = new URLSearchParams(query);\nconst code = urlParams.get(\"p\");\nconst solveMode = urlParams.get(\"s\") === \"1\";\n\nfunction ColorGrid(props) {\n  return DrawColors.slice(0, props.num).map((color, index) => (\n    <Grid key={index} item xs={4}>\n      <Button variant=\"outlined\" onClick={() => DrawSetColor(index)}>\n        <div\n          style={{\n            border: \"1px solid black\",\n            background: color,\n            width: \"30px\",\n            height: \"30px\",\n          }}\n        />\n      </Button>\n    </Grid>\n  ));\n}\n\nfunction Timer(props) {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (props.active) {\n        setSeconds((s) => s + 1);\n      }\n    }, 1000);\n    return () => clearInterval(id);\n  }, [props.active]);\n\n  const restart = () => {\n    props.onStop();\n    setSeconds(0);\n  };\n\n  return (\n    <Box margin=\"20px\" padding=\"10px\" boxShadow={3}>\n      <Typography align=\"center\" variant=\"h4\">\n        {new Date(seconds * 1000).toISOString().substr(11, 8)}\n      </Typography>\n      <ButtonGroup fullWidth={true} size=\"large\">\n        <Button onClick={props.onStart}>\n          <PlayArrow />\n        </Button>\n        <Button onClick={props.onStop}>\n          <Pause />\n        </Button>\n        <Button onClick={restart}>\n          <SkipPrevious />\n        </Button>\n      </ButtonGroup>\n    </Box>\n  );\n}\n\nfunction ResetButton() {\n  const confirm = useConfirm();\n\n  const onClick = () => {\n    confirm({ description: \"Remove all changes in grid?\" })\n      .then(() => {\n        DrawReset();\n        this.setState({ timeStatus: true });\n      })\n      .catch(() => null);\n  };\n\n  return (\n    <Button fullWidth={true} variant=\"contained\" size=\"large\" onClick={onClick}>\n      Reset\n    </Button>\n  );\n}\n\nfunction SymbolSelect() {\n  let [page, setPage] = useState(\"0\");\n  let symbolRef = [];\n  symbolRef[0] = useRef(null);\n  symbolRef[1] = useRef(null);\n  symbolRef[2] = useRef(null);\n  symbolRef[3] = useRef(null);\n  symbolRef[4] = useRef(null);\n  symbolRef[5] = useRef(null);\n  symbolRef[6] = useRef(null);\n  symbolRef[7] = useRef(null);\n  symbolRef[8] = useRef(null);\n  symbolRef[9] = useRef(null);\n\n  const pages = [\"Numbers\", \"Circles\", \"Arrows\", \"Arrows 2\", \"Misc\"];\n  const setSymbolPage = (e) => setPage(e.target.value);\n\n  useEffect(() => {\n    if (+page > 0) {\n      for (let i = 0; i < 9; ++i) {\n        DrawSymbol(symbolRef[i].current, page, i + 1, 30);\n      }\n    }\n    DrawSetSymbolPage(+page);\n  });\n\n  return (\n    <Box>\n      <FormControl fullWidth={true}>\n        <Select fullWidth={true} value={page} onChange={setSymbolPage}>\n          {pages.map((p, i) => (\n            <MenuItem key={p} value={i}>\n              {p}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <Grid container>\n        {[...Array(9).keys()].map((index) => (\n          <Grid key={index} item xs={4}>\n            <Button variant=\"outlined\" onClick={() => DrawSetNumber(index + 1)}>\n              {+page === 0 && (\n                <div style={{ fontSize: \"20px\" }}>{index + 1}</div>\n              )}\n              {+page > 0 && <div ref={symbolRef[index]} />}\n            </Button>\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n\nfunction ColorSelect() {\n  let [color, setColor] = useState(0);\n\n  return DrawColors.map((c, index) => (\n    <Grid key={index} item xs={4}>\n      <Button\n        variant={color === index ? \"contained\" : \"outlined\"}\n        onClick={() => {\n          setColor(index);\n          DrawSetColor(index);\n        }}\n      >\n        <div\n          style={{\n            border: \"1px solid black\",\n            background: c,\n            width: \"30px\",\n            height: \"30px\",\n          }}\n        />\n      </Button>\n    </Grid>\n  ));\n}\n\nfunction UrlDialog(props) {\n  let openInTab = () => {\n    props.onClose();\n    let w = window.open(props.text, \"_blank\");\n    w.focus();\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <DialogTitle>URL</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{props.text}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={openInTab}>Open in tab</Button>\n        <Button color=\"primary\" onClick={props.onClose}>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.symbolRef = [];\n    for (let i = 0; i < 9; ++i) this.symbolRef.push(React.createRef());\n\n    this.state = {\n      solveMode: solveMode,\n      settingsMode: \"size\",\n      color: 0,\n      description: \"\",\n      cellSize: 64,\n      width: 9,\n      height: 9,\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      gridDivWidth: 3,\n      gridDivHeight: 3,\n      gridStyle: \"lines\",\n      gridLeftDiagonal: false,\n      gridRightDiagonal: false,\n      mode: solveMode ? \"normal\" : \"number\",\n      numberStyle: \"normal\",\n      multiDigit: false,\n      numberBackground: false,\n      edgeStyle: \"fat\",\n      cageStyle: \"dash\",\n      pathStyle: \"arrow\",\n      dialogOpen: false,\n      dialogText: \"\",\n      timeStatus: true,\n      symbolPage: \"0\",\n      solveSudoku: true,\n      solveEdge: false,\n      solveCenterLine: false,\n    };\n  }\n\n  handleKeyDown = (event) => {\n    if (event.target.tagName === \"TEXTAREA\") return;\n\n    if (solveMode) {\n      const cycle_modes = [\"normal\", \"center\", \"corner\", \"color\"];\n      let i = \"qwer\".indexOf(event.key);\n      if (event.key.length === 1 && i !== -1) this.setMode(cycle_modes[i]);\n      else if (event.key === \" \") {\n        let i = cycle_modes.indexOf(this.state.mode);\n        i = (i + 1) % cycle_modes.length;\n        this.setMode(cycle_modes[i]);\n      }\n    }\n  };\n\n  componentDidMount() {\n    let meta = {};\n    if (code) {\n      meta = DrawGetMetaData(code);\n      if (typeof meta !== \"object\") meta = { description: meta };\n    }\n    this.setState(meta, () => {\n      DrawRender(code, this.canvasRef.current, this.state);\n    });\n\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n    clearInterval(this.interval);\n  }\n\n  setMode = (mode) => {\n    let b = document.getElementById(\"button\" + mode);\n    if (b) b.focus();\n    this.setState({ mode: mode }, () => {\n      DrawSetMode(this.state);\n    });\n  };\n\n  setStyle = (style, value) => {\n    this.setState({ [style]: value }, () => DrawSetMode(this.state));\n  };\n\n  generateUrl = () => {\n    let meta = {\n      description: this.state.description,\n      solveSudoku: this.state.solveSudoku,\n      solveEdge: this.state.solveEdge,\n      solveCenterLine: this.state.solveCenterLine,\n    };\n    let url = DrawGenerateUrl(meta);\n    this.setState({ dialogText: url, dialogOpen: true });\n  };\n\n  numberStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"numberstyle-label\">\n            Style\n          </InputLabel>\n          <Select\n            labelId=\"numberstyle-label\"\n            fullWidth={true}\n            value={this.state.numberStyle}\n            onChange={(event) =>\n              this.setStyle(\"numberStyle\", event.target.value)\n            }\n          >\n            <MenuItem value=\"normal\">Normal</MenuItem>\n            <MenuItem value=\"corner\">Corner</MenuItem>\n            <MenuItem value=\"side\">Side</MenuItem>\n            <MenuItem value=\"quarter\">Quarter</MenuItem>\n            <MenuItem value=\"boundary\">Boundary</MenuItem>\n          </Select>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={this.state.numberBackground}\n                onChange={(e) => {\n                  this.setStyle(\"numberBackground\", e.target.checked);\n                }}\n              />\n            }\n            label=\"Background\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={this.state.multiDigit}\n                onChange={(e) => {\n                  this.setStyle(\"multiDigit\", e.target.checked);\n                }}\n              />\n            }\n            label=\"Multi digit\"\n          />\n        </FormControl>\n      </Box>\n    );\n  }\n\n  cageStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"cagestyle-label\">\n            Style\n          </InputLabel>\n          <Select\n            labelId=\"cagestyle-label\"\n            fullWidth={true}\n            value={this.state.cageStyle}\n            onChange={(event) => this.setStyle(\"cageStyle\", event.target.value)}\n          >\n            <MenuItem value=\"dash\">Dashed</MenuItem>\n            <MenuItem value=\"edge:thin\">Edge thin</MenuItem>\n            <MenuItem value=\"edge:medium\">Edge medium </MenuItem>\n            <MenuItem value=\"edge:fat\">Edge fat</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  edgeStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"edgestyle-label\">\n            Style\n          </InputLabel>\n          <Select\n            labelId=\"cagestyle-label\"\n            fullWidth={true}\n            value={this.state.edgeStyle}\n            onChange={(event) => this.setStyle(\"edgeStyle\", event.target.value)}\n          >\n            <MenuItem value=\"thin\">Thin</MenuItem>\n            <MenuItem value=\"medium\">Medium</MenuItem>\n            <MenuItem value=\"fat\">Fat</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  pathStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"pathstyle-label\">\n            Style\n          </InputLabel>\n          <Select\n            labelId=\"pathstyle-label\"\n            fullWidth={true}\n            value={this.state.pathStyle}\n            onChange={(event) => this.setStyle(\"pathStyle\", event.target.value)}\n          >\n            <MenuItem value=\"thin\">Line</MenuItem>\n            <MenuItem value=\"medium\">Medium line</MenuItem>\n            <MenuItem value=\"fat\">Fat Line</MenuItem>\n            <MenuItem value=\"thermo\">Thermo</MenuItem>\n            <MenuItem value=\"arrow\">Arrow</MenuItem>\n            <MenuItem value=\"arrowcircle\">Arrow with circle</MenuItem>\n            <MenuItem value=\"roundborder\">Round border</MenuItem>\n            <MenuItem value=\"border\">Border</MenuItem>\n            <MenuItem value=\"roundfill\">Round fill</MenuItem>\n            <MenuItem value=\"squarefill\">Square fill</MenuItem>\n            <MenuItem value=\"polygon\">Polygon</MenuItem>\n            <MenuItem value=\"polygonfill\">Polygon fill</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  timerBox() {\n    return (\n      <Box minWidth=\"250px\">\n        <Timer\n          active={this.state.timeStatus}\n          onStart={() => this.setState({ timeStatus: true })}\n          onStop={() => this.setState({ timeStatus: false })}\n        />\n        {this.state.description !== \"\" && (\n          <Box margin=\"20px\">\n            <TextField\n              multiline\n              variant=\"outlined\"\n              InputProps={{ readOnly: true }}\n              value={this.state.description}\n            />\n          </Box>\n        )}\n        <Box margin=\"20px\">\n          <TextField multiline variant=\"outlined\" />\n        </Box>\n      </Box>\n    );\n  }\n\n  settingLeftBox() {\n    return (\n      <Box minWidth=\"250px\">\n        <Box margin=\"30px\">\n          <Select\n            fullWidth={true}\n            value={this.state.mode}\n            onChange={(event) => this.setMode(event.target.value)}\n          >\n            <MenuItem value=\"number\">Number</MenuItem>\n            <MenuItem value=\"cage\">Cage</MenuItem>\n            <MenuItem value=\"path\">Path</MenuItem>\n            <MenuItem value=\"color\">Color</MenuItem>\n            <MenuItem value=\"edge\">Edge</MenuItem>\n          </Select>\n          {this.state.mode === \"number\" && this.numberStyleBox()}\n          {this.state.mode === \"cage\" && this.cageStyleBox()}\n          {this.state.mode === \"path\" && this.pathStyleBox()}\n          {this.state.mode === \"edge\" && this.edgeStyleBox()}\n        </Box>\n        <Box margin=\"30px\">\n          <Select\n            fullWidth={true}\n            value={this.state.settingsMode}\n            onChange={(event) =>\n              this.setState({ settingsMode: event.target.value })\n            }\n          >\n            <MenuItem value=\"size\">Size</MenuItem>\n            <MenuItem value=\"margins\">Margins</MenuItem>\n            <MenuItem value=\"grid\">Grid</MenuItem>\n            <MenuItem value=\"description\">Description</MenuItem>\n            <MenuItem value=\"solve\">Solve</MenuItem>\n          </Select>\n        </Box>\n        {this.state.settingsMode === \"size\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            {this.sizeSlider(\"cellSize\", \"Cell size\", 32, 96, 4, true)}\n            {this.sizeSlider(\"width\", \"Width\", 3, 30)}\n            {this.sizeSlider(\"height\", \"Height\", 3, 30)}\n          </Box>\n        )}\n        {this.state.settingsMode === \"margins\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            {this.sizeSlider(\"left\", \"Left\")}\n            {this.sizeSlider(\"right\", \"Right\")}\n            {this.sizeSlider(\"top\", \"Top\")}\n            {this.sizeSlider(\"bottom\", \"Bottom\")}\n          </Box>\n        )}\n        {this.state.settingsMode === \"grid\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            {this.sizeSlider(\"gridDivWidth\", \"Grid divider width\")}\n            {this.sizeSlider(\"gridDivHeight\", \"Grid divider height\")}\n            <FormControl fullWidth={true}>\n              <InputLabel id=\"gridstyle-label\">Style</InputLabel>\n              <Select\n                labelId=\"gridstyle-label\"\n                fullWidth={true}\n                value={this.state.gridStyle}\n                onChange={(event) =>\n                  this.setGridState(\"gridStyle\", event.target.value)\n                }\n              >\n                <MenuItem value=\"lines\">Lines</MenuItem>\n                <MenuItem value=\"dash\">Dashed</MenuItem>\n                <MenuItem value=\"dots\">Dots</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControl fullWidth={true}>\n              <FormLabel>Diagonals</FormLabel>\n              <FormGroup>\n                <FormControlLabel\n                  fullWidth={true}\n                  control={\n                    <Switch\n                      checked={this.state.gridLeftDiagonal}\n                      onChange={(e) => {\n                        this.setGridState(\"gridLeftDiagonal\", e.target.checked);\n                      }}\n                    />\n                  }\n                  label=\"Left\"\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      labelId=\"rightdiagonal-label\"\n                      fullWidth={true}\n                      checked={this.state.gridRightDiagonal}\n                      onChange={(e) => {\n                        this.setGridState(\n                          \"gridRightDiagonal\",\n                          e.target.checked\n                        );\n                      }}\n                    />\n                  }\n                  label=\"Right\"\n                />\n              </FormGroup>\n            </FormControl>\n          </Box>\n        )}\n        {this.state.settingsMode === \"description\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            <TextField\n              multiline\n              rows={8}\n              value={this.state.description}\n              onChange={(e) => this.setState({ description: e.target.value })}\n            />\n          </Box>\n        )}\n        {this.state.settingsMode === \"solve\" && (\n          <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n            <FormControl fullWidth={true}>\n              <FormLabel></FormLabel>\n              <FormGroup>\n                <FormControlLabel\n                  fullWidth={true}\n                  control={\n                    <Switch\n                      checked={this.state.solveSudoku}\n                      onChange={(e) => {\n                        this.setState({ solveSudoku: e.target.checked });\n                      }}\n                    />\n                  }\n                  label=\"Sudoku\"\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      fullWidth={true}\n                      checked={this.state.solveEdge}\n                      onChange={(e) => {\n                        this.setState({ solveEdge: e.target.checked });\n                      }}\n                    />\n                  }\n                  label=\"Edge\"\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      fullWidth={true}\n                      checked={this.state.solveCenterLine}\n                      onChange={(e) => {\n                        this.setState({ solveCenterLine: e.target.checked});\n                      }}\n                    />\n                  }\n                  label=\"Center line\"\n                />\n              </FormGroup>\n            </FormControl>\n          </Box>\n        )}\n      </Box>\n    );\n  }\n\n  handleChange(newValue, type) {\n    this.setState({ [type]: newValue });\n  }\n\n  setGrid(type) {\n    if (\n      [\n        \"cellSize\",\n        \"gridDivWidth\",\n        \"gridDivHeight\",\n        \"gridStyle\",\n        \"gridLeftDiagonal\",\n        \"gridRightDiagonal\",\n      ].includes(type)\n    )\n      DrawUpdateGrid(this.canvasRef.current, this.state);\n    else DrawRender(code, this.canvasRef.current, this.state);\n  }\n\n  setGridState = (state, value) => {\n    this.setState({ [state]: value }, () => {\n      this.setGrid(state);\n    });\n  };\n\n  sizeSlider(type, label, min = 0, max = 10, step = 1, marks = false) {\n    return (\n      <Box>\n        <Typography>\n          {label}: {this.state[type]}\n        </Typography>\n        <Slider\n          value={this.state[type]}\n          min={min}\n          max={max}\n          step={step}\n          marks={marks}\n          id={type}\n          onChange={(e, newValue) => this.handleChange(newValue, type)}\n          onChangeCommitted={() => this.setGrid(type)}\n        />\n      </Box>\n    );\n  }\n\n  check = () => {\n    let r = DrawCheck();\n    let status = r[0];\n    let msg = r[1];\n    if (status) this.setState({ timeStatus: false });\n    alert(msg);\n  };\n\n  renderSolveMode() {\n    let buttons = [];\n    if (this.state.solveSudoku)\n      buttons.push(\n        [\"normal\", \"Normal\"],\n        [\"center\", \"Center\"],\n        [\"corner\", \"Corner\"]\n      );\n    if (this.state.solveEdge) buttons.push([\"edgecross\", \"Edge\"]);\n    if (this.state.solveCenterLine) buttons.push([\"centerline\", \"Center line\"]);\n    buttons.push([\"color\", \"Color\"]);\n\n    return (\n      <Box display=\"flex\" flexDirection=\"row\">\n        {this.timerBox()}\n        <Box display=\"flex\">\n          <div id=\"canvas\" ref={this.canvasRef}></div>\n        </Box>\n        <Box minWidth=\"250px\" maxWidth=\"250px\">\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              {buttons.map((b) => (\n                <Button\n                  id={\"button\" + b[0]}\n                  key={b[0]}\n                  color={this.state.mode === b[0] ? \"primary\" : \"default\"}\n                  onClick={() => this.setMode(b[0])}\n                >\n                  {b[1]}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              <Button onClick={DrawUndo}>Undo</Button>\n              <Button onClick={DrawRedo}>Redo</Button>\n              <Button onClick={DrawDelete}>Delete</Button>\n              <Button onClick={this.check}>Check</Button>\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              <ResetButton />\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <Grid container>\n              {this.state.mode === \"color\" && <ColorGrid num={9} />}\n              {[\"normal\", \"center\", \"corner\"].includes(this.state.mode) &&\n                [...Array(9).keys()].map((index) => (\n                  <Grid key={index} item xs={4}>\n                    <Button\n                      variant=\"outlined\"\n                      onClick={() => DrawSetNumber(index + 1)}\n                    >\n                      <div style={{ fontSize: \"20px\" }}>{index + 1}</div>\n                    </Button>\n                  </Grid>\n                ))}\n            </Grid>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n\n  settingRight() {\n    return (\n      <Grid container>\n        {this.state.mode !== \"color\" && <ColorSelect />}\n        {this.state.mode === \"color\" && <ColorGrid />}\n        {this.state.mode === \"number\" && <SymbolSelect />}\n      </Grid>\n    );\n  }\n\n  renderSetMode() {\n    return (\n      <Box display=\"flex\" flexDirection=\"row\">\n        <UrlDialog\n          text={this.state.dialogText}\n          open={this.state.dialogOpen}\n          onClose={() => this.setState({ dialogOpen: false })}\n        />\n        {this.settingLeftBox()}\n        <Box display=\"flex\">\n          <div id=\"canvas\" ref={this.canvasRef}></div>\n        </Box>\n        <Box minWidth=\"250px\" maxWidth=\"250px\">\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              <ResetButton />\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <ButtonGroup\n              fullWidth={true}\n              size=\"large\"\n              variant=\"contained\"\n              orientation=\"vertical\"\n            >\n              <Button onClick={DrawDelete}>Delete</Button>\n              <Button onClick={this.generateUrl}>Generate URL</Button>\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">{this.settingRight()}</Box>\n        </Box>\n      </Box>\n    );\n  }\n\n  render() {\n    return (\n      <ConfirmProvider>\n        {solveMode ? this.renderSolveMode() : this.renderSetMode()}\n      </ConfirmProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}