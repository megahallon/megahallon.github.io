{"version":3,"sources":["draw.js","App.js","serviceWorker.js","index.js"],"names":["cell_size","grid_w","grid_h","grid_left","grid_top","grid_bottom","grid_right","grid_div_width","grid_div_height","grid_style","corner_offset","hover_offset","DrawColors","current_color","current_mode","current_style","solve_mode","scene","matrix","stuff","drag","undo_stack","thermo","cage","edge_cage","outer","underlay","shift","cursor","grid_lines","textOptions","font","Component","cursors","pointer","centerTextOptions","fill","cornerTextOptions","cageCornerTextOptions","Text2","ctx","origin","this","getOrigin","translate","x","y","path","window","Path2D","rect","width","height","fillStyle","options","toString","Text","set_cell","mode","color","newtext","m","get","undo_entry","old_normal","normal","text","main_grid","lock_type","center","corner","r_color","meas","measure","position","forEach","t","side","current","i","indexOf","cage_corner","r_color_set","push","DrawSetColor","color_index","each_cell","mark","render","center_px","p","draw_thermo","points","style","_color","match","map","c","Color","red","alpha","green","blue","bulb","arrow","strokeWidth","start_px","slice","px","Circle","stroke","length","p1","p2","dx","dy","cs","Container","rotation","Math","atan2","PI","arrow_line","Line","join","joins","miter","add","line","objs","DrawSetMode","state","solveMode","cageStyle","thermoStyle","numberStyle","DashLine","setLineDash","dash","f","draw_dash_cage","cells","get_cage","find","e","lines","up","down","left","right","ul","ur","dl","dr","l","add_line","start","end","corner_pos","corner_ext_pos","r_cage","concat","draw_edge_cage","r_corner_pos","DrawCheck","r","range","rows","Array","from","columns","boxes","n","b","floor","isEqual","sort","alert","DrawDelete","rem","s","parent","remove","filter","count","DrawReset","DrawUndo","u","pop","DrawRender","code","wrapper","cellSize","top","bottom","gridDivWidth","gridDivHeight","dashedGrid","base64","pack","Uint8Array","atob","charCodeAt","unpack","pako","inflate","data","msgpack","decode","version","grid","load_size","wrapper_clone","cloneNode","parentNode","replaceChild","Scene","on","event","key","keyup","type","outer_w","outer_x","size","options_inner","fontSize","xp","yp","cont","Rectangle","edge_right","edge_bottom","r_hover","side_pos","center_pos","r_corner","mousedown","hover","pos","edge","move","inner_hover","frame_w","frame_h","frame","thin","fat","add_grid","empty","_s","load","addEventListener","target","tagName","preventDefault","startsWith","keydown","query","location","search","url_params","URLSearchParams","UrlDialog","props","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","focus","App","handleKeyDown","setMode","cycle_modes","setState","setStyle","value","generateUrl","url","description","out","desc","coded","encode","packed","deflate","btoa","String","fromCharCode","encodeURIComponent","DrawGenerateUrl","dialogText","dialogOpen","handleChange","newValue","id","setGrid","document","getElementById","canvasRef","React","createRef","settingsMode","seconds","timeStatus","DrawGetDescription","interval","setInterval","removeEventListener","clearInterval","Box","margin","FormControl","fullWidth","InputLabel","shrink","Select","labelId","onChange","MenuItem","label","min","max","step","marks","Typography","Slider","onChangeCommitted","display","flexDirection","padding","boxShadow","align","variant","Date","toISOString","substr","ButtonGroup","PlayArrow","Pause","SkipPrevious","TextField","multiline","InputProps","readOnly","numberStyleBox","cageStyleBox","thermoStyleBox","orientation","sizeSlider","Switch","checked","ref","Grid","container","index","item","xs","console","log","border","background","keys","number","DrawSetNumber","Boolean","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d082c0b4.chunk.js","sourcesContent":["import {\n    Scene, Text, Rectangle, Component,\n    Color, Container, Line, Circle\n} from \"pencil.js\";\n\nimport pako from \"pako\";\nimport msgpack from \"msgpack-lite\";\nimport { isEqual, range } from 'lodash';\n\nlet cell_size = 0;\nlet grid_w = 0;\nlet grid_h = 0;\nlet grid_left = 0;\nlet grid_top = 0;\nlet grid_bottom = 0;\nlet grid_right = 0;\nlet grid_div_width = 0;\nlet grid_div_height = 0;\nlet grid_style = \"normal\";\nlet corner_offset = 0;\nlet hover_offset = 0;\n\nconst type_thermo = 1;\nconst type_cage = 2;\n\nconst lock_normal = 1;\nconst lock_corner = 2;\nconst lock_color = 3;\n\nconst sol_text_color = \"rgb(29, 106, 229)\";\nconst mark_color = \"rgba(247, 208, 56, 0.5)\";\nexport const DrawColors = [\n    \"rgba(0, 0, 0, 1)\",\n    \"rgba(207, 207, 207, 0.5)\",\n    \"rgba(255, 255, 255, 0)\",\n    \"rgba(163, 224, 72, 0.5)\",\n    \"rgba(210, 59, 231, 0.5)\",\n    \"rgba(235, 117, 50, 0.5)\",\n    \"rgba(226, 38, 31, 0.5)\",\n    \"rgba(247, 208, 56, 0.5)\",\n    \"rgba(52, 187, 230, 0.5)\"];\n\nlet current_color = 0;\nlet current_mode = \"normal\";\nlet current_style = null;\nlet solve_mode = false;\nlet scene = null;\nlet matrix = [];\nlet stuff = [];\nlet drag = false;\nlet undo_stack = [];\nlet thermo = null;\nlet cage = null;\nlet edge_cage = null;\nlet outer = null;\nlet underlay = null;\nlet shift = false;\nlet cursor = null;\nlet grid_lines = [];\n\nfunction reset() {\n    matrix = [];\n    stuff = [];\n    undo_stack = [];\n    thermo = null;\n    cage = null;\n    edge_cage = null;\n    outer = null;\n    underlay = null;\n    shift = false;\n    cursor = null;\n}\n\nconst textOptions = {\n    font: \"sans-serif\",\n    cursor: Component.cursors.pointer\n};\nconst centerTextOptions = {\n    font: \"sans-serif\",\n    fill: sol_text_color,\n    cursor: Component.cursors.pointer\n};\nconst cornerTextOptions = {\n    font: \"sans-serif\",\n    fill: sol_text_color,\n    cursor: Component.cursors.pointer\n};\nconst cageCornerTextOptions = {\n    font: \"sans-serif\",\n    fill: \"black\",\n    cursor: Component.cursors.pointer\n};\n\nclass Text2 extends Text\n{\n    makePath(ctx) {\n        const origin = this.getOrigin();\n        ctx.translate(origin.x, origin.y);\n\n        this.path = new window.Path2D();\n        this.path.rect(0, 0, this.width, this.height);\n\n        ctx.fillStyle = \"rgba(255,255,255,1)\";\n        ctx.fill(this.path);\n        ctx.fillStyle = this.options.fill.toString(ctx);\n\n        ctx.translate(-origin.x, -origin.y);\n\n        super.makePath(ctx);\n\n        return this;\n    }\n}\n\nfunction set_cell(x, y, mode, color, newtext)\n{\n    let m = get(x, y);\n    let undo_entry = {\n        mode: mode,\n        x: x, y: y,\n        newtext: newtext,\n        old_normal: m.normal.text\n    };\n\n    if (!m.main_grid && mode !== \"set\") {\n        return;\n    }\n    if (m.lock_type === lock_normal && mode !== \"set\") {\n        return;\n    }\n\n    if (mode === \"reset\") {\n        m.center.text = \"\";\n        m.normal.text = \"\";\n        m.corner.text = \"\";\n        m.r_color.options.fill = null;\n    }\n    else if (mode === \"normal\" || mode === \"set\") {\n        if (mode === \"normal\") {\n            m.normal.options.fill = sol_text_color;\n        }\n        else {\n            m.lock_type = (newtext !== \"\") ? lock_normal : 0;\n            m.normal.options.fill = DrawColors[color];\n            m.color = color;\n        }\n        if (!m.main_grid && newtext !== \"\")\n            m.normal.text += newtext;\n        else\n            m.normal.text = newtext;\n        const meas = Text.measure(m.normal.text, m.normal.text.options);\n        m.normal.position.x = (cell_size - 2.5 * meas.width) / 2;\n        m.normal.position.y = cell_size * 0.15;\n        m.center.text = \"\";\n        m.corner.forEach(t => { t.text = \"\"; });\n        m.side.forEach(t => { t.text = \"\"; });\n    }\n    else if (mode === \"center\" && m.normal.text === \"\") {\n        let current = m.center.text;\n        let center = \"\";\n        m.center.options.fill = sol_text_color;\n        if (newtext !== \"\") {\n            for (let i = 1; i <= 9; ++i) {\n                if ((current.indexOf(i) === -1 && i === +newtext)\n                    || (current.indexOf(i) !== -1 && i !== +newtext)) {\n                    center += i;\n                }\n            }\n        }\n\n        m.center.text = center;\n        const meas = Text.measure(center, m.center.options);\n        m.center.position.x = (cell_size - meas.width) / 2;\n        m.center.position.y = (cell_size - meas.height) / 2;\n    }\n    else if (mode === \"set_corner\") {\n        if (newtext === \"\")\n            m.cage_corner.text = \"\";\n        else\n            m.cage_corner.text += newtext;\n        m.lock_type = (newtext !== \"\") ? lock_corner : 0;\n    }\n    else if (mode === \"corner\" && m.normal.text === \"\") {\n        let current = \"\";\n        m.corner.forEach(t => { current += t.text; });\n        m.side.forEach(t => { current += t.text; });\n        let text = \"\";\n        if (newtext !== \"\") {\n            for (let i = 1; i <= 9; ++i) {\n                if ((current.indexOf(i) === -1 && i === +newtext)\n                    || (current.indexOf(i) !== -1 && i !== +newtext)) {\n                    text += i;\n                }\n            }\n        }\n        let i = 0;\n        m.corner.forEach(t => { t.text = text[i++] || \"\"; });\n        m.side.forEach(t => { t.text = text[i++] || \"\"; });\n    }\n    else if (mode === \"color\") {\n        if (solve_mode) {\n            m.r_color.options.fill = DrawColors[color];\n        }\n        else {\n            m.r_color_set.options.fill = DrawColors[color];\n            m.fill = color;\n        }\n    }\n    undo_entry.normal = m.normal.text;\n    undo_stack.push(undo_entry);\n}\n\nfunction keyup(event) {\n    if (event.key === \"Shift\") {\n        shift = false;\n    }\n}\n\nexport function DrawSetNumber(number) {\n  let count = 0;\n  each_cell(m => {\n    if (m.mark) {\n      set_cell(m.x, m.y, current_mode, current_color, number);\n      ++count;\n    }\n  });\n  undo_stack.push({mode: 'group', count: count});\n  scene.render();\n}\n\nexport function DrawSetColor(color_index) {\n  current_color = color_index;\n  if (current_mode === \"color\") {\n    each_cell(m => {\n      if (m.mark)\n        set_cell(m.x, m.y, \"color\", color_index, null);\n    });\n    scene.render();\n  }\n}\n\nfunction keydown(event) {\n    if (event.target.tagName === \"TEXTAREA\") {\n      return;\n    }\n\n    let newtext;\n    if (event.key === \"Shift\") {\n        shift = true;\n        return;\n    }\n    else if (event.key === \"Delete\" || event.key === \"Backspace\") {\n        DrawDelete();\n        event.preventDefault();\n        return;\n    }\n    else if (event.key >= \"0\" && event.key <= \"9\") {\n        newtext = event.key;\n    }\n    else if (event.key.startsWith(\"Arrow\") && cursor) {\n        if (!shift) {\n            each_cell(m => {\n                if (m.mark) {\n                    m.rect.options.fill = \"rgba(255, 255, 255, 0)\";\n                    m.mark = false;\n                }\n            });\n        }\n\n        if (event.key === \"ArrowUp\" && cursor[1] > 0)\n            cursor[1] -= 1;\n        if (event.key === \"ArrowDown\" && cursor[1] < grid_h - 1)\n            cursor[1] += 1;\n        if (event.key === \"ArrowLeft\" && cursor[0] > 0)\n            cursor[0] -= 1;\n        if (event.key === \"ArrowRight\" && cursor[0] < grid_w - 1)\n            cursor[0] += 1;\n        mark(cursor[0], cursor[1]);\n        scene.render();\n        return;\n    }\n    else {\n        return;\n    }\n\n    let count = 0;\n    for (let x = 0; x < grid_w; ++x) {\n      for (let y = 0; y < grid_h; ++y) {\n            let m = get(x, y);\n            if (m.mark) {\n                if (current_mode === \"color\") {\n                    let color = +newtext - 1;\n                    if (color >= 0 && color <= 9) {\n                        set_cell(x, y, current_mode, color, null);\n                    }\n                }\n                else\n                    set_cell(x, y, current_mode, current_color, newtext);\n                ++count;\n            }\n        }\n    }\n    undo_stack.push({mode: 'group', count: count});\n\n    scene.render();\n}\n\nfunction get(x, y) {\n    if (x < 0 || y < 0 || x >= grid_w || y >= grid_h) {\n        return null;\n    }\n    return matrix[y][x];\n}\n\nfunction mark(x, y) {\n    let m = get(x, y);\n    m.mark = true;\n    m.rect.options.fill = mark_color;\n}\n\nfunction inner_hover(x, y) {\n    if (!drag) return;\n\n    if (current_mode === \"thermo\") {\n        underlay.remove(...thermo.objs);\n        thermo.cells.push([x, y]);\n        thermo.objs = draw_thermo(thermo.cells, current_style, current_color);\n        scene.render();\n    }\n}\n\nfunction move(event, x, y) {\n    if (!drag) return;\n\n    if (current_mode === \"edge\") {\n        let m = get(x, y);\n        let xp = event.position.x - outer.position.x - m.pos[0];\n        let yp = event.position.y - outer.position.y - m.pos[1];\n        if ((xp < cell_size * 0.4 || xp > cell_size * 0.6) && yp > cell_size * 0.4 && yp < cell_size * 0.6) {\n            if (xp < cell_size * 0.4)\n                m = get(x - 1, y);\n            let edge = new Line(\n                [cell_size, 0], [[0, cell_size]],\n                {fill: null, strokeWidth: 3, stroke: \"black\"});\n            m.edge_right.add(edge);\n            scene.render();\n        }\n        else if ((yp < cell_size * 0.4 || yp > cell_size * 0.6)\n                && xp > cell_size * 0.4 && xp < cell_size * 0.6) {\n            if (yp < cell_size * 0.4)\n                m = get(x, y - 1);\n            let edge = new Line(\n                [0, cell_size], [[cell_size, 0]],\n                {fill: null, strokeWidth: 3, stroke: \"black\"});\n            m.edge_bottom.add(edge);\n            scene.render();\n        }\n    }\n}\n\nfunction hover(x, y) {\n    if (!drag) return;\n\n    if (current_mode === \"thermo\" || current_mode === \"edge\") {\n    } else if (current_mode === \"cage\" && current_style === \"edge\") {\n        if (edge_cage.objs)\n            edge_cage.objs.forEach(l => l.parent.remove(l));\n        edge_cage.cells.push([x, y]);\n        edge_cage.objs = draw_edge_cage(edge_cage.cells);\n    } else if (current_mode === \"cage\" && current_style === \"dash\") {\n        if (cage.objs)\n            cage.objs.forEach(l => l.parent.remove(l));\n        cage.cells.push([x, y]);\n        cage.objs = draw_dash_cage(cage.cells);\n    } else {\n        mark(x, y);\n    }\n    scene.render();\n}\n\nfunction mousedown(event, x, y) {\n    if (!shift) {\n        each_cell(m => {\n            if (m.mark) {\n                m.rect.options.fill = \"rgba(255, 255, 255, 0)\";\n                m.mark = false;\n            }\n        });\n    }\n\n    cursor = [x, y];\n    drag = true;\n\n    if (current_mode === \"thermo\") {\n        thermo = {cells: [[x, y]], color: current_color};\n        thermo.objs = draw_thermo(thermo.cells, current_style, current_color);\n    }\n    else if (current_mode === \"cage\" && current_style === \"dash\") {\n        cage = {cells: [x, y]};\n        cage.objs = draw_dash_cage(cage.cells);\n    }\n    else if (current_mode === \"cage\" && current_style === \"edge\") {\n        edge_cage = {cells: [x, y]};\n        edge_cage.objs = draw_edge_cage(edge_cage.cells);\n    }\n    else if (current_mode === \"edge\") {\n    }\n    else {\n        mark(x, y);\n    }\n\n    scene.render();\n}\n\nfunction center_px(p)\n{\n    return [p[0] * cell_size + cell_size / 2,\n            p[1] * cell_size + cell_size / 2];\n}\n\nfunction draw_thermo(points, style, color_index) {\n    let _color = DrawColors[color_index].match(/[.\\d]+/g).map(c => (c > 1) ? c / 255 : +c);\n    let color = new Color(..._color);\n    color.red = color.red * color.alpha + (1 - color.alpha) * 1;\n    color.green = color.green * color.alpha + (1 - color.alpha) * 1;\n    color.blue = color.blue * color.alpha + (1 - color.alpha) * 1;\n    color.alpha = 1;\n    let bulb = null;\n    let arrow = null;\n    let strokeWidth = cell_size * 0.3;\n    let start_px = center_px(points[0]);\n    points = points.slice(1).map(p => {\n        let px = center_px(p);\n        return {x: px[0] - start_px[0], y: px[1] - start_px[1]};\n    });\n    if (style === \"bulb\")\n      bulb = new Circle(start_px, cell_size * 0.4, {fill: color});\n    else if (style === \"arrow\") {\n      strokeWidth = cell_size * 0.05;\n      bulb = new Circle(start_px, cell_size * 0.4,\n          {fill: \"white\", strokeWidth: strokeWidth, stroke: color});\n      if (points.length > 1) {\n        let p1 = points[points.length - 1];\n        let p2 = points[points.length - 2];\n        let dx = p2.x - p1.x;\n        let dy = p2.y - p1.y;\n        let cs = cell_size / 4;\n        arrow = new Container();\n        arrow.position = {x: p1.x + start_px[0], y: p1.y + start_px[1]};\n        arrow.options.rotation = 0.5 + (Math.atan2(dy, dx) / (2 * Math.PI));\n        let arrow_line = new Line({x: 0, y: 0},\n            [{x: -cs, y: -cs}, {x: 0, y: 0}, {x: -cs, y: cs}],\n            {stroke: color, strokeWidth: strokeWidth, join: Line.joins.miter});\n        arrow.add(arrow_line);\n      }\n    }\n    let line = new Line(start_px, points,\n        {stroke: color, strokeWidth: strokeWidth, join: Line.joins.miter});\n    let objs = [];\n    if (arrow)\n      objs.push(arrow);\n    objs.push(line);\n    if (bulb)\n      objs.push(bulb);\n    underlay.add(...objs);\n    scene.render();\n    return objs;\n}\n\nfunction mouseup() {\n    drag = false;\n    if (current_mode === \"thermo\" && thermo) {\n        stuff.push({type: type_thermo, style: current_style,\n                    cells: thermo.cells, objs: thermo.objs,\n                    color: current_color});\n        thermo = null;\n    }\n    else if (current_mode === \"cage\" && current_style === \"dash\" && cage) {\n        stuff.push({type: type_cage, style: current_style, objs: cage.objs, cells: cage.cells});\n        cage = null;\n    }\n    else if (current_mode === \"cage\" && current_style === \"edge\" && edge_cage) {\n        stuff.push({type: type_cage, style: current_style, objs: edge_cage.objs, cells: edge_cage.cells});\n        edge_cage = null;\n    }\n}\n\nexport function DrawSetMode(state) {\n    current_mode = state.mode;\n    solve_mode = state.solveMode;\n    if (state.mode === \"cage\")\n        current_style = state.cageStyle;\n    if (state.mode === \"thermo\")\n        current_style = state.thermoStyle;\n    if (state.mode === \"number\" && state.numberStyle === \"normal\")\n        current_mode = \"set\"\n    if (state.mode === \"number\" && state.numberStyle === \"corner\")\n        current_mode = \"set_corner\"\n}\n\nclass DashLine extends Line {\n    setContext(ctx) {\n        super.setContext(ctx);\n        ctx.setLineDash([this.options.dash, this.options.dash]);\n    }\n}\n\nfunction each_cell(f) {\n    for (let x = 0; x < grid_w; ++x) {\n        for (let y = 0; y < grid_h; ++y) {\n            let m = get(x, y);\n            f(m);\n        }\n    }\n}\n\nfunction draw_dash_cage(cells)\n{\n    let get_cage = (x, y) => {\n        return cells.find(e => e[0] === x && e[1] === y);\n    };\n\n    let lines = [];\n    each_cell(m => {\n        let x = m.x;\n        let y = m.y;\n        if (!get_cage(x, y)) return;\n        let up = get_cage(x, y - 1);\n        let down = get_cage(x, y + 1);\n        let left = get_cage(x - 1, y);\n        let right = get_cage(x + 1, y);\n        let ul = get_cage(x - 1, y - 1);\n        let ur = get_cage(x + 1, y - 1);\n        let dl = get_cage(x - 1, y + 1);\n        let dr = get_cage(x + 1, y + 1);\n        let l = [];\n        let add_line = (start, end) => {\n            l.push(new DashLine(\n                start, [[end[0] - start[0], end[1] - start[1]]],\n                {dash: 4, strokeWidth: 2, stroke: \"black\"}));\n        }\n        if (!left) {\n            let start = m.corner_pos[0];\n            let end = m.corner_pos[3];\n            if (up) {\n                start = m.corner_ext_pos[1].slice(0);\n                start[1] -= (!ul ? 0 : corner_offset);\n            }\n            if (down) {\n                end = m.corner_ext_pos[6].slice(0);\n                end[1] += (!dl ? 0 : corner_offset);\n            }\n            add_line(start, end);\n        }\n        if (!right) {\n            let start = m.corner_pos[1];\n            let end = m.corner_pos[2];\n            if (up) {\n                start = m.corner_ext_pos[2].slice(0);\n                start[1] -= (!ur ? 0 : corner_offset);\n            }\n            if (down) {\n                end = m.corner_ext_pos[5].slice(0);\n                end[1] += (!dr ? 0 : corner_offset);\n            }\n            add_line(start, end);\n        }\n        if (!up) {\n            let start = m.corner_pos[0];\n            let end = m.corner_pos[1];\n            if (left) {\n                start = m.corner_ext_pos[0].slice(0);\n                start[0] -= (!ul ? 0 : corner_offset);\n            }\n            if (right) {\n                end = m.corner_ext_pos[3].slice(0);\n                end[0] += (!ur ? 0 : corner_offset);\n            }\n            add_line(start, end);\n        }\n        if (!down) {\n            let start = m.corner_pos[3];\n            let end = m.corner_pos[2];\n            if (left) {\n                start = m.corner_ext_pos[7].slice(0);\n                start[0] -= (!dl ? 0 : corner_offset);\n            }\n            if (right) {\n                end = m.corner_ext_pos[4].slice(0);\n                end[0] += (!dr ? 0 : corner_offset);\n            }\n            add_line(start, end);\n        }\n        l.forEach(e => m.r_cage.add(e));\n        lines = lines.concat(l);\n    });\n    scene.render();\n    return lines;\n}\n\nfunction draw_edge_cage(cells)\n{\n    let get_cage = (x, y) => {\n        return cells.find(e => e[0] === x && e[1] === y);\n    };\n\n    let lines = [];\n    each_cell(m => {\n        let x = m.x;\n        let y = m.y;\n        if (!get_cage(x, y)) return;\n        let up = get_cage(x, y - 1);\n        let down = get_cage(x, y + 1);\n        let left = get_cage(x - 1, y);\n        let right = get_cage(x + 1, y);\n        let l = [];\n        let add_line = (start, end) => {\n            l.push(new Line(\n                start, [[end[0] - start[0], end[1] - start[1]]],\n                {strokeWidth: 4, stroke: \"black\"}));\n        }\n        if (!left) {\n            let start = m.r_corner_pos[0];\n            let end = m.r_corner_pos[3];\n            add_line(start, end);\n        }\n        if (!right) {\n            let start = m.r_corner_pos[1];\n            let end = m.r_corner_pos[2];\n            add_line(start, end);\n        }\n        if (!up) {\n            let start = m.r_corner_pos[0];\n            let end = m.r_corner_pos[1];\n            add_line(start, end);\n        }\n        if (!down) {\n            let start = m.r_corner_pos[3];\n            let end = m.r_corner_pos[2];\n            add_line(start, end);\n        }\n        l.forEach(e => m.edge_cage.add(e));\n        lines.push(...l);\n    });\n    scene.render();\n    return lines;\n}\n\nfunction load_size(base64)\n{\n    let pack = Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n    let unpack = pako.inflate(pack);\n    let data = msgpack.decode(unpack);\n\n    if (data.version !== 1) {\n        alert(\"Bad version\");\n    }\n\n    cell_size = data.grid[0];\n    grid_w = data.grid[1];\n    grid_h = data.grid[2];\n    grid_left = data.grid[3];\n    grid_right = data.grid[4];\n    grid_top = data.grid[5];\n    grid_bottom = data.grid[6];\n    grid_div_width = data.grid[7];\n    grid_div_height = data.grid[8];\n    grid_style = data.grid[9];\n}\n\nfunction load(base64)\n{\n    let pack = Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n    let unpack = pako.inflate(pack);\n    let data = msgpack.decode(unpack);\n\n    underlay.empty();\n\n    stuff = [];\n    each_cell(m => {\n        m.lock_type = 0;\n        m.normal.text = \"\";\n        m.center.text = \"\";\n    });\n\n    data.cells.forEach(c => {\n        let [x, y, type, text, color] = c;\n        if (type === lock_normal) {\n            set_cell(x, y, \"set\", color, text);\n        }\n        else if (type === lock_corner) {\n            set_cell(x, y, \"set_corner\", color, text);\n        }\n        else if (type === lock_color) {\n            set_cell(x, y, \"color\", color, text);\n        }\n    });\n    data.stuff.forEach(_s => {\n        let s = {type: _s[0], style: _s[1], color: _s[2], cells: _s[3]};\n        if (s.type === type_thermo) {\n            s.objs = draw_thermo(s.cells, s.style, s.color);\n        }\n        else if (s.type === type_cage && s.style === \"dash\") {\n            s.objs = draw_dash_cage(s.cells);\n        }\n        else if (s.type === type_cage && s.style === \"edge\") {\n            s.objs = draw_edge_cage(s.cells);\n        }\n        stuff.push(s);\n    });\n\n    scene.render();\n}\n\nexport function DrawGetDescription(base64)\n{\n    let pack = Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n    let unpack = pako.inflate(pack);\n    let data = msgpack.decode(unpack);\n\n    return data.desc;\n}\n\nexport function DrawGenerateUrl(description)\n{\n    let out = {\n        version: 1,\n        grid: [cell_size, grid_w, grid_h, grid_left, grid_right, grid_top, grid_bottom,\n               grid_div_width, grid_div_height, grid_style],\n        cells: [],\n        stuff: stuff.map(e => [e.type, e.style, e.color, e.cells]),\n        desc: description\n    };\n\n    each_cell(m => {\n        if (m.lock_type === lock_normal)\n            out.cells.push([m.x, m.y, m.lock_type, m.normal.text, m.color]);\n        if (m.lock_type === lock_corner)\n            out.cells.push([m.x, m.y, m.lock_type, m.cage_corner.text, m.color]);\n        if (m.fill !== -1)\n            out.cells.push([m.x, m.y, lock_color, null, m.fill]);\n    });\n\n    let coded = msgpack.encode(out);\n    let packed = pako.deflate(coded);\n    let base64 = btoa(String.fromCharCode(...packed));\n    return window.location.origin + \"/?s=1&p=\" + encodeURIComponent(base64);\n}\n\nexport function DrawCheck() {\n    let r = range(1, 10);\n    let rows = Array.from({length: 9}, () => []);\n    let columns = Array.from({length: 9}, () => []);\n    let boxes = Array.from({length: 9}, () => []);\n    each_cell(m => {\n      let x = m.x - grid_left;\n      let y = m.y - grid_top;\n      let n = +m.normal.text;\n      columns[x].push(n);\n      rows[y].push(n);\n      let b = Math.floor(x / 3) + Math.floor(y / 3) * 3;\n      boxes[b].push(n);\n    });\n    for (let i = 0; i < 9; ++i) {\n        if (!isEqual(rows[i].sort(), r)) {\n            alert(`bad row ${i}`);\n            return false;\n        }\n        if (!isEqual(columns[i].sort(), r)) {\n            alert(`bad column ${i}`);\n            return false;\n        }\n        if (!isEqual(boxes[i].sort(), r)) {\n          alert(`bad box ${i}`);\n          return false;\n      }\n    }\n    alert('OK');\n    return true;\n}\n\nexport function DrawDelete() {\n    if (!solve_mode) {\n        let rem = [];\n        stuff.forEach((s, i) => {\n            if (s.cells.find(c => c[0] === cursor[0] && c[1] === cursor[1])) {\n                s.objs.forEach(l => l.parent.remove(l));\n                rem.push(i);\n            }\n        });\n        rem.forEach(r => stuff[r] = null);\n        stuff = stuff.filter(e => e != null);\n    }\n\n    let count = 0;\n    each_cell(m => {\n        if (m.mark) {\n            set_cell(m.x, m.y, current_mode, current_color, \"\");\n            ++count;\n        }\n    });\n\n    if (count > 1) {\n      undo_stack.push({mode: 'group', count: count});\n    }\n\n    scene.render();\n}\n\nexport function DrawReset() {\n    each_cell(m => {\n        set_cell(m.x, m.y, \"reset\", null, \"\");\n    });\n\n    scene.render();\n}\n\nexport function DrawUndo() {\n    if (undo_stack.length === 0)\n        return;\n    let u = undo_stack.pop();\n    let count = 0;\n    if (u.mode === \"group\") {\n        count = u.count;\n        u = undo_stack.pop();\n    }\n    do {\n        if (u.mode === \"normal\" || u.mode === \"set\") {\n            set_cell(u.x, u.y, u.mode, current_color, u.old_normal);\n        }\n        else if (u.mode === \"center\" || u.mode === \"corner\") {\n            set_cell(u.x, u.y, u.mode, current_color, u.newtext);\n        }\n        undo_stack.pop();\n        --count;\n        if (count > 0) {\n            u = undo_stack.pop();\n        }\n    } while (count > 0);\n    scene.render();\n}\n\nfunction add_grid() {\n    let dash = grid_style === \"dash\" ? 4 : 0;\n\n    let thin = {\n        fill: \"rgba(255, 255, 255, 0)\",\n        stroke: \"black\",\n        strokeWidth: 1,\n        dash: dash\n    };\n    let fat = {\n        fill: \"rgba(255, 255, 255, 0)\",\n        stroke: \"black\",\n        strokeWidth: 4\n    };\n\n    outer.remove(...grid_lines);\n\n    let frame_w = grid_w - grid_left - grid_right;\n    let frame_h = grid_h - grid_top - grid_bottom;\n\n    grid_lines = [];\n    for (let x = 0; x < frame_w; ++x) {\n        grid_lines.push(new DashLine(\n            [(grid_left + x) * cell_size, grid_top * cell_size], [[0, frame_h * cell_size]],\n            (x % grid_div_width) === 0 ? fat : thin));\n    }\n    for (let y = 0; y < frame_h; ++y) {\n        grid_lines.push(new DashLine(\n            [grid_left * cell_size, (grid_top + y) * cell_size], [[frame_w * cell_size, 0]],\n            (y % grid_div_height) === 0 ? fat : thin));\n    }\n\n    outer.add(...grid_lines);\n}\n\nexport function DrawRender(code, wrapper, state) {\n    cell_size = state.cellSize;\n    grid_left = state.left;\n    grid_right = state.right;\n    grid_top = state.top;\n    grid_bottom = state.bottom;\n    grid_w = grid_left + state.width + grid_right;\n    grid_h = grid_top + state.height + grid_bottom;\n    grid_div_width = state.gridDivWidth;\n    grid_div_height = state.gridDivHeight;\n    grid_style = state.dashedGrid ? \"dash\" : \"normal\";\n\n    if (code)\n        load_size(code);\n\n    corner_offset = cell_size * 0.08;\n    hover_offset = cell_size * 0.2;\n\n    let wrapper_clone = wrapper.cloneNode(false);\n    wrapper.parentNode.replaceChild(wrapper_clone, wrapper);\n    wrapper_clone.style.width = (cell_size * grid_w + 20) + \"px\";\n    wrapper_clone.style.height = (cell_size * grid_h + 250) + \"px\";\n    scene = new Scene(wrapper_clone);\n    scene.on(\"keyup\", (event) => keyup(event));\n    scene.on(\"mouseup\", () => mouseup());\n    reset();\n\n    const outer_w = cell_size * grid_w;\n    const outer_x = (scene.size.x - outer_w) / 2;\n    const outer_y = 20;\n    const options = {\n        fill: \"rgba(255, 255, 255, 0)\",\n        stroke: \"black\",\n        strokeWidth: 1,\n        cursor: Component.cursors.pointer\n    };\n    const options_inner = {\n        fill: \"rgba(255, 255, 255, 0)\",\n        cursor: Component.cursors.pointer\n    };\n\n    textOptions.fontSize = cell_size * 0.8;\n    centerTextOptions.fontSize = cell_size * 0.3;\n\n    outer = new Container([outer_x, outer_y]);\n    scene.add(outer);\n\n    underlay = new Container([0, 0]);\n    outer.add(underlay);\n\n    for (let y = 0; y < grid_h; ++y) {\n        matrix[y] = [];\n    }\n    let cs = cell_size;\n\n    for (let x = 0; x < grid_w; ++x) {\n        for (let y = 0; y < grid_h; ++y) {\n            let xp = x * cs;\n            let yp = y * cs;\n            let main_grid = (x >= grid_left && y >= grid_top\n              && x < (grid_w - grid_right) && y < (grid_h - grid_bottom));\n            let cont = new Container([xp, yp]);\n            //options.strokeWidth = main_grid ? 1 : 0;\n            options.strokeWidth = 0;\n            let r = new Rectangle([0, 0], cs, cs, options);\n            let edge_right = new Rectangle([0, 0], cs, cs, options);\n            let edge_bottom = new Rectangle([0, 0], cs, cs, options);\n            let edge_cage = new Rectangle([0, 0], cs, cs, options);\n            let r_cage = new Rectangle([0, 0], cs, cs, options);\n            let r_color = new Rectangle([0, 0], cs, cs, options);\n            let r_color_set = new Rectangle([0, 0], cs, cs, options);\n            let r_hover = new Rectangle(\n                [hover_offset, hover_offset],\n                cs - hover_offset * 2,\n                cs - hover_offset * 2, options_inner);\n            let normal = new Text([0, cs * 0.5], \"\", textOptions);\n            let center = new Text([0, cs * 0.4], \"\", centerTextOptions);\n            let corner_pos = [];\n            corner_pos[0] = [corner_offset, corner_offset];\n            corner_pos[1] = [cs - corner_offset, corner_offset];\n            corner_pos[2] = [cs - corner_offset, cs - corner_offset];\n            corner_pos[3] = [corner_offset, cs - corner_offset];\n            let side_pos = [];\n            side_pos[0] = [cs / 2, corner_offset];\n            side_pos[1] = [cs - corner_offset, cs / 2];\n            side_pos[2] = [cs / 2, cs - corner_offset];\n            side_pos[3] = [corner_offset, cs / 2];\n            let center_pos = [cs / 2, cs / 2];\n\n            let cage_corner = [];\n            let corner = [];\n            if (main_grid) {\n                cornerTextOptions.fontSize = cs * 0.25;\n                cageCornerTextOptions.fontSize = cs * 0.25;\n                corner_pos.forEach((p, i) => {\n                    p = p.slice(0);\n                    p[0] -= cs * 0.025;\n                    p[1] -= cs * 0.025;\n                    if (i === 2 || i === 3) p[1] -= cs * 0.15;\n                    if (i === 1 || i === 2) p[0] -= cs * 0.1;\n                    if (i === 0)\n                        cage_corner.push(new Text2(p, \"\", cageCornerTextOptions));\n                    corner.push(new Text(p, \"\", cornerTextOptions));\n                });\n            }\n            let side = [];\n            if (main_grid) {\n                side_pos.forEach((p, i) => {\n                    p = p.slice(0);\n                    p[0] -= cs * 0.02;\n                    p[1] -= cs * 0.02;\n                    if (i === 2) p[1] -= cs * 0.15;\n                    if (i === 1 || i === 3) p[1] -= cs * 0.05;\n                    if (i === 0 || i === 2) p[0] -= cs * 0.02;\n                    if (i === 1) p[0] -= cs * 0.1;\n                    side.push(new Text(p, \"\", cornerTextOptions));\n                });\n            }\n\n            let r_corner = [];\n            r_corner[0] = [0, 0];\n            r_corner[1] = [cs, 0];\n            r_corner[2] = [cs, cs];\n            r_corner[3] = [0, cs];\n            let corner_ext_pos = [];\n            corner_ext_pos[0] = [0, corner_offset];\n            corner_ext_pos[1] = [corner_offset, 0];\n            corner_ext_pos[2] = [cs - corner_offset, 0];\n            corner_ext_pos[3] = [cs, corner_offset];\n            corner_ext_pos[4] = [cs, cs - corner_offset];\n            corner_ext_pos[5] = [cs - corner_offset, cs];\n            corner_ext_pos[6] = [corner_offset, cs];\n            corner_ext_pos[7] = [0, cs - corner_offset];\n            cont.add(r_color_set, r_color, r, r_cage, edge_cage,\n                     edge_right, edge_bottom, r_hover, normal, center,\n                     ...cage_corner, ...corner, ...side);\n            cont.on(\"mousedown\", (event) => mousedown(event, x, y));\n            cont.on(\"hover\", () => hover(x, y));\n            cont.on(\"mousemove\", (event) => move(event, x, y));\n            r_hover.on(\"hover\", () => inner_hover(x, y));\n            matrix[y][x] = {\n                x: x, y: y, pos: [xp, yp], cont: cont, rect: r,\n                fill: null, color: null,\n                normal: normal, center: center,\n                r_corner_pos: r_corner,\n                corner: corner, side: side,\n                corner_pos: corner_pos, center_pos: center_pos,\n                side_pos: side_pos,\n                corner_ext_pos: corner_ext_pos,\n                cage_corner: cage_corner[0],\n                edge_cage: edge_cage,\n                edge_right: edge_right,\n                edge_bottom: edge_bottom,\n                r_cage: r_cage, r_color_set: r_color_set,\n                r_color: r_color, main_grid: main_grid\n            };\n            outer.add(cont);\n        }\n    }\n\n    let frame_w = grid_w - grid_left - grid_right;\n    let frame_h = grid_h - grid_top - grid_bottom;\n    let frame = new Rectangle(\n        [grid_left * cell_size, grid_top * cell_size],\n        frame_w * cell_size, frame_h * cell_size,\n        {strokeWidth: 4, stroke: \"black\", fill: null});\n    outer.add(frame);\n\n    add_grid();\n\n    scene.render();\n\n    if (code)\n        load(code);\n\n    return null;\n}\n\nwindow.addEventListener(\"keydown\", (event) => keydown(event));\n","import React from 'react';\nimport './App.css';\nimport { DrawRender, DrawSetMode, DrawUndo, DrawDelete,\n         DrawGenerateUrl, DrawSetNumber, DrawSetColor, DrawColors,\n         DrawGetDescription, DrawReset, DrawCheck } from './draw';\nimport { Box, Button, ButtonGroup, Dialog, DialogTitle, DialogContent,\n         DialogContentText, DialogActions, Slider, Typography, Select,\n         MenuItem, FormControl, InputLabel, Grid, TextField, Switch } from '@material-ui/core';\nimport { PlayArrow, Pause, SkipPrevious } from '@material-ui/icons';\n\nconst query = window.location.search;\nconst url_params = new URLSearchParams(query);\nconst code = url_params.get(\"p\");\nconst solve_mode = url_params.get(\"s\") === \"1\";\n\nfunction UrlDialog(props) {\n  let openInTab = () => {\n    props.onClose();\n    let w = window.open(props.text, '_blank');\n    w.focus();\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <DialogTitle>URL</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {props.text}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={openInTab}>Open in tab</Button>\n        <Button color=\"primary\" onClick={props.onClose}>OK</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n\n    this.state = {\n      solveMode: solve_mode,\n      settingsMode: \"size\",\n      color: 0,\n      description: \"\",\n      cellSize: 64,\n      width: 9,\n      height: 9,\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      gridDivWidth: 3,\n      gridDivHeight: 3,\n      dashedGrid: false,\n      mode: solve_mode ? \"normal\" : \"thermo\",\n      numberStyle: \"normal\",\n      cageStyle: \"dash\",\n      thermoStyle: \"arrow\",\n      dialogOpen: false,\n      dialogText: \"\",\n      seconds: 0,\n      timeStatus: false,\n    };\n  }\n\n  handleKeyDown = (event) => {\n    if (this.state.solveMode) {\n      if (event.key === \"q\") {\n        this.setMode(\"normal\");\n      }\n      if (event.key === \"w\") {\n        this.setMode(\"center\");\n      }\n      if (event.key === \"e\") {\n        this.setMode(\"corner\");\n      }\n      if (event.key === \"r\") {\n        this.setMode(\"color\");\n      }\n      if (event.key === \" \") {\n        let cycle_modes = [\"normal\", \"center\", \"corner\", \"color\"];\n        let i = cycle_modes.indexOf(this.state.mode);\n        if (i !== -1) {\n          i = (i + 1) % cycle_modes.length;\n          this.setMode(cycle_modes[i]);\n        }\n        else {\n          this.setMode(\"normal\");\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    let desc = \"\";\n    if (code) {\n      desc = DrawGetDescription(code);\n    }\n    this.setState({description: desc}, () =>\n      DrawRender(code, this.canvasRef.current, this.state));\n    DrawSetMode(this.state);\n\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n\n    this.interval = setInterval(() => {\n      if (this.state.timeStatus) {\n        this.setState({seconds: this.state.seconds + 1});\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n    clearInterval(this.interval);\n  }\n\n  setMode = (mode) => {\n    this.setState({mode: mode}, () => DrawSetMode(this.state));\n  }\n\n  setStyle = (style, value) => {\n    this.setState({[style]: value}, () => DrawSetMode(this.state));\n  }\n\n  generateUrl = () => {\n    let url = DrawGenerateUrl(this.state.description);\n    this.setState({dialogText: url, dialogOpen: true});\n  }\n\n  numberStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"numberstyle-label\">\n            Style\n          </InputLabel>\n          <Select labelId=\"numberstyle-label\" fullWidth={true} value={this.state.numberStyle}\n                  onChange={(event) => this.setStyle(\"numberStyle\", event.target.value)}>\n            <MenuItem value=\"normal\">Normal</MenuItem>\n            <MenuItem value=\"corner\">Corner</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  cageStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"cagestyle-label\">\n            Style\n          </InputLabel>\n          <Select labelId=\"cagestyle-label\" fullWidth={true} value={this.state.cageStyle}\n                  onChange={(event) => this.setStyle(\"cageStyle\", event.target.value)}>\n            <MenuItem value=\"dash\">Dashed</MenuItem>\n            <MenuItem value=\"edge\">Edge</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  thermoStyleBox() {\n    return (\n      <Box margin=\"10px\">\n        <FormControl fullWidth={true}>\n          <InputLabel shrink id=\"thermostyle-label\">\n            Style\n          </InputLabel>\n          <Select labelId=\"thermostyle-label\" fullWidth={true} value={this.state.thermoStyle}\n                  onChange={(event) => this.setStyle(\"thermoStyle\", event.target.value)}>\n            <MenuItem value=\"bulb\">With bulb</MenuItem>\n            <MenuItem value=\"nobulb\">No bulb</MenuItem>\n            <MenuItem value=\"arrow\">Arrow</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n    );\n  }\n\n  handleChange = (event, newValue) => {\n    this.setState({[event.target.parentNode.id]: newValue});\n  }\n\n  setGrid = () => {\n    // Can't use ref as element is replaced\n    DrawRender(code, document.getElementById('canvas'), this.state);\n  }\n\n  sizeSlider(type) {\n    let t = {\n      cellSize: {label: \"Cell size\",min: 32, max: 96, step: 4, marks: true},\n      width: {label: \"Width\", min: 3, max: 30, step: 1, marks: false},\n      height: {label: \"Height\", min: 3, max: 30, step: 1, marks: false},\n      gridDivWidth: {label: \"Grid divider width\", min: 0, max: 10, step: 1, marks: false},\n      gridDivHeight: {label: \"Grid divider height\", min: 0, max: 10, step: 1, marks: false},\n      left: {label: \"Left margin\", min: 0, max: 10, step: 1, marks: false},\n      right: {label: \"Right margin\", min: 0, max: 10, step: 1, marks: false},\n      top: {label: \"Top margin\", min: 0, max: 10, step: 1, marks: false},\n      bottom: {label: \"Bottom margin\", min: 0, max: 10, step: 1, marks: false},\n    }[type];\n    return (\n      <Box>\n        <Typography>{t.label}: {this.state[type]}</Typography>\n        <Slider value={this.state[type]}\n          min={t.min} max={t.max} step={t.step} marks={t.marks} id={type}\n          onChange={this.handleChange}\n          onChangeCommitted={this.setGrid}/>\n      </Box>\n    );\n  }\n\n  render() {\n    let buttons = [\n      [\"normal\", \"Normal\"],\n      [\"center\", \"Center\"],\n      [\"corner\", \"Corner\"],\n      [\"color\", \"Color\"]\n    ];\n\n    return (\n      <Box display=\"flex\" flexDirection=\"row\">\n        <UrlDialog text={this.state.dialogText} open={this.state.dialogOpen} onClose={() => this.setState({dialogOpen: false})}/>\n          {this.state.solveMode &&\n          <Box width=\"250px\">\n            <Box margin=\"20px\" padding=\"10px\" boxShadow={3}>\n              <Typography align=\"center\" variant=\"h4\">{new Date(this.state.seconds * 1000).toISOString().substr(11, 8)}</Typography>\n              <ButtonGroup fullWidth={true} size=\"large\">\n                <Button onClick={() => this.setState({timeStatus: true})}><PlayArrow/></Button>\n                <Button onClick={() => this.setState({timeStatus: false})}><Pause/></Button>\n                <Button onClick={() => this.setState({seconds: 0, timeStatus: false})}><SkipPrevious/></Button>\n              </ButtonGroup>\n            </Box>\n            {this.state.description !== \"\" &&\n              <Box margin=\"20px\">\n                <TextField multiline variant=\"outlined\"\n                  InputProps={{readOnly: true}}\n                  value={this.state.description}/>\n              </Box>\n            }\n            <Box margin=\"20px\">\n              <TextField multiline variant=\"outlined\" />\n            </Box>\n        </Box>\n        }\n        {!this.state.solveMode &&\n          <Box width=\"250px\">\n            <Box margin=\"30px\">\n              <Select fullWidth={true} value={this.state.mode} onChange={(event) => this.setMode(event.target.value)}>\n                <MenuItem value=\"number\">Number</MenuItem>\n                <MenuItem value=\"cage\">Cage</MenuItem>\n                <MenuItem value=\"thermo\">Thermo</MenuItem>\n                <MenuItem value=\"color\">Color</MenuItem>\n              </Select>\n              { this.state.mode === \"number\" && this.numberStyleBox() }\n              { this.state.mode === \"cage\" && this.cageStyleBox() }\n              { this.state.mode === \"thermo\" && this.thermoStyleBox() }\n            </Box>\n            <Box margin=\"30px\">\n              <ButtonGroup fullWidth={true} size=\"large\" variant=\"contained\" orientation=\"vertical\">\n                <Button onClick={this.generateUrl}>Generate URL</Button>\n              </ButtonGroup>\n            </Box>\n            <Box margin=\"30px\">\n              <Select fullWidth={true} value={this.state.settingsMode} onChange={(event) => this.setState({settingsMode: event.target.value})}>\n                <MenuItem value=\"size\">Size</MenuItem>\n                <MenuItem value=\"margins\">Margins</MenuItem>\n                <MenuItem value=\"grid\">Grid</MenuItem>\n                <MenuItem value=\"description\">Description</MenuItem>\n              </Select>\n            </Box>\n            { this.state.settingsMode === \"size\" &&\n            <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n              { this.sizeSlider(\"cellSize\") }\n              { this.sizeSlider(\"width\") }\n              { this.sizeSlider(\"height\") }\n            </Box>\n            }\n            { this.state.settingsMode === \"margins\" &&\n            <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n              { this.sizeSlider(\"left\") }\n              { this.sizeSlider(\"right\") }\n              { this.sizeSlider(\"top\") }\n              { this.sizeSlider(\"bottom\") }\n            </Box>\n            }\n            { this.state.settingsMode === \"grid\" &&\n            <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n              { this.sizeSlider(\"gridDivWidth\") }\n              { this.sizeSlider(\"gridDivHeight\") }\n              <Typography>Dashed</Typography>\n              <Switch checked={this.state.dashedGrid} onChange={(e) => {this.setGrid(\"dashedGrid\", e.target.checked)}}/>\n            </Box>\n            }\n            { this.state.settingsMode === \"description\" &&\n            <Box margin=\"30px\" padding=\"10px\" boxShadow={3}>\n              <TextField multiline rows={8}\n                value={this.state.description} onChange={(e) => this.setState({description: e.target.value})}/>\n            </Box>\n            }\n          </Box>\n        }\n        <Box display=\"flex\">\n          <div id=\"canvas\" ref={this.canvasRef}></div>\n        </Box>\n        <Box width=\"250px\">\n          {this.state.solveMode &&\n            <Box margin=\"30px\">\n              <ButtonGroup fullWidth={true} size=\"large\" variant=\"contained\" orientation=\"vertical\">\n                {buttons.map((b) => (\n                  <Button key={b[0]} color={this.state.mode === b[0] ? \"primary\" : \"default\"} onClick={(e) => this.setMode(b[0])}>{b[1]}</Button>\n                ))}\n              </ButtonGroup>\n            </Box>\n          }\n          <Box margin=\"30px\">\n            <ButtonGroup fullWidth={true} size=\"large\" variant=\"contained\" orientation=\"vertical\">\n              <Button onClick={DrawReset}>Reset</Button>\n              <Button onClick={DrawCheck}>Check</Button>\n              <Button onClick={DrawUndo}>Undo</Button>\n              <Button onClick={DrawDelete}>Delete</Button>\n            </ButtonGroup>\n          </Box>\n          <Box margin=\"30px\">\n            <Grid container>\n            {(!this.state.solveMode && this.state.mode !== \"color\") && DrawColors.map((color, index) =>\n              <Grid key={index} item xs={4}>\n                <Button variant={this.state.color === index ? \"contained\" : \"outlined\"} onClick={() => {console.log(index, this.state.color); this.setState({color: index}); DrawSetColor(index)}}>\n                  <div style={{border: \"1px solid black\", background: color, width: \"30px\", height: \"30px\"}}/>\n                </Button>\n              </Grid>\n            )}\n            {this.state.mode === \"color\" && DrawColors.map((color, index) =>\n              <Grid key={index} item xs={4}>\n                <Button variant=\"outlined\" onClick={() => DrawSetColor(index)}>\n                  <div style={{border: \"1px solid black\", background: color, width: \"30px\", height: \"30px\"}}/>\n                </Button>\n              </Grid>\n            )}\n            {this.state.mode !== \"color\" && [...Array(9).keys()].map(index =>\n              <Grid key={index} item xs={4}>\n                <Button variant=\"outlined\" onClick={() => DrawSetNumber(index + 1)}>\n                <div style={{fontSize: \"20px\"}}>\n                  {index + 1}\n                </div>\n                </Button>\n              </Grid>\n            )}\n            </Grid>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}